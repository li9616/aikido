<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>common.hpp</name>
    <path>/include/aikido/</path>
    <filename>dd/d3a/common_8hpp</filename>
    <includes id="d2/d1a/ExecutorMultiplexer_8hpp" name="ExecutorMultiplexer.hpp" local="yes" imported="no">common/ExecutorMultiplexer.hpp</includes>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="yes" imported="no">common/ExecutorThread.hpp</includes>
    <includes id="d1/da2/PseudoInverse_8hpp" name="PseudoInverse.hpp" local="yes" imported="no">common/PseudoInverse.hpp</includes>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">common/RNG.hpp</includes>
    <includes id="d8/d2a/common_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">common/Spline.hpp</includes>
    <includes id="d2/db8/StepSequence_8hpp" name="StepSequence.hpp" local="yes" imported="no">common/StepSequence.hpp</includes>
    <includes id="dc/d7a/VanDerCorput_8hpp" name="VanDerCorput.hpp" local="yes" imported="no">common/VanDerCorput.hpp</includes>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">common/metaprogramming.hpp</includes>
    <includes id="d9/d0f/stream_8hpp" name="stream.hpp" local="yes" imported="no">common/stream.hpp</includes>
    <includes id="d4/da0/string_8hpp" name="string.hpp" local="yes" imported="no">common/string.hpp</includes>
  </compound>
  <compound kind="file">
    <name>algorithm.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>de/d55/algorithm_8hpp</filename>
    <includes id="d7/de8/algorithm-impl_8hpp" name="algorithm-impl.hpp" local="yes" imported="no">aikido/common/detail/algorithm-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2f785e13331ed3caff844bf698624116</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2a65ebfdf34681623893b6d60c462756</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>algorithm-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d7/de8/algorithm-impl_8hpp</filename>
    <includes id="de/d55/algorithm_8hpp" name="algorithm.hpp" local="yes" imported="no">aikido/common/algorithm.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>ExecutorThread-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>da/d57/ExecutorThread-impl_8hpp</filename>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="no" imported="no">aikido/common/ExecutorThread.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>metaprogramming-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d6/d39/metaprogramming-impl_8hpp</filename>
    <class kind="struct">aikido::common::DynamicCastFactory_shared_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory_raw_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt;&gt; &gt;</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt; Arg, Args...&gt; &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>pair-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d4/d71/pair-impl_8hpp</filename>
    <includes id="d3/d9f/pair_8hpp" name="pair.hpp" local="no" imported="no">aikido/common/pair.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>RNG-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>dc/d15/RNG-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>Quaternion</type>
      <name>sampleQuaternion</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a7d110a30773e873691fa252da91ca085</anchor>
      <arglist>(Engine &amp;_engine, std::uniform_real_distribution&lt; Scalar &gt; &amp;_distribution)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spline-impl.hpp</name>
    <path>/include/aikido/common/detail/</path>
    <filename>d0/dcd/Spline-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>ExecutorMultiplexer.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/d1a/ExecutorMultiplexer_8hpp</filename>
    <class kind="class">aikido::common::ExecutorMultiplexer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>ExecutorThread.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/d0a/ExecutorThread_8hpp</filename>
    <includes id="da/d57/ExecutorThread-impl_8hpp" name="ExecutorThread-impl.hpp" local="no" imported="no">aikido/common/detail/ExecutorThread-impl.hpp</includes>
    <class kind="class">aikido::common::ExecutorThread</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>metaprogramming.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d1/d66/metaprogramming_8hpp</filename>
    <includes id="d6/d39/metaprogramming-impl_8hpp" name="metaprogramming-impl.hpp" local="yes" imported="no">detail/metaprogramming-impl.hpp</includes>
    <class kind="class">aikido::common::type_list</class>
    <class kind="struct">aikido::common::DynamicCastFactory</class>
    <class kind="struct">aikido::common::DynamicCastFactory_shared_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory_raw_ptr</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>pair.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d3/d9f/pair_8hpp</filename>
    <includes id="d4/d71/pair-impl_8hpp" name="pair-impl.hpp" local="yes" imported="no">aikido/common/detail/pair-impl.hpp</includes>
    <class kind="struct">aikido::common::PairHash</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>pointers.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d5/d1d/common_2pointers_8hpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>AIKIDO_DECLARE_POINTERS</name>
      <anchorfile>d5/d1d/common_2pointers_8hpp.html</anchorfile>
      <anchor>a1f88d36d3e6b150e590dd0438cfeeb98</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pointers.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/dba/rviz_2pointers_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SkeletonMarker &gt;</type>
      <name>SkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a34c18ceffcdaf5069bd9e4dd1fff6138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const SkeletonMarker &gt;</type>
      <name>ConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac0608bfce88f8d98aae072fc3417f47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; SkeletonMarker &gt;</type>
      <name>WeakSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a93b63da472cb064ee34784703eb54b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const SkeletonMarker &gt;</type>
      <name>WeakConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeb4d34775b5b1b118169e8a592c9e3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SkeletonMarker &gt;</type>
      <name>UniqueSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a86f3d2693acc64aec0cccb4333cdb04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const SkeletonMarker &gt;</type>
      <name>UniqueConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a75aa225502b51f99e37c3a477e1f1f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryMarker &gt;</type>
      <name>TrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7af26876878ce12697125131d1c5506c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>ConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a185736f10f213b7055511921a016e6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryMarker &gt;</type>
      <name>WeakTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afb1c1eb2215ba1fa4d9bf1d9b25c0c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>WeakConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1273cc977c76332e21b2fc10b95b920c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryMarker &gt;</type>
      <name>UniqueTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a97920acb9abdf2a704fbc054834d2b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>UniqueConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a894bb565b23b21b3add62f6b97f62cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSRMarker &gt;</type>
      <name>TSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a590951cdd9bce6890edd775ed8ef2a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSRMarker &gt;</type>
      <name>ConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aef0d1b452a6ba7e6dfe95fbe552105d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSRMarker &gt;</type>
      <name>WeakTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab40eb785f9450167704216f3ab15cdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSRMarker &gt;</type>
      <name>WeakConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae1925d8939631694db9a676f236d1d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSRMarker &gt;</type>
      <name>UniqueTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeba7efd72953d7cb0e919d0e4b3b889c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSRMarker &gt;</type>
      <name>UniqueConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aba793434f7d1a453e19df5f2c139a6a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PseudoInverse.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d1/da2/PseudoInverse_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>pseudoinverse</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a0c897267b60a196a6d0b465d3b7050c0</anchor>
      <arglist>(const Eigen::MatrixXd &amp;mat, double eps=1e-6)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RNG.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/d16/RNG_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="dc/d15/RNG-impl_8hpp" name="RNG-impl.hpp" local="yes" imported="no">detail/RNG-impl.hpp</includes>
    <class kind="class">aikido::common::RNG</class>
    <class kind="class">aikido::common::RNGWrapper</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RNG &gt;</type>
      <name>RNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a6e93f385ba51ae65b1358caec7123594</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const RNG &gt;</type>
      <name>ConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5ab830b62be72e5609b3cebb4adf1781</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; RNG &gt;</type>
      <name>WeakRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a08c378abf527cfdd2dfc4b7562221f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const RNG &gt;</type>
      <name>WeakConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a065e5aa82c6a074d83ba022eef076e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>UniqueRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2e5beefd493aaebdee692c2e3e4be73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const RNG &gt;</type>
      <name>UniqueConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ae49864e7eb880866ebf17e8470eceac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGsFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a4b27abd3edae153eb67309e0657f5f8e</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numOutputs, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ac57de355b263a15212902e5ba3ac6967</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>NUM_DEFAULT_SEEDS</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5e75364963030abfe764984f5dcf35e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spline.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d8/d2a/common_2Spline_8hpp</filename>
    <includes id="d0/dcd/Spline-impl_8hpp" name="Spline-impl.hpp" local="yes" imported="no">detail/Spline-impl.hpp</includes>
    <class kind="class">aikido::common::SplineND</class>
    <class kind="class">aikido::common::SplineProblem</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>Spline.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>df/db2/trajectory_2Spline_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">Trajectory.hpp</includes>
    <class kind="class">aikido::trajectory::Spline</class>
    <class kind="struct">aikido::trajectory::Spline::PolynomialSegment</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Spline &gt;</type>
      <name>SplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>af715b917d92eede8c24a30790d273e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Spline &gt;</type>
      <name>ConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aa8b189d07ea49d83c818baee644ebb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Spline &gt;</type>
      <name>WeakSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a896ee681516fff77ef6c14e209b5f00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Spline &gt;</type>
      <name>WeakConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afd2d0c8515b91196680d24f8b8cef069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Spline &gt;</type>
      <name>UniqueSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a20652ba77dffc09d6854f0a67236fe49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Spline &gt;</type>
      <name>UniqueConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae070eefd5debfb165f8dd0399516271c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StepSequence.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d2/db8/StepSequence_8hpp</filename>
    <class kind="class">aikido::common::StepSequence</class>
    <class kind="class">aikido::common::StepSequence::const_iterator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>stream.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d9/d0f/stream_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <namespace>aikido::common::operators</namespace>
    <member kind="function">
      <type>void</type>
      <name>printCollisionObject</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a39252825f40e93cfec2ecc20abf7e31a</anchor>
      <arglist>(const dart::collision::CollisionObject &amp;collisionObject, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCollisionResult</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a54d084e926f9f585cdb549e5774a873b</anchor>
      <arglist>(const dart::collision::CollisionResult &amp;collisionResult, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>a3593747aa33d43a9de2aa3cb986a66de</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionObject &amp;collisionObject)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>af3eeed202bd70764941ea4e67087b827</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionResult &amp;collisionResult)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>string.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>d4/da0/string_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a101ad378b3da9a07f7149aed91ed25df</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;delimiters=&quot; \t&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VanDerCorput.hpp</name>
    <path>/include/aikido/common/</path>
    <filename>dc/d7a/VanDerCorput_8hpp</filename>
    <class kind="class">aikido::common::VanDerCorput</class>
    <class kind="class">aikido::common::VanDerCorput::const_iterator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::common</namespace>
  </compound>
  <compound kind="file">
    <name>constraint.hpp</name>
    <path>/include/aikido/</path>
    <filename>d4/de1/constraint_8hpp</filename>
    <includes id="de/d7e/CartesianProductProjectable_8hpp" name="CartesianProductProjectable.hpp" local="yes" imported="no">constraint/CartesianProductProjectable.hpp</includes>
    <includes id="df/da0/CartesianProductSampleable_8hpp" name="CartesianProductSampleable.hpp" local="yes" imported="no">constraint/CartesianProductSampleable.hpp</includes>
    <includes id="df/d22/CartesianProductTestable_8hpp" name="CartesianProductTestable.hpp" local="yes" imported="no">constraint/CartesianProductTestable.hpp</includes>
    <includes id="da/d85/CyclicSampleable_8hpp" name="CyclicSampleable.hpp" local="yes" imported="no">constraint/CyclicSampleable.hpp</includes>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">constraint/Differentiable.hpp</includes>
    <includes id="d6/d0c/DifferentiableIntersection_8hpp" name="DifferentiableIntersection.hpp" local="yes" imported="no">constraint/DifferentiableIntersection.hpp</includes>
    <includes id="d3/d00/DifferentiableSubspace_8hpp" name="DifferentiableSubspace.hpp" local="yes" imported="no">constraint/DifferentiableSubspace.hpp</includes>
    <includes id="d7/d0d/FiniteSampleable_8hpp" name="FiniteSampleable.hpp" local="yes" imported="no">constraint/FiniteSampleable.hpp</includes>
    <includes id="dd/d34/NewtonsMethodProjectable_8hpp" name="NewtonsMethodProjectable.hpp" local="yes" imported="no">constraint/NewtonsMethodProjectable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">constraint/Projectable.hpp</includes>
    <includes id="da/d89/RejectionSampleable_8hpp" name="RejectionSampleable.hpp" local="yes" imported="no">constraint/RejectionSampleable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">constraint/Sampleable.hpp</includes>
    <includes id="d3/d13/Satisfied_8hpp" name="Satisfied.hpp" local="yes" imported="no">constraint/Satisfied.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">constraint/Testable.hpp</includes>
    <includes id="de/da1/TestableIntersection_8hpp" name="TestableIntersection.hpp" local="yes" imported="no">constraint/TestableIntersection.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">constraint/dart/CollisionFree.hpp</includes>
    <includes id="d9/d1f/FrameDifferentiable_8hpp" name="FrameDifferentiable.hpp" local="yes" imported="no">constraint/dart/FrameDifferentiable.hpp</includes>
    <includes id="d0/d7c/FramePairDifferentiable_8hpp" name="FramePairDifferentiable.hpp" local="yes" imported="no">constraint/dart/FramePairDifferentiable.hpp</includes>
    <includes id="d3/df5/FrameTestable_8hpp" name="FrameTestable.hpp" local="yes" imported="no">constraint/dart/FrameTestable.hpp</includes>
    <includes id="d7/d9f/InverseKinematicsSampleable_8hpp" name="InverseKinematicsSampleable.hpp" local="yes" imported="no">constraint/dart/InverseKinematicsSampleable.hpp</includes>
    <includes id="d0/d33/constraint_2dart_2JointStateSpaceHelpers_8hpp" name="JointStateSpaceHelpers.hpp" local="yes" imported="no">constraint/dart/JointStateSpaceHelpers.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">constraint/dart/TSR.hpp</includes>
    <includes id="d2/dae/RnBoxConstraint_8hpp" name="RnBoxConstraint.hpp" local="yes" imported="no">constraint/uniform/RnBoxConstraint.hpp</includes>
    <includes id="d3/d06/RnConstantSampler_8hpp" name="RnConstantSampler.hpp" local="yes" imported="no">constraint/uniform/RnConstantSampler.hpp</includes>
    <includes id="d5/d89/SE2BoxConstraint_8hpp" name="SE2BoxConstraint.hpp" local="yes" imported="no">constraint/uniform/SE2BoxConstraint.hpp</includes>
    <includes id="df/d19/SO2UniformSampler_8hpp" name="SO2UniformSampler.hpp" local="yes" imported="no">constraint/uniform/SO2UniformSampler.hpp</includes>
    <includes id="dc/d57/SO3UniformSampler_8hpp" name="SO3UniformSampler.hpp" local="yes" imported="no">constraint/uniform/SO3UniformSampler.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProductProjectable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>de/d7e/CartesianProductProjectable_8hpp</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">../statespace/CartesianProduct.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">Projectable.hpp</includes>
    <class kind="class">aikido::constraint::CartesianProductProjectable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProductSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>df/da0/CartesianProductSampleable_8hpp</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">../statespace/CartesianProduct.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">Sampleable.hpp</includes>
    <class kind="class">aikido::constraint::CartesianProductSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProductTestable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>df/d22/CartesianProductTestable_8hpp</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">../statespace/CartesianProduct.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">Testable.hpp</includes>
    <class kind="class">aikido::constraint::CartesianProductTestable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CyclicSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>da/d85/CyclicSampleable_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">Sampleable.hpp</includes>
    <class kind="class">aikido::constraint::CyclicSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionFree.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>de/d1d/CollisionFree_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/d3c/CollisionFreeOutcome_8hpp" name="CollisionFreeOutcome.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFreeOutcome.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::CollisionFree</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CollisionFree &gt;</type>
      <name>CollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a4a19e2641a038515c281e075cb7d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CollisionFree &gt;</type>
      <name>ConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a6f6e3cef5b4b245866ccd85db59179da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CollisionFree &gt;</type>
      <name>WeakCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a0e0786bb7f6099b23f164626e01c1ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CollisionFree &gt;</type>
      <name>WeakConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a408c0f83e36fb6bb1d0d29dfecb4e3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CollisionFree &gt;</type>
      <name>UniqueCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af9ba2c24e4883b5b93daaebfeeca1141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CollisionFree &gt;</type>
      <name>UniqueConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af496650ab9bcf9528aa1049002e97c48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CollisionFreeOutcome.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d2/d3c/CollisionFreeOutcome_8hpp</filename>
    <includes id="d2/d1a/TestableOutcome_8hpp" name="TestableOutcome.hpp" local="yes" imported="no">aikido/constraint/TestableOutcome.hpp</includes>
    <class kind="class">aikido::constraint::dart::CollisionFreeOutcome</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers-impl.hpp</name>
    <path>/include/aikido/constraint/dart/detail/</path>
    <filename>d3/d47/constraint_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp</filename>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">aikido/common/metaprogramming.hpp</includes>
    <includes id="d3/d13/Satisfied_8hpp" name="Satisfied.hpp" local="yes" imported="no">aikido/constraint/Satisfied.hpp</includes>
    <includes id="d2/dae/RnBoxConstraint_8hpp" name="RnBoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/RnBoxConstraint.hpp</includes>
    <includes id="d3/d06/RnConstantSampler_8hpp" name="RnConstantSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/RnConstantSampler.hpp</includes>
    <includes id="d5/d89/SE2BoxConstraint_8hpp" name="SE2BoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/SE2BoxConstraint.hpp</includes>
    <includes id="df/d19/SO2UniformSampler_8hpp" name="SO2UniformSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/SO2UniformSampler.hpp</includes>
    <includes id="dc/d57/SO3UniformSampler_8hpp" name="SO3UniformSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/SO3UniformSampler.hpp</includes>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="yes" imported="no">aikido/statespace/dart/RnJoint.hpp</includes>
    <includes id="d3/d2e/SE2Joint_8hpp" name="SE2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE2Joint.hpp</includes>
    <includes id="df/d83/SE3Joint_8hpp" name="SE3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SE3Joint.hpp</includes>
    <includes id="d6/d05/SO2Joint_8hpp" name="SO2Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO2Joint.hpp</includes>
    <includes id="d6/d26/SO3Joint_8hpp" name="SO3Joint.hpp" local="yes" imported="no">aikido/statespace/dart/SO3Joint.hpp</includes>
    <includes id="dc/de8/WeldJoint_8hpp" name="WeldJoint.hpp" local="yes" imported="no">aikido/statespace/dart/WeldJoint.hpp</includes>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <namespace>aikido::constraint::dart::detail</namespace>
    <member kind="typedef">
      <type>common::type_list&lt; statespace::dart::R0Joint, statespace::dart::R1Joint, statespace::dart::R2Joint, statespace::dart::R3Joint, statespace::dart::R6Joint, statespace::dart::SO2Joint, statespace::dart::SO3Joint, statespace::dart::SE2Joint, statespace::dart::SE3Joint, statespace::dart::WeldJoint &gt;</type>
      <name>JointStateSpaceTypeList</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>aa2ef96897817dae96aa822579615a945</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>acb9755232157469768edc6f955c76f08</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::RJoint&lt; N &gt;&gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a5ff86a443d6e52db73d6ec3f3c0821e7</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::SE2Joint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a83a7d8b037e9f5568f4db6ca58f42094</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::WeldJoint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a98c5eb0198b89b9b80b5b6dd78c326ef</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ab31473e6fa2721102710788489cdc1fa</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a687b2d8e1fda1edac25215480b3a480a</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae92c5efe49c3a447e9dc6e8f3d9408b8</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers-impl.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>d1/d95/statespace_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp</filename>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">../../../common/metaprogramming.hpp</includes>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="yes" imported="no">../RnJoint.hpp</includes>
    <includes id="d3/d2e/SE2Joint_8hpp" name="SE2Joint.hpp" local="yes" imported="no">../SE2Joint.hpp</includes>
    <includes id="df/d83/SE3Joint_8hpp" name="SE3Joint.hpp" local="yes" imported="no">../SE3Joint.hpp</includes>
    <includes id="d6/d05/SO2Joint_8hpp" name="SO2Joint.hpp" local="yes" imported="no">../SO2Joint.hpp</includes>
    <includes id="d6/d26/SO3Joint_8hpp" name="SO3Joint.hpp" local="yes" imported="no">../SO3Joint.hpp</includes>
    <includes id="dc/de8/WeldJoint_8hpp" name="WeldJoint.hpp" local="yes" imported="no">../WeldJoint.hpp</includes>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::RevoluteJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PrismaticJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::TranslationalJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::BallJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PlanarJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::FreeJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::WeldJoint &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <namespace>aikido::statespace::dart::detail</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>Ptr</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ac5edd7cd9796d7a92e83134427897b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; const ::dart::dynamics::BallJoint, const ::dart::dynamics::FreeJoint, const ::dart::dynamics::PlanarJoint, const ::dart::dynamics::PrismaticJoint, const ::dart::dynamics::RevoluteJoint, const ::dart::dynamics::TranslationalJoint, const ::dart::dynamics::WeldJoint &gt;</type>
      <name>ConstSupportedJoints</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ae0c86b17fa7a0d028b17b1e69915b373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpaceFor</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a3ef022436d4a8a4063c0661ec7605791</anchor>
      <arglist>(JointType *joint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrameDifferentiable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d9/d1f/FrameDifferentiable_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::FrameDifferentiable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>FramePairDifferentiable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d0/d7c/FramePairDifferentiable_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::FramePairDifferentiable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>FrameTestable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d3/df5/FrameTestable_8hpp</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">aikido/statespace/SE3.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::FrameTestable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>InverseKinematicsSampleable.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d7/d9f/InverseKinematicsSampleable_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::constraint::dart::InverseKinematicsSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>d0/d33/constraint_2dart_2JointStateSpaceHelpers_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d3/d47/constraint_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp" name="JointStateSpaceHelpers-impl.hpp" local="yes" imported="no">detail/JointStateSpaceHelpers-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af68fa33da8fd50dcbbc4aaaf2a8bb3a6</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a4e3979977a0176e524ae812fa2292e91</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a8c8a593062ee91ce7a85dfcf335cbb77</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a6db8b3446312005ddc3f6a26f319b7e2</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aef8af303f771a3f31c5ecf1f5751f1bc</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a1ff820c1009b11865b608921a9c3eb35</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a0446319013bcb16c67a6d164861d4609</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a50221ac10f5f86c8acb1730280519617</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointStateSpaceHelpers.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d4/dc6/statespace_2dart_2JointStateSpaceHelpers_8hpp</filename>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d1/d95/statespace_2dart_2detail_2JointStateSpaceHelpers-impl_8hpp" name="JointStateSpaceHelpers-impl.hpp" local="yes" imported="no">detail/JointStateSpaceHelpers-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpace</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae89411503a43fe87a58f17a8b2780c24</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TSR.hpp</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>de/dfd/TSR_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">aikido/statespace/SE3.hpp</includes>
    <class kind="class">aikido::constraint::dart::TSR</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::dart</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSR &gt;</type>
      <name>TSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa572847b6da671443d87e7624e6c95d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSR &gt;</type>
      <name>ConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a923f80cf671fae0a3ba38755b83c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSR &gt;</type>
      <name>WeakTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a050763c953a69a2884a949ab97b1e1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSR &gt;</type>
      <name>WeakConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>abfc263235c9d09e77b0f08c90ca2d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSR &gt;</type>
      <name>UniqueTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae45921614745a52165c7c75f93cb705d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSR &gt;</type>
      <name>UniqueConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ac29b63999d2f200ab823e07e9cb9c18c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DefaultTestableOutcome.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d1/d53/DefaultTestableOutcome_8hpp</filename>
    <includes id="d2/d1a/TestableOutcome_8hpp" name="TestableOutcome.hpp" local="yes" imported="no">TestableOutcome.hpp</includes>
    <class kind="class">aikido::constraint::DefaultTestableOutcome</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>TestableOutcome-impl.hpp</name>
    <path>/include/aikido/constraint/detail/</path>
    <filename>d9/d4b/TestableOutcome-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="function">
      <type>Child *</type>
      <name>dynamic_cast_or_throw</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae4d6b7656f37d1bbb9bd5db8feaa5ad0</anchor>
      <arglist>(TestableOutcome *outcome)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Differentiable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d4/d6a/Differentiable_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::Differentiable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Differentiable &gt;</type>
      <name>DifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1a12f838d0919548ebb34e4b5036cf60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Differentiable &gt;</type>
      <name>ConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a42f96ef94d5b9500f69c87d923b0258c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Differentiable &gt;</type>
      <name>WeakDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a0f4439c33f232df8556f26b72692bc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Differentiable &gt;</type>
      <name>WeakConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab26ff2bfec99c0dc173bec479e0699b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>UniqueDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa7410953d2dbe0fa789c5a7b7a6be59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Differentiable &gt;</type>
      <name>UniqueConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab075f8029c906ba6d002d919da337bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintType</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a764bf6aa719f3f394e4ba1289489de4c</anchor>
      <arglist></arglist>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca22d77b4f36283fa15f20867ad3f2a30e">EQUALITY</enumvalue>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca2334c5c5672d3d347e758454046d7333">INEQUALITY</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>DifferentiableIntersection.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d6/d0c/DifferentiableIntersection_8hpp</filename>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">Differentiable.hpp</includes>
    <class kind="class">aikido::constraint::DifferentiableIntersection</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>DifferentiableSubspace.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d3/d00/DifferentiableSubspace_8hpp</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">../statespace/CartesianProduct.hpp</includes>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">Differentiable.hpp</includes>
    <class kind="class">aikido::constraint::DifferentiableSubspace</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>FiniteSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d7/d0d/FiniteSampleable_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">Sampleable.hpp</includes>
    <class kind="class">aikido::constraint::FiniteSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>NewtonsMethodProjectable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>dd/d34/NewtonsMethodProjectable_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">Projectable.hpp</includes>
    <class kind="class">aikido::constraint::NewtonsMethodProjectable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Projectable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d4/d3d/Projectable_8hpp</filename>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::Projectable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Projectable &gt;</type>
      <name>ProjectablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8b943907af16556b4a26c81e83560643</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RejectionSampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>da/d89/RejectionSampleable_8hpp</filename>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">Testable.hpp</includes>
    <class kind="class">aikido::constraint::RejectionSampleable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Sampleable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d6/dcb/Sampleable_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">../common/RNG.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::constraint::Sampleable</class>
    <class kind="class">aikido::constraint::SampleGenerator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Sampleable &gt;</type>
      <name>SampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>addcc44c3249e65b8d273f6a31e30c03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Sampleable &gt;</type>
      <name>ConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa1a59ca1b0d116d55490b4cfa5a80d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Sampleable &gt;</type>
      <name>WeakSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>abbdb6fc190a3ca31069d8d78f2555c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Sampleable &gt;</type>
      <name>WeakConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2aa43a5bd3d81d2771ce3aa1c0d3941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>UniqueSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a04d5d0cfc146c14b41c969d6db1e518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Sampleable &gt;</type>
      <name>UniqueConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae89393311886605be570538a90074ad4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Satisfied.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d3/d13/Satisfied_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">Testable.hpp</includes>
    <class kind="class">aikido::constraint::Satisfied</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>Testable.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d7/def/Testable_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <includes id="d1/d53/DefaultTestableOutcome_8hpp" name="DefaultTestableOutcome.hpp" local="yes" imported="no">DefaultTestableOutcome.hpp</includes>
    <class kind="class">aikido::constraint::Testable</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Testable &gt;</type>
      <name>TestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa749fba91b58949a6c3bd41ae7f39cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Testable &gt;</type>
      <name>ConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2b1b74add33a65ce5994d0f07bdc86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Testable &gt;</type>
      <name>WeakTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a59afe2e627052475fe68a714f5541eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Testable &gt;</type>
      <name>WeakConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1994872c8daeefab2f7b256ed5c644c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>UniqueTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab117e9a807013f31028c0e13dd039e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Testable &gt;</type>
      <name>UniqueConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>af533d04a7259ede666cdbc7e3373eb90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestableIntersection.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>de/da1/TestableIntersection_8hpp</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">Testable.hpp</includes>
    <class kind="class">aikido::constraint::TestableIntersection</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestableIntersection &gt;</type>
      <name>TestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a353151b01c822c0f2751eb3e9e0f7cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TestableIntersection &gt;</type>
      <name>ConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a561ce16cd5dade636b256b32c09efb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TestableIntersection &gt;</type>
      <name>WeakTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8daee5f02e7e9bdbc24644699fbadd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TestableIntersection &gt;</type>
      <name>WeakConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ac0890d7d5647ec9499b1d5d432c0e5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TestableIntersection &gt;</type>
      <name>UniqueTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8a6d705f2a1bb6568bb8fe00bb1f0c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TestableIntersection &gt;</type>
      <name>UniqueConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a7a2cc6be5dda0fd4d4a8ecc4b0f3a04f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestableOutcome.hpp</name>
    <path>/include/aikido/constraint/</path>
    <filename>d2/d1a/TestableOutcome_8hpp</filename>
    <includes id="d9/d4b/TestableOutcome-impl_8hpp" name="TestableOutcome-impl.hpp" local="yes" imported="no">detail/TestableOutcome-impl.hpp</includes>
    <class kind="class">aikido::constraint::TestableOutcome</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>RnBoxConstraint-impl.hpp</name>
    <path>/include/aikido/constraint/uniform/detail/</path>
    <filename>d6/df2/RnBoxConstraint-impl_8hpp</filename>
    <includes id="d2/dae/RnBoxConstraint_8hpp" name="RnBoxConstraint.hpp" local="yes" imported="no">aikido/constraint/uniform/RnBoxConstraint.hpp</includes>
    <class kind="class">aikido::constraint::uniform::RnBoxConstraintSampleGenerator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>RnConstantSampler-impl.hpp</name>
    <path>/include/aikido/constraint/uniform/detail/</path>
    <filename>d7/d5a/RnConstantSampler-impl_8hpp</filename>
    <includes id="d3/d06/RnConstantSampler_8hpp" name="RnConstantSampler.hpp" local="yes" imported="no">aikido/constraint/uniform/RnConstantSampler.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <member kind="define">
      <type>#define</type>
      <name>dtwarn</name>
      <anchorfile>d7/d5a/RnConstantSampler-impl_8hpp.html</anchorfile>
      <anchor>a9713004034ce30e0de1fe34de5096a5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnBoxConstraint.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>d2/dae/RnBoxConstraint_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d6/df2/RnBoxConstraint-impl_8hpp" name="RnBoxConstraint-impl.hpp" local="yes" imported="no">aikido/constraint/uniform/detail/RnBoxConstraint-impl.hpp</includes>
    <class kind="class">aikido::constraint::uniform::RBoxConstraint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 0 &gt;</type>
      <name>R0BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a74032c1d1178f4ea82048f8fd836ea4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 1 &gt;</type>
      <name>R1BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>aadfe7b44198259068917c68b5f6fea75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 2 &gt;</type>
      <name>R2BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afcaa3818f8d20494fcf01831387ef3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 3 &gt;</type>
      <name>R3BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a51c8f4d5b54f9e62c27392f7257d9163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 6 &gt;</type>
      <name>R6BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a78a0dfe4176e2c9ac1ecf20d14cec6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; Eigen::Dynamic &gt;</type>
      <name>RnBoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a612fb574a8d316320865a9f0cde66a22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnConstantSampler.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>d3/d06/RnConstantSampler_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d7/d5a/RnConstantSampler-impl_8hpp" name="RnConstantSampler-impl.hpp" local="yes" imported="no">aikido/constraint/uniform/detail/RnConstantSampler-impl.hpp</includes>
    <class kind="class">aikido::constraint::uniform::RConstantSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <member kind="typedef">
      <type>RConstantSampler&lt; 0 &gt;</type>
      <name>R0ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a7d4666e1982865003824e4f0913f3438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 1 &gt;</type>
      <name>R1ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a6466649294e62304a68331de6b162029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 2 &gt;</type>
      <name>R2ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>ae82ef22f973a9f69c34d3175d4688058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 3 &gt;</type>
      <name>R3ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a30a8a6c822c0a4cdf194f5a36260dd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 6 &gt;</type>
      <name>R6ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a1a99697ca5449aa670f31b1395ee7905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; Eigen::Dynamic &gt;</type>
      <name>RnConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afe45e1c61b9184dd8e55bb8244f85c25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SE2BoxConstraint.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>d5/d89/SE2BoxConstraint_8hpp</filename>
    <includes id="d4/d6a/Differentiable_8hpp" name="Differentiable.hpp" local="yes" imported="no">aikido/constraint/Differentiable.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">aikido/constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">aikido/statespace/SE2.hpp</includes>
    <class kind="class">aikido::constraint::uniform::SE2BoxConstraint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>SO2UniformSampler.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>df/d19/SO2UniformSampler_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">aikido/statespace/SO2.hpp</includes>
    <class kind="class">aikido::constraint::uniform::SO2UniformSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>SO3UniformSampler.hpp</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>dc/d57/SO3UniformSampler_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">aikido/constraint/Sampleable.hpp</includes>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">aikido/statespace/SO3.hpp</includes>
    <class kind="class">aikido::constraint::uniform::SO3UniformSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::constraint::uniform</namespace>
  </compound>
  <compound kind="file">
    <name>control.hpp</name>
    <path>/include/aikido/</path>
    <filename>dc/dfd/control_8hpp</filename>
    <includes id="de/dfe/BarrettFingerKinematicSimulationPositionCommandExecutor_8hpp" name="BarrettFingerKinematicSimulationPositionCommandExecutor.hpp" local="yes" imported="no">control/BarrettFingerKinematicSimulationPositionCommandExecutor.hpp</includes>
    <includes id="d3/d5f/BarrettFingerKinematicSimulationSpreadCommandExecutor_8hpp" name="BarrettFingerKinematicSimulationSpreadCommandExecutor.hpp" local="yes" imported="no">control/BarrettFingerKinematicSimulationSpreadCommandExecutor.hpp</includes>
    <includes id="d4/d42/BarrettHandKinematicSimulationPositionCommandExecutor_8hpp" name="BarrettHandKinematicSimulationPositionCommandExecutor.hpp" local="yes" imported="no">control/BarrettHandKinematicSimulationPositionCommandExecutor.hpp</includes>
    <includes id="d3/d02/InstantaneousTrajectoryExecutor_8hpp" name="InstantaneousTrajectoryExecutor.hpp" local="yes" imported="no">control/InstantaneousTrajectoryExecutor.hpp</includes>
    <includes id="db/d19/KinematicSimulationTrajectoryExecutor_8hpp" name="KinematicSimulationTrajectoryExecutor.hpp" local="yes" imported="no">control/KinematicSimulationTrajectoryExecutor.hpp</includes>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">control/PositionCommandExecutor.hpp</includes>
    <includes id="d7/d37/QueuedTrajectoryExecutor_8hpp" name="QueuedTrajectoryExecutor.hpp" local="yes" imported="no">control/QueuedTrajectoryExecutor.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">control/TrajectoryExecutor.hpp</includes>
    <includes id="de/def/TrajectoryResult_8hpp" name="TrajectoryResult.hpp" local="yes" imported="no">control/TrajectoryResult.hpp</includes>
    <includes id="d3/ddf/TrajectoryRunningException_8hpp" name="TrajectoryRunningException.hpp" local="yes" imported="no">control/TrajectoryRunningException.hpp</includes>
    <includes id="df/d54/Conversions_8hpp" name="Conversions.hpp" local="yes" imported="no">control/ros/Conversions.hpp</includes>
    <includes id="d3/d43/RosJointStateClient_8hpp" name="RosJointStateClient.hpp" local="yes" imported="no">control/ros/RosJointStateClient.hpp</includes>
    <includes id="da/daa/RosPositionCommandExecutor_8hpp" name="RosPositionCommandExecutor.hpp" local="yes" imported="no">control/ros/RosPositionCommandExecutor.hpp</includes>
    <includes id="df/da4/RosTrajectoryExecutionException_8hpp" name="RosTrajectoryExecutionException.hpp" local="yes" imported="no">control/ros/RosTrajectoryExecutionException.hpp</includes>
    <includes id="d0/df8/RosTrajectoryExecutor_8hpp" name="RosTrajectoryExecutor.hpp" local="yes" imported="no">control/ros/RosTrajectoryExecutor.hpp</includes>
    <includes id="d8/ddd/control_2ros_2util_8hpp" name="util.hpp" local="yes" imported="no">control/ros/util.hpp</includes>
  </compound>
  <compound kind="file">
    <name>BarrettFingerKinematicSimulationPositionCommandExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>de/dfe/BarrettFingerKinematicSimulationPositionCommandExecutor_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <class kind="class">aikido::control::BarrettFingerKinematicSimulationPositionCommandExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>BarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6c14c53cb9910c69ead5c1234f348d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>ConstBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a04d30dbf53c19f0022a2959d0bfb0097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a3e03cf73ed55f6d064f036573787594a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakConstBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a2972c6da3dc273cb910bdc4c34892696</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a48491cad4fcee7f29688116763931e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueConstBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ae3c35554b54bdaab1c1950c5fa1d876d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BarrettFingerKinematicSimulationSpreadCommandExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d3/d5f/BarrettFingerKinematicSimulationSpreadCommandExecutor_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <class kind="class">aikido::control::BarrettFingerKinematicSimulationSpreadCommandExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>BarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>abeea13913a1cc5b6e1c0363444f8651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>ConstBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a27ec452aacdd9e9c6323107eb545b170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>WeakBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a34b6473fa41c0004dd250d414a4585c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>WeakConstBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a51ed018423ce1deb1c9b3d5338ff3044</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>UniqueBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1ac446ae9d8d21e57372515e248a943d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>UniqueConstBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1e97e1cd93c41a7e0efb490e390afb85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BarrettHandKinematicSimulationPositionCommandExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d4/d42/BarrettHandKinematicSimulationPositionCommandExecutor_8hpp</filename>
    <includes id="de/dfe/BarrettFingerKinematicSimulationPositionCommandExecutor_8hpp" name="BarrettFingerKinematicSimulationPositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/BarrettFingerKinematicSimulationPositionCommandExecutor.hpp</includes>
    <includes id="d3/d5f/BarrettFingerKinematicSimulationSpreadCommandExecutor_8hpp" name="BarrettFingerKinematicSimulationSpreadCommandExecutor.hpp" local="yes" imported="no">aikido/control/BarrettFingerKinematicSimulationSpreadCommandExecutor.hpp</includes>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <class kind="class">aikido::control::BarrettHandKinematicSimulationPositionCommandExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>BarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ae5b4c9525a1038c6a9c84070d736cdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>ConstBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a9d2ffab5b198b3787ef825321107f919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>aeda747a56eba82f31ad1c63349cd2bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakConstBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af6a3e0cc39957b0d406d0f7f6cd3ab65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ab6b776934858fd2c63307a14152c44a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueConstBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>acb8e601f305e37f099708a86da98e55b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InstantaneousTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d3/d02/InstantaneousTrajectoryExecutor_8hpp</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::InstantaneousTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicSimulationTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>db/d19/KinematicSimulationTrajectoryExecutor_8hpp</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::KinematicSimulationTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>PositionCommandExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d8/dd0/PositionCommandExecutor_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::control::PositionCommandExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>PositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a88d847e44672c3db371d8507f6a69599</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>ConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8fcca9aa9bb24048a3a95cecc821afc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>WeakPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6555b6acf0a36aa8fdda6d7fb9c81af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>WeakConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a67a1c05b63331eb86ec434e27fb66c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>UniquePositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a526e3e5f3195b3c6372506a22c6b4e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>UniqueConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a107dce219a6fb867cc66636fa85ba248</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QueuedTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d7/d37/QueuedTrajectoryExecutor_8hpp</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <class kind="class">aikido::control::QueuedTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>Conversions.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>df/d54/Conversions_8hpp</filename>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="no" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="no" imported="no">aikido/trajectory/Spline.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a9c51274415d446d79fa29f9c2586a808</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a582c2ddfe540b4fafe70fe4567f3b51e</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory, const Eigen::VectorXd &amp;startPositions)</arglist>
    </member>
    <member kind="function">
      <type>trajectory_msgs::JointTrajectory</type>
      <name>toRosJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a395afeed1ec9b219e39d5f11ca215c68</anchor>
      <arglist>(const aikido::trajectory::TrajectoryPtr &amp;trajectory, double timestep)</arglist>
    </member>
    <member kind="function">
      <type>sensor_msgs::JointState</type>
      <name>positionsToJointState</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>adafd2730688b1c49c8f2adc9ddd0b098</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions, const std::vector&lt; std::string &gt; &amp;jointNames)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>util-impl.hpp</name>
    <path>/include/aikido/control/ros/detail/</path>
    <filename>dc/d76/util-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
    <member kind="function">
      <type>bool</type>
      <name>waitForActionServer</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>aad8d611d70283c9a870f99e14e0dde45</anchor>
      <arglist>(actionlib::ActionClient&lt; ActionSpec &gt; &amp;actionClient,::ros::CallbackQueue &amp;callbackQueue, TimeoutDuration timeoutDuration, PeriodDuration periodDuration)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RosJointStateClient.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>d3/d43/RosJointStateClient_8hpp</filename>
    <class kind="class">aikido::control::ros::RosJointStateClient</class>
    <class kind="struct">aikido::control::ros::RosJointStateClient::JointStateRecord</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>RosPositionCommandExecutor.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>da/daa/RosPositionCommandExecutor_8hpp</filename>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <class kind="class">aikido::control::ros::RosPositionCommandExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>RosTrajectoryExecutionException.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>df/da4/RosTrajectoryExecutionException_8hpp</filename>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutionException</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>RosTrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>d0/df8/RosTrajectoryExecutor_8hpp</filename>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>util.hpp</name>
    <path>/include/aikido/control/ros/</path>
    <filename>d8/ddd/control_2ros_2util_8hpp</filename>
    <includes id="dc/d76/util-impl_8hpp" name="util-impl.hpp" local="yes" imported="no">detail/util-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::control::ros</namespace>
  </compound>
  <compound kind="file">
    <name>util.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d4/dad/robot_2util_8hpp</filename>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="yes" imported="no">aikido/common/ExecutorThread.hpp</includes>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFree.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="struct">aikido::robot::util::VectorFieldPlannerParameters</class>
    <class kind="struct">aikido::robot::util::CRRTPlannerParameters</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <namespace>aikido::robot::util</namespace>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>ae38f68cade137cbb57486d63a9a24348</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const statespace::StateSpace::State *goalState, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a099ddc4703caa41318f1313e3e355923</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; statespace::StateSpace::State * &gt; &amp;goalStates, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToTSR</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>ab640d43658f7bfe0185795c3bfd24e33</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;tsr, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit, std::size_t maxNumTrials)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToTSRwithTrajectoryConstraint</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a7748aabfa71d6f1ec11da53acb5bfde2</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;goalTsr, const constraint::dart::TSRPtr &amp;constraintTsr, const constraint::TestablePtr &amp;collisionTestable, double timelimit, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a58ca33cdc0383f6062887d79d796c267</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const Eigen::Vector3d &amp;direction, const constraint::TestablePtr &amp;collisionTestable, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const VectorFieldPlannerParameters &amp;vfParameters=VectorFieldPlannerParameters(), const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToEndEffectorOffsetByCRRT</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a78b24f5bd36e678d1c22942dae4b9cc7</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::TestablePtr &amp;collisionTestable, const Eigen::Vector3d &amp;direction, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, const Eigen::VectorXd &gt;</type>
      <name>parseYAMLToNamedConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aa2e3f025f76403db20b6c29b3078340e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGoalAndConstraintTSRForEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a1e095c9730f6bda4109732401ce57674</anchor>
      <arglist>(const dart::dynamics::BodyNodePtr &amp;bodyNode, const Eigen::Vector3d &amp;direction, double distance, const constraint::dart::TSRPtr &amp;goal, const constraint::dart::TSRPtr &amp;constraint, double positionTolerance=1e-3, double angularTolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>getLookAtIsometry</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aaa61f9f714f3bc0ad001568ca7e41f9e</anchor>
      <arglist>(const Eigen::Vector3d &amp;positionFrom, const Eigen::Vector3d &amp;positionTo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryExecutor.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d6/d6e/TrajectoryExecutor_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::control::TrajectoryExecutor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>TrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6cd6ce65058e69bbb77911fdbb13bca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>ConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a60109b41f290e36c59d8d609bb384ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>WeakTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af37f4572e010e770b185b52b2bdbbc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>WeakConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>aff1a075c0818cd34033494dd05c08583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>UniqueTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8982dfe576a145810192301598dc9319</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>UniqueConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af44c2673d069625938196c5d1efdb2f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryResult.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>de/def/TrajectoryResult_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::control::TrajectoryResult</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryResult &gt;</type>
      <name>TrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1908080933ac626b49500769167b431e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryResult &gt;</type>
      <name>ConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ad76541d345e94209212a677ae58e73aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryResult &gt;</type>
      <name>WeakTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a9910229097d6c47680558ac665ac778a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryResult &gt;</type>
      <name>WeakConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8a7c3f720d4bd9fe680338bff028f967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryResult &gt;</type>
      <name>UniqueTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a54b618752dd91f3077a442e6b3aa897f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryResult &gt;</type>
      <name>UniqueConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1eecbc5b44e957430f5bfb212c723618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryRunningException.hpp</name>
    <path>/include/aikido/control/</path>
    <filename>d3/ddf/TrajectoryRunningException_8hpp</filename>
    <class kind="class">aikido::control::TrajectoryRunningException</class>
    <namespace>aikido</namespace>
    <namespace>aikido::control</namespace>
  </compound>
  <compound kind="file">
    <name>distance.hpp</name>
    <path>/include/aikido/</path>
    <filename>d0/d30/distance_8hpp</filename>
    <includes id="de/d4f/CartesianProductWeighted_8hpp" name="CartesianProductWeighted.hpp" local="yes" imported="no">distance/CartesianProductWeighted.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">distance/DistanceMetric.hpp</includes>
    <includes id="df/ddc/RnEuclidean_8hpp" name="RnEuclidean.hpp" local="yes" imported="no">distance/RnEuclidean.hpp</includes>
    <includes id="df/da8/distance_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">distance/SE2.hpp</includes>
    <includes id="d0/df7/SE2Weighted_8hpp" name="SE2Weighted.hpp" local="yes" imported="no">distance/SE2Weighted.hpp</includes>
    <includes id="df/d04/SO2Angular_8hpp" name="SO2Angular.hpp" local="yes" imported="no">distance/SO2Angular.hpp</includes>
    <includes id="d8/dfb/SO3Angular_8hpp" name="SO3Angular.hpp" local="yes" imported="no">distance/SO3Angular.hpp</includes>
    <includes id="df/dd3/Weighted_8hpp" name="Weighted.hpp" local="yes" imported="no">distance/Weighted.hpp</includes>
    <includes id="d4/d2d/defaults_8hpp" name="defaults.hpp" local="yes" imported="no">distance/defaults.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CartesianProductWeighted.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>de/d4f/CartesianProductWeighted_8hpp</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">../statespace/CartesianProduct.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">DistanceMetric.hpp</includes>
    <class kind="class">aikido::distance::CartesianProductWeighted</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>defaults.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>d4/d2d/defaults_8hpp</filename>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">DistanceMetric.hpp</includes>
    <includes id="de/d6e/defaults-impl_8hpp" name="defaults-impl.hpp" local="yes" imported="no">detail/defaults-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetricFor</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae3bec5c04d96f08fd3f054d861d55a58</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _sspace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetric</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ad738effdbea68c7731993a3cd90fa485</anchor>
      <arglist>(statespace::StateSpacePtr _sspace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defaults-impl.hpp</name>
    <path>/include/aikido/distance/detail/</path>
    <filename>de/d6e/defaults-impl_8hpp</filename>
    <includes id="d1/d66/metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" imported="no">../../common/metaprogramming.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">../../statespace/CartesianProduct.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">../../statespace/Rn.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">../../statespace/SE2.hpp</includes>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">../../statespace/SO2.hpp</includes>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">../../statespace/SO3.hpp</includes>
    <includes id="de/d4f/CartesianProductWeighted_8hpp" name="CartesianProductWeighted.hpp" local="yes" imported="no">../CartesianProductWeighted.hpp</includes>
    <includes id="df/ddc/RnEuclidean_8hpp" name="RnEuclidean.hpp" local="yes" imported="no">../RnEuclidean.hpp</includes>
    <includes id="d0/df7/SE2Weighted_8hpp" name="SE2Weighted.hpp" local="yes" imported="no">../SE2Weighted.hpp</includes>
    <includes id="df/d04/SO2Angular_8hpp" name="SO2Angular.hpp" local="yes" imported="no">../SO2Angular.hpp</includes>
    <includes id="d8/dfb/SO3Angular_8hpp" name="SO3Angular.hpp" local="yes" imported="no">../SO3Angular.hpp</includes>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R0 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R1 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R3 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R6 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SO2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SO3 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::CartesianProduct &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SE2 &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <namespace>aikido::distance::detail</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>Ptr</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a3b8952d56389bb3863b188867e162583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; statespace::CartesianProduct, statespace::R0, statespace::R1, statespace::R2, statespace::R3, statespace::R6, statespace::SO2, statespace::SO3, statespace::SE2 &gt;</type>
      <name>SupportedStateSpaces</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a2bf865b647746954ff17905f5c6d0963</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnEuclidean-impl.hpp</name>
    <path>/include/aikido/distance/detail/</path>
    <filename>dd/d46/RnEuclidean-impl_8hpp</filename>
    <includes id="df/ddc/RnEuclidean_8hpp" name="RnEuclidean.hpp" local="no" imported="no">aikido/distance/RnEuclidean.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceMetric.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>dc/d81/DistanceMetric_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::distance::DistanceMetric</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DistanceMetric &gt;</type>
      <name>DistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aaf63ec63b18e6e5e472c50bfd9531c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const DistanceMetric &gt;</type>
      <name>ConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a641469ad5d19138970617763e196c3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; DistanceMetric &gt;</type>
      <name>WeakDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a68af1916eae84a82cf5222dc04c3b46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const DistanceMetric &gt;</type>
      <name>WeakConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a2cee8bcb64505e74a51cbe850bd81336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>UniqueDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ad45bd005a5a117fc225afc0ae480450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const DistanceMetric &gt;</type>
      <name>UniqueConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a7a03ac8528cfc5c774c6ccb1b28eb6ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnEuclidean.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/ddc/RnEuclidean_8hpp</filename>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">../statespace/Rn.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">DistanceMetric.hpp</includes>
    <includes id="dd/d46/RnEuclidean-impl_8hpp" name="RnEuclidean-impl.hpp" local="yes" imported="no">aikido/distance/detail/RnEuclidean-impl.hpp</includes>
    <class kind="class">aikido::distance::REuclidean</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>REuclidean&lt; 0 &gt;</type>
      <name>R0Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a50543f9d5f6a65d32a0b9d493a460acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 1 &gt;</type>
      <name>R1Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a667d3fadad12dfacbee30d36a3a88721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 2 &gt;</type>
      <name>R2Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a6903891de6aaaac9b338421b21589f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 3 &gt;</type>
      <name>R3Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a0854bb5f71af46c24b5e5e7301cfc359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 6 &gt;</type>
      <name>R6Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae57f5e9a8e4a7abc73ca19821a51c630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; Eigen::Dynamic &gt;</type>
      <name>RnEuclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a1fdca133d62fc1fd8e40918a96c52162</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SE2.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/da8/distance_2SE2_8hpp</filename>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">../statespace/SE2.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">DistanceMetric.hpp</includes>
    <class kind="class">aikido::distance::SE2</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>SE2.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d4/d96/statespace_2SE2_8hpp</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">StateSpace.hpp</includes>
    <includes id="dd/da5/SE2-impl_8hpp" name="SE2-impl.hpp" local="yes" imported="no">detail/SE2-impl.hpp</includes>
    <class kind="class">aikido::statespace::SE2StateHandle</class>
    <class kind="class">aikido::statespace::SE2</class>
    <class kind="class">aikido::statespace::SE2::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE2Weighted.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>d0/df7/SE2Weighted_8hpp</filename>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">../statespace/SE2.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">DistanceMetric.hpp</includes>
    <class kind="class">aikido::distance::SE2Weighted</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>SO2Angular.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/d04/SO2Angular_8hpp</filename>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">../statespace/SO2.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">DistanceMetric.hpp</includes>
    <class kind="class">aikido::distance::SO2Angular</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>SO3Angular.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>d8/dfb/SO3Angular_8hpp</filename>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">../statespace/SO3.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">DistanceMetric.hpp</includes>
    <class kind="class">aikido::distance::SO3Angular</class>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
  </compound>
  <compound kind="file">
    <name>Weighted.hpp</name>
    <path>/include/aikido/distance/</path>
    <filename>df/dd3/Weighted_8hpp</filename>
    <includes id="de/d4f/CartesianProductWeighted_8hpp" name="CartesianProductWeighted.hpp" local="yes" imported="no">CartesianProductWeighted.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::distance</namespace>
    <member kind="typedef">
      <type>CartesianProductWeighted</type>
      <name>Weighted</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a4fda8871126805b629f5427794860cb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io.hpp</name>
    <path>/include/aikido/</path>
    <filename>d2/dc6/io_8hpp</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="yes" imported="no">io/CatkinResourceRetriever.hpp</includes>
    <includes id="d6/d70/KinBodyParser_8hpp" name="KinBodyParser.hpp" local="yes" imported="no">io/KinBodyParser.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">io/yaml.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CatkinResourceRetriever.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>d8/d57/CatkinResourceRetriever_8hpp</filename>
    <class kind="class">aikido::io::CatkinResourceRetriever</class>
    <class kind="struct">aikido::io::CatkinResourceRetriever::Workspace</class>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
  </compound>
  <compound kind="file">
    <name>yaml_extension.hpp</name>
    <path>/include/aikido/io/detail/</path>
    <filename>d6/d38/yaml__extension_8hpp</filename>
    <class kind="struct">aikido::io::detail::encode_impl</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, true &gt;</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, false &gt;</class>
    <class kind="struct">YAML::convert&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt; &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <namespace>aikido::io::detail</namespace>
    <namespace>YAML</namespace>
    <member kind="function">
      <type>YAML::Mark</type>
      <name>getMark</name>
      <anchorfile>da/d43/namespaceaikido_1_1io_1_1detail.html</anchorfile>
      <anchor>a01bc4ac464aec57ed9b598c6befcabae</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KinBodyParser.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>d6/d70/KinBodyParser_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbodyString</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a0ab91fa623ddbba8b9bb4a2150380395</anchor>
      <arglist>(const std::string &amp;kinBodyString, const dart::common::Uri &amp;baseUri=&quot;&quot;, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbody</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a9c32779712b779d369942ebdee37cfc6</anchor>
      <arglist>(const dart::common::Uri &amp;kinBodyUri, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yaml.hpp</name>
    <path>/include/aikido/io/</path>
    <filename>d5/d95/yaml_8hpp</filename>
    <includes id="d6/d38/yaml__extension_8hpp" name="yaml_extension.hpp" local="yes" imported="no">aikido/io/detail/yaml_extension.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::io</namespace>
    <member kind="function">
      <type>YAML::Node</type>
      <name>loadYAML</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a4da7c052f494bd2dfe1f903d87ca3ce5</anchor>
      <arglist>(const dart::common::Uri &amp;yamlUri, const dart::common::ResourceRetrieverPtr &amp;retriever)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>perception.hpp</name>
    <path>/include/aikido/</path>
    <filename>d1/dd9/perception_8hpp</filename>
    <includes id="d4/d38/AprilTagsDatabase_8hpp" name="AprilTagsDatabase.hpp" local="yes" imported="no">perception/AprilTagsDatabase.hpp</includes>
    <includes id="db/d1a/AprilTagsModule_8hpp" name="AprilTagsModule.hpp" local="yes" imported="no">perception/AprilTagsModule.hpp</includes>
    <includes id="de/da8/PerceptionModule_8hpp" name="PerceptionModule.hpp" local="yes" imported="no">perception/PerceptionModule.hpp</includes>
    <includes id="d4/d4d/YamlAprilTagsDatabase_8hpp" name="YamlAprilTagsDatabase.hpp" local="yes" imported="no">perception/YamlAprilTagsDatabase.hpp</includes>
    <includes id="d7/d84/perception_2shape__conversions_8hpp" name="shape_conversions.hpp" local="yes" imported="no">perception/shape_conversions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AprilTagsDatabase.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>d4/d38/AprilTagsDatabase_8hpp</filename>
    <class kind="class">aikido::perception::AprilTagsDatabase</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>AprilTagsModule.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>db/d1a/AprilTagsModule_8hpp</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="no" imported="no">aikido/io/CatkinResourceRetriever.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="no" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="d4/d38/AprilTagsDatabase_8hpp" name="AprilTagsDatabase.hpp" local="no" imported="no">aikido/perception/AprilTagsDatabase.hpp</includes>
    <includes id="de/da8/PerceptionModule_8hpp" name="PerceptionModule.hpp" local="no" imported="no">aikido/perception/PerceptionModule.hpp</includes>
    <class kind="class">aikido::perception::AprilTagsModule</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>ObjectDatabase.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>d7/d91/ObjectDatabase_8hpp</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="no" imported="no">aikido/io/CatkinResourceRetriever.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="no" imported="no">aikido/io/yaml.hpp</includes>
    <class kind="class">aikido::perception::ObjectDatabase</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>PerceptionModule.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>de/da8/PerceptionModule_8hpp</filename>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="no" imported="no">aikido/planner/World.hpp</includes>
    <class kind="class">aikido::perception::PerceptionModule</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>RcnnPoseModule.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>dd/d63/RcnnPoseModule_8hpp</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="no" imported="no">aikido/io/CatkinResourceRetriever.hpp</includes>
    <includes id="d7/d91/ObjectDatabase_8hpp" name="ObjectDatabase.hpp" local="no" imported="no">aikido/perception/ObjectDatabase.hpp</includes>
    <includes id="de/da8/PerceptionModule_8hpp" name="PerceptionModule.hpp" local="no" imported="no">aikido/perception/PerceptionModule.hpp</includes>
    <class kind="class">aikido::perception::RcnnPoseModule</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>shape_conversions.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>d7/d84/perception_2shape__conversions_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertROSPoseToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>ac399bb547ad0a0b3ac8a6b866c05a680</anchor>
      <arglist>(geometry_msgs::Pose const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertStampedTransformToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>ac75da57d56398b8c4b3856197fbf7168</anchor>
      <arglist>(tf::StampedTransform const &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shape_conversions.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/db0/rviz_2shape__conversions_8hpp</filename>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">ResourceServer.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="function">
      <type>geometry_msgs::Point</type>
      <name>convertEigenToROSPoint</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a68d60ee0ed5b2ff23a267682703a22bf</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Vector3</type>
      <name>convertEigenToROSVector3</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a8a0437e24546ebf8dce5a6fb7ff5551a</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Quaternion</type>
      <name>convertEigenToROSQuaternion</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a804574a4b82443989184e879d563d48c</anchor>
      <arglist>(const Eigen::Quaterniond &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>convertEigenToROSPose</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afa63ee8d6fb65d4fea1c4f667e8de533</anchor>
      <arglist>(const Eigen::Isometry3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std_msgs::ColorRGBA</type>
      <name>convertEigenToROSColorRGBA</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6108bf053834b682698956b03d98943b</anchor>
      <arglist>(const Eigen::Vector4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>convertROSColorRGBAToEigen</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a974f133392c086992f9cc90bde90d273</anchor>
      <arglist>(const std_msgs::ColorRGBA &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertAssimpMeshToROSTriangleList</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>acaca6e3485a0418b4a18001c5197ae30</anchor>
      <arglist>(const aiMesh &amp;mesh, std::vector&lt; geometry_msgs::Point &gt; *triangle_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3d9fc2131aba5a272fd7846802906695</anchor>
      <arglist>(const dart::dynamics::Shape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3270c5fb93d7d80d2ac4d67e010f1baa</anchor>
      <arglist>(const dart::dynamics::BoxShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a84ab12d490fdb1bd1780569f71ac6eb9</anchor>
      <arglist>(const dart::dynamics::CylinderShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae2f3076e02e73fc14fa795f072c79da1</anchor>
      <arglist>(const dart::dynamics::EllipsoidShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a03f4480210c9fad6a22086df6f0fe8ba</anchor>
      <arglist>(const dart::dynamics::LineSegmentShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aad67b7fedb6ac6987931138c0457e7b1</anchor>
      <arglist>(const dart::dynamics::MeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a9678121bbcd9c4211ac3bd3717479cce</anchor>
      <arglist>(const dart::dynamics::PlaneShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager, double width=100.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1b99f62c6870b0b7a2f3f70bc133c18f</anchor>
      <arglist>(const dart::dynamics::SoftMeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>YamlAprilTagsDatabase.hpp</name>
    <path>/include/aikido/perception/</path>
    <filename>d4/d4d/YamlAprilTagsDatabase_8hpp</filename>
    <includes id="d8/d57/CatkinResourceRetriever_8hpp" name="CatkinResourceRetriever.hpp" local="no" imported="no">aikido/io/CatkinResourceRetriever.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="no" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="d4/d38/AprilTagsDatabase_8hpp" name="AprilTagsDatabase.hpp" local="yes" imported="no">AprilTagsDatabase.hpp</includes>
    <class kind="class">aikido::perception::YamlAprilTagsDatabase</class>
    <namespace>aikido</namespace>
    <namespace>aikido::perception</namespace>
  </compound>
  <compound kind="file">
    <name>planner.hpp</name>
    <path>/include/aikido/</path>
    <filename>d1/d1f/planner_8hpp</filename>
    <includes id="d4/da7/PlanningResult_8hpp" name="PlanningResult.hpp" local="yes" imported="no">planner/PlanningResult.hpp</includes>
    <includes id="df/d36/SnapPlanner_8hpp" name="SnapPlanner.hpp" local="yes" imported="no">planner/SnapPlanner.hpp</includes>
    <includes id="de/db5/TrajectoryPostProcessor_8hpp" name="TrajectoryPostProcessor.hpp" local="yes" imported="no">planner/TrajectoryPostProcessor.hpp</includes>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="yes" imported="no">planner/World.hpp</includes>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="d0/d94/CRRT_8hpp" name="CRRT.hpp" local="yes" imported="no">planner/ompl/CRRT.hpp</includes>
    <includes id="d6/db7/CRRTConnect_8hpp" name="CRRTConnect.hpp" local="yes" imported="no">planner/ompl/CRRTConnect.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">planner/ompl/GeometricStateSpace.hpp</includes>
    <includes id="dd/d13/GoalRegion_8hpp" name="GoalRegion.hpp" local="yes" imported="no">planner/ompl/GoalRegion.hpp</includes>
    <includes id="dc/da4/MotionValidator_8hpp" name="MotionValidator.hpp" local="yes" imported="no">planner/ompl/MotionValidator.hpp</includes>
    <includes id="d4/d09/Planner_8hpp" name="Planner.hpp" local="yes" imported="no">planner/ompl/Planner.hpp</includes>
    <includes id="d5/d58/StateSampler_8hpp" name="StateSampler.hpp" local="yes" imported="no">planner/ompl/StateSampler.hpp</includes>
    <includes id="d2/d67/StateValidityChecker_8hpp" name="StateValidityChecker.hpp" local="yes" imported="no">planner/ompl/StateValidityChecker.hpp</includes>
    <includes id="db/d58/dart_8hpp" name="dart.hpp" local="yes" imported="no">planner/ompl/dart.hpp</includes>
    <includes id="db/d4c/ParabolicSmoother_8hpp" name="ParabolicSmoother.hpp" local="yes" imported="no">planner/parabolic/ParabolicSmoother.hpp</includes>
    <includes id="df/dce/ParabolicTimer_8hpp" name="ParabolicTimer.hpp" local="yes" imported="no">planner/parabolic/ParabolicTimer.hpp</includes>
  </compound>
  <compound kind="file">
    <name>BackwardCompatibility.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>de/dfe/BackwardCompatibility_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_VERSION_AT_LEAST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>a29039a7d42abd5dc9a014c0f0a684b25</anchor>
      <arglist>(x, y, z)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_MAJOR_MINOR_VERSION_AT_LEAST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>ad9e8b3d74f759cb019869e1f3ae4b520</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_VERSION_AT_MOST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>a325842ad0a190f28d81d271d661a36b9</anchor>
      <arglist>(x, y, z)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_MAJOR_MINOR_VERSION_AT_MOST</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>a2a569c0dd79584ece4fceb64273f27d3</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_PLACEHOLDER</name>
      <anchorfile>de/dfe/BackwardCompatibility_8hpp.html</anchorfile>
      <anchor>ac8ec5d09c6e358623783fb7eda0d1816</anchor>
      <arglist>(ph)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>ompl_shared_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a80d7422befdffd8a46238dbe81effa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; T &gt;</type>
      <name>ompl_weak_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ace5edcfd0ba1691a4c0eb33bef99c512</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_make_shared</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>adee178d5dc8755a37c11d6d835a70481</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_dynamic_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a9f9741a3ded8d2b646a5fb855f4aa67e</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_static_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a26c7df73b3c990fad15d1083af920609</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ompl_bind</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a23c5c15b6e0b38a4fb7fb7727197f540</anchor>
      <arglist>(F &amp;&amp;f, Args &amp;&amp;...args) -&gt; decltype(boost::bind(std::forward&lt; F &gt;(f), std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CRRT.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d0/d94/CRRT_8hpp</filename>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">../../constraint/Projectable.hpp</includes>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">../../planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="d3/d8c/CRRT-impl_8hpp" name="CRRT-impl.hpp" local="yes" imported="no">detail/CRRT-impl.hpp</includes>
    <class kind="class">aikido::planner::ompl::CRRT</class>
    <class kind="class">aikido::planner::ompl::CRRT::Motion</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>CRRTConnect.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d6/db7/CRRTConnect_8hpp</filename>
    <includes id="d0/d94/CRRT_8hpp" name="CRRT.hpp" local="no" imported="no">aikido/planner/ompl/CRRT.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">../../constraint/Projectable.hpp</includes>
    <includes id="d4/d23/CRRTConnect-impl_8hpp" name="CRRTConnect-impl.hpp" local="yes" imported="no">detail/CRRTConnect-impl.hpp</includes>
    <class kind="class">aikido::planner::ompl::CRRTConnect</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>dart.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>db/d58/dart_8hpp</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="no" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="no" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>createSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ad7b398d71985813c60cc5744fde1fe54</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _stateSpace, constraint::TestablePtr _validityConstraint, double _maxDistanceBtwValidityChecks, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CRRT-impl.hpp</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>d3/d8c/CRRT-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>CRRTConnect-impl.hpp</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>d4/d23/CRRTConnect-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>Planner-impl.hpp</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>dc/df4/Planner-impl_8hpp</filename>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">../../../planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">../../../trajectory/Interpolated.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">../GeometricStateSpace.hpp</includes>
    <includes id="dd/d13/GoalRegion_8hpp" name="GoalRegion.hpp" local="yes" imported="no">../GoalRegion.hpp</includes>
    <includes id="d2/d67/StateValidityChecker_8hpp" name="StateValidityChecker.hpp" local="yes" imported="no">../StateValidityChecker.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>acec107715e7b654196f7fb1726c23411</anchor>
      <arglist>(const statespace::StateSpace::State *_start, const statespace::StateSpace::State *_goal, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>aba719859bd15eb19de58b1242ea6c608</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GeometricStateSpace.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dc/db1/GeometricStateSpace_8hpp</filename>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">aikido/planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">../../constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">../../constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">../../constraint/Testable.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">../../distance/DistanceMetric.hpp</includes>
    <includes id="d3/db8/GeodesicInterpolator_8hpp" name="GeodesicInterpolator.hpp" local="yes" imported="no">../../statespace/GeodesicInterpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace</class>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace::StateType</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; GeometricStateSpace &gt;</type>
      <name>GeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>acd9aadee862348e8ebf557ef099b1082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>ConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a381d6b417e3b485ca76ad56ef336c33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; GeometricStateSpace &gt;</type>
      <name>WeakGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae7dc686694607cc236a76df966d0ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>WeakConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a68d84a38da90cd4ff11a8b52bedd589a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GeometricStateSpace &gt;</type>
      <name>UniqueGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a6ba25ac2323cbee6c6b00cda950721de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>UniqueConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>aba907832f0c1a8192ca7d32192e0ffa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>EQUALITY_EPSILON</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a202c6dab902b5ffd042c953463b27b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GoalRegion.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dd/d13/GoalRegion_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">../../constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">../../constraint/Testable.hpp</includes>
    <class kind="class">aikido::planner::ompl::GoalRegion</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>MotionValidator.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dc/da4/MotionValidator_8hpp</filename>
    <class kind="class">aikido::planner::ompl::MotionValidator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>Planner.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d4/d09/Planner_8hpp</filename>
    <includes id="d4/d3d/Projectable_8hpp" name="Projectable.hpp" local="yes" imported="no">../../constraint/Projectable.hpp</includes>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">../../constraint/Sampleable.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">../../constraint/Testable.hpp</includes>
    <includes id="dc/d81/DistanceMetric_8hpp" name="DistanceMetric.hpp" local="yes" imported="no">../../distance/DistanceMetric.hpp</includes>
    <includes id="de/dfe/BackwardCompatibility_8hpp" name="BackwardCompatibility.hpp" local="yes" imported="no">../../planner/ompl/BackwardCompatibility.hpp</includes>
    <includes id="dc/db1/GeometricStateSpace_8hpp" name="GeometricStateSpace.hpp" local="yes" imported="no">../../planner/ompl/GeometricStateSpace.hpp</includes>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">../../statespace/Interpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../../statespace/StateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">../../trajectory/Interpolated.hpp</includes>
    <includes id="dc/df4/Planner-impl_8hpp" name="Planner-impl.hpp" local="yes" imported="no">detail/Planner-impl.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRT</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a2a0a0f3ba0eddd4863e52cd5340cce1d</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRTConnect</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a8eb47f3098cae26a285a8e6b0bd471e7</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize, double _minTreeConnectionDistance)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>getSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>af7d1aab861b12ef19fe77d5300a6a4a0</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt;::ompl::base::GoalRegion &gt;</type>
      <name>getGoalRegion</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae450c07e0526ea3ae5dc17d877187adc</anchor>
      <arglist>(::ompl::base::SpaceInformationPtr _si, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a346d2e10c86942ad264ecdf393eafdaf</anchor>
      <arglist>(const ::ompl::base::PlannerPtr &amp;_planner, const ::ompl::base::ProblemDefinitionPtr &amp;_pdef, statespace::StateSpacePtr _sspace, statespace::InterpolatorPtr _interpolator, double _maxPlanTime)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; trajectory::Interpolated &gt;, bool &gt;</type>
      <name>simplifyOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a60acd428122fb8cc67a569b41e2c49eb</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks, double _timeout, std::size_t _maxEmptySteps, trajectory::InterpolatedPtr _originalTraj)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::geometric::PathGeometric</type>
      <name>toOMPLTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a4f5c0d8e61722cb13058bc68ed2905fa</anchor>
      <arglist>(const trajectory::InterpolatedPtr &amp;_interpolatedTraj,::ompl::base::SpaceInformationPtr _si)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Interpolated &gt;</type>
      <name>toInterpolatedTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a5e574bca79caca6fcfee48b968fe1477</anchor>
      <arglist>(const ::ompl::geometric::PathGeometric &amp;_path, statespace::InterpolatorPtr _interpolator)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StateSampler.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d5/d58/StateSampler_8hpp</filename>
    <includes id="d6/dcb/Sampleable_8hpp" name="Sampleable.hpp" local="yes" imported="no">../../constraint/Sampleable.hpp</includes>
    <class kind="class">aikido::planner::ompl::StateSampler</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>StateValidityChecker.hpp</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>d2/d67/StateValidityChecker_8hpp</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">../../constraint/Testable.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::planner::ompl::StateValidityChecker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::ompl</namespace>
  </compound>
  <compound kind="file">
    <name>ParabolicSmoother.hpp</name>
    <path>/include/aikido/planner/parabolic/</path>
    <filename>db/d4c/ParabolicSmoother_8hpp</filename>
    <includes id="de/db5/TrajectoryPostProcessor_8hpp" name="TrajectoryPostProcessor.hpp" local="yes" imported="no">aikido/planner/TrajectoryPostProcessor.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <class kind="class">aikido::planner::parabolic::ParabolicSmoother</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::parabolic</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcut</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a3b953539c07d33f11b8c2a254f4d2434</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMT, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a49dbe6e5f9ae926ed0e9f6a878f93037</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcutAndBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a4a864a9d7c4cc941f41eb8217ef844ba</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMT, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TIMELIMT</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a57f51689584df953bfbcce3285d83647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_BLEND_RADIUS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a5a6c51f8f280cc25caa4af68209d7090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>DEFAULT_BLEND_ITERATIONS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a91556625d7b966f32ebe6e9a513dd1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_CHECK_RESOLUTION</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a1846c0848aa85c637f2430cae9839d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TOLERANCE</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>acdc54d491b1fa68fb9f596449d7997af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParabolicTimer.hpp</name>
    <path>/include/aikido/planner/parabolic/</path>
    <filename>df/dce/ParabolicTimer_8hpp</filename>
    <includes id="de/db5/TrajectoryPostProcessor_8hpp" name="TrajectoryPostProcessor.hpp" local="yes" imported="no">aikido/planner/TrajectoryPostProcessor.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <class kind="class">aikido::planner::parabolic::ParabolicTimer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::parabolic</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>abc87fc6c95d7d6a65c35a187af4971bd</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a71d41926976e9bc3b95199e7077ab345</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>convertToSpline</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>abb2d3f31cde10092fb0f686b34d27a80</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTrajectory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PlanningResult.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d4/da7/PlanningResult_8hpp</filename>
    <class kind="struct">aikido::planner::PlanningResult</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>SnapPlanner.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>df/d36/SnapPlanner_8hpp</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">../constraint/Testable.hpp</includes>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">../statespace/Interpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">../trajectory/Interpolated.hpp</includes>
    <includes id="d4/da7/PlanningResult_8hpp" name="PlanningResult.hpp" local="yes" imported="no">PlanningResult.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planSnap</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a16a8ae2f9bee860b7905912d480421a8</anchor>
      <arglist>(const statespace::ConstStateSpacePtr &amp;stateSpace, const statespace::StateSpace::State *startState, const statespace::StateSpace::State *goalState, const std::shared_ptr&lt; statespace::Interpolator &gt; &amp;interpolator, const std::shared_ptr&lt; constraint::Testable &gt; &amp;constraint, planner::PlanningResult &amp;planningResult)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryPostProcessor.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>de/db5/TrajectoryPostProcessor_8hpp</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="yes" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <class kind="class">aikido::planner::TrajectoryPostProcessor</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>BodyNodePoseVectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>d0/d13/BodyNodePoseVectorField_8hpp</filename>
    <includes id="dc/dc6/VectorField_8hpp" name="VectorField.hpp" local="no" imported="no">aikido/planner/vectorfield/VectorField.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="no" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::BodyNodePoseVectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>BodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a47ef9cf807108a60a46703a964ee7f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>ConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aa8fc53075a519c4368d7f6b42593768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>WeakBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aeca425dda1cee907f7134df654097c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>WeakConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a6c63b8b5fc083805cd8a2fc21ad0b5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>UniqueBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a1c5fe0dafc119636c4ee7e91364922f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>UniqueConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a097ddd184607ff861057aaa5a3ade77c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MoveEndEffectorOffsetVectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>d0/dbb/MoveEndEffectorOffsetVectorField_8hpp</filename>
    <includes id="d0/d13/BodyNodePoseVectorField_8hpp" name="BodyNodePoseVectorField.hpp" local="no" imported="no">aikido/planner/vectorfield/BodyNodePoseVectorField.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorOffsetVectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
  </compound>
  <compound kind="file">
    <name>MoveEndEffectorPoseVectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>d6/d5e/MoveEndEffectorPoseVectorField_8hpp</filename>
    <includes id="d0/d13/BodyNodePoseVectorField_8hpp" name="BodyNodePoseVectorField.hpp" local="no" imported="no">aikido/planner/vectorfield/BodyNodePoseVectorField.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorPoseVectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
  </compound>
  <compound kind="file">
    <name>VectorField.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>dc/dc6/VectorField_8hpp</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="no" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="da/dd8/VectorFieldPlannerStatus_8hpp" name="VectorFieldPlannerStatus.hpp" local="no" imported="no">aikido/planner/vectorfield/VectorFieldPlannerStatus.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="no" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="no" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::planner::vectorfield::VectorField</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; VectorField &gt;</type>
      <name>VectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a87ab043e8d644d8704b9e09d05a36510</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorFieldPlanner.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>da/de4/VectorFieldPlanner_8hpp</filename>
    <includes id="d7/def/Testable_8hpp" name="Testable.hpp" local="no" imported="no">aikido/constraint/Testable.hpp</includes>
    <includes id="d4/da7/PlanningResult_8hpp" name="PlanningResult.hpp" local="no" imported="no">aikido/planner/PlanningResult.hpp</includes>
    <includes id="dc/dc6/VectorField_8hpp" name="VectorField.hpp" local="no" imported="no">aikido/planner/vectorfield/VectorField.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="no" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="no" imported="no">aikido/trajectory/Spline.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>followVectorField</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a81f8bbaf6e7a9fac50ee3ff2ce1dcf25</anchor>
      <arglist>(const aikido::planner::vectorfield::VectorField &amp;vectorField, const aikido::statespace::StateSpace::State &amp;startState, const aikido::constraint::Testable &amp;constraint, std::chrono::duration&lt; double &gt; timelimit, double initialStepSize, double checkConstraintResolution, planner::PlanningResult *planningResult)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a560dc4a8d493a9767775901857e4217f</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, dart::dynamics::MetaSkeletonPtr metaskeleton, const dart::dynamics::BodyNodePtr &amp;bn, const aikido::constraint::TestablePtr &amp;constraint, const Eigen::Vector3d &amp;direction, double minDistance, double maxDistance, double positionTolerance, double angularTolerance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::PlanningResult *planningResult=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>planToEndEffectorPose</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a465d12cf58041222f6b4002d5c12076b</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, dart::dynamics::MetaSkeletonPtr metaskeleton, const dart::dynamics::BodyNodePtr &amp;bn, const aikido::constraint::TestablePtr &amp;constraint, const Eigen::Isometry3d &amp;goalPose, double poseErrorTolerance, double conversionRatioInGeodesicDistance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::PlanningResult *planningResult=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorFieldPlannerStatus.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>da/dd8/VectorFieldPlannerStatus_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="enumeration">
      <type></type>
      <name>VectorFieldPlannerStatus</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a653bc87652ff77db6a831fa43cd74431</anchor>
      <arglist></arglist>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a1b52d4a7cbbcb87a81515c443453a2d5">TERMINATE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a92d766ccba721ca972a5627082925242">CACHE_AND_CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a2f453cfe638e57e27bb0c9512436111e">CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431adfffe9658cd2a5ecefa682370bf06d5a">CACHE_AND_TERMINATE</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorFieldUtil.hpp</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>dc/dfc/VectorFieldUtil_8hpp</filename>
    <includes id="d8/d2a/common_2Spline_8hpp" name="Spline.hpp" local="no" imported="no">aikido/common/Spline.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="no" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="no" imported="no">aikido/trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="no" imported="no">aikido/trajectory/Spline.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <member kind="function">
      <type>bool</type>
      <name>computeJointVelocityFromTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a8a266781e05a5e4e5ddf6f22472583ba</anchor>
      <arglist>(Eigen::VectorXd &amp;jointVelocity, const Eigen::Vector6d &amp;desiredTwist, const dart::dynamics::MetaSkeletonPtr metaSkeleton, const dart::dynamics::BodyNodePtr bodyNode, double jointLimitPadding, const Eigen::VectorXd &amp;jointVelocityLowerLimits, const Eigen::VectorXd &amp;jointVelocityUpperLimits, bool enforceJointVelocityLimits, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>computeGeodesicTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>afa027fae31a834222c2f4ab8824f6496</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>computeGeodesicError</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a564b72a8e78e5397bdad153c74622135</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeGeodesicDistance</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>ac413955aa734563de5b5cadc0255f15c</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans, double r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>World.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>d0/dbb/World_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::planner::World</class>
    <class kind="struct">aikido::planner::World::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; World &gt;</type>
      <name>WorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa129f13cd8608a9a2c32ff3ed004b401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const World &gt;</type>
      <name>ConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>abab1048a8c2b02894784e4eed7440424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; World &gt;</type>
      <name>WeakWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a0a80182a9415c37ff6606a8477818905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const World &gt;</type>
      <name>WeakConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a9025cfb1edb43461abf19a24783f5409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; World &gt;</type>
      <name>UniqueWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>afbe4cc668596b5b0b035e59c716e8235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const World &gt;</type>
      <name>UniqueConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a06e4494bb40a6e49514302f48bbe4831</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldStateSaver.hpp</name>
    <path>/include/aikido/planner/</path>
    <filename>dd/de1/WorldStateSaver_8hpp</filename>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="yes" imported="no">aikido/planner/World.hpp</includes>
    <class kind="class">aikido::planner::WorldStateSaver</class>
    <namespace>aikido</namespace>
    <namespace>aikido::planner</namespace>
  </compound>
  <compound kind="file">
    <name>ConcreteManipulator.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d9/dbc/ConcreteManipulator_8hpp</filename>
    <includes id="dc/d31/Hand_8hpp" name="Hand.hpp" local="yes" imported="no">aikido/robot/Hand.hpp</includes>
    <includes id="d2/d1d/Manipulator_8hpp" name="Manipulator.hpp" local="yes" imported="no">aikido/robot/Manipulator.hpp</includes>
    <includes id="d4/dad/robot_2util_8hpp" name="util.hpp" local="yes" imported="no">aikido/robot/util.hpp</includes>
    <class kind="class">aikido::robot::ConcreteManipulator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteManipulator &gt;</type>
      <name>ConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a05b729cc4715c216c1d9089ba8738b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>ConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a901c435e1bc7867c4eeddd279f0e0639</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteManipulator &gt;</type>
      <name>WeakConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a425bd1c98bd075d772913803c5324eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>WeakConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a4154eef0b01c18fc28875c9de826ed08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteManipulator &gt;</type>
      <name>UniqueConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>aaacd06a986c474997b1ea9497839320c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>UniqueConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ab5c7b679f8fac1221a204bf6ce6c183d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcreteRobot.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>de/df1/ConcreteRobot_8hpp</filename>
    <includes id="d2/d0a/ExecutorThread_8hpp" name="ExecutorThread.hpp" local="yes" imported="no">aikido/common/ExecutorThread.hpp</includes>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFree.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="db/d4c/ParabolicSmoother_8hpp" name="ParabolicSmoother.hpp" local="yes" imported="no">aikido/planner/parabolic/ParabolicSmoother.hpp</includes>
    <includes id="df/dce/ParabolicTimer_8hpp" name="ParabolicTimer.hpp" local="yes" imported="no">aikido/planner/parabolic/ParabolicTimer.hpp</includes>
    <includes id="d7/da6/Robot_8hpp" name="Robot.hpp" local="yes" imported="no">aikido/robot/Robot.hpp</includes>
    <includes id="d4/dad/robot_2util_8hpp" name="util.hpp" local="yes" imported="no">aikido/robot/util.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::robot::ConcreteRobot</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteRobot &gt;</type>
      <name>ConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae3903bb64eec9aa908c4ba18624d8250</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteRobot &gt;</type>
      <name>ConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>abbec688092f448056645d86297351cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteRobot &gt;</type>
      <name>WeakConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac4e28850035f3715892b83a67a01a4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteRobot &gt;</type>
      <name>WeakConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae65c3e8836869540252e90d89e101b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteRobot &gt;</type>
      <name>UniqueConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bdcca7f55d97b8aa8f2aab8d1db253c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteRobot &gt;</type>
      <name>UniqueConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a24366d9001c9726d6921355743c200e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GrabMetadata.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d0/da8/GrabMetadata_8hpp</filename>
    <class kind="struct">aikido::robot::GrabMetadata</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
  </compound>
  <compound kind="file">
    <name>Hand.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>dc/d31/Hand_8hpp</filename>
    <includes id="d8/dd0/PositionCommandExecutor_8hpp" name="PositionCommandExecutor.hpp" local="yes" imported="no">aikido/control/PositionCommandExecutor.hpp</includes>
    <includes id="d5/d95/yaml_8hpp" name="yaml.hpp" local="yes" imported="no">aikido/io/yaml.hpp</includes>
    <includes id="d0/da8/GrabMetadata_8hpp" name="GrabMetadata.hpp" local="yes" imported="no">aikido/robot/GrabMetadata.hpp</includes>
    <class kind="class">aikido::robot::Hand</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Hand &gt;</type>
      <name>HandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad61197ab272f863ecd14d59437cadd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Hand &gt;</type>
      <name>ConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae56be858d4d3e5a4a19b8158edef0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Hand &gt;</type>
      <name>WeakHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bbaf97c024ea686f6cc846f8162bf6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Hand &gt;</type>
      <name>WeakConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a41faab9c161dc405ca69bf442d4bd7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Hand &gt;</type>
      <name>UniqueHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6647bdbf5aedb76a1617077b98eae2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Hand &gt;</type>
      <name>UniqueConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a48d7d89f8adfd0a44dfa8f5dc161e6ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Manipulator.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d2/d1d/Manipulator_8hpp</filename>
    <includes id="dc/d31/Hand_8hpp" name="Hand.hpp" local="yes" imported="no">aikido/robot/Hand.hpp</includes>
    <includes id="d7/da6/Robot_8hpp" name="Robot.hpp" local="yes" imported="no">aikido/robot/Robot.hpp</includes>
    <class kind="class">aikido::robot::Manipulator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Manipulator &gt;</type>
      <name>ManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae9ff74efcf27c603b2a47bd2d48a081e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Manipulator &gt;</type>
      <name>ConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a9c1f16e4f7af8f1ea85771041f7e24d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Manipulator &gt;</type>
      <name>WeakManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7244e08967f44ee9c7ad4d701b2cc72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Manipulator &gt;</type>
      <name>WeakConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a92c30cea0694f5da5a06c2227e25e9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Manipulator &gt;</type>
      <name>UniqueManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7d581dde2230eb9c6dad42ff3cf26234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Manipulator &gt;</type>
      <name>UniqueConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a3b2f2cb16e67a92865da5011cdadb87e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Robot.hpp</name>
    <path>/include/aikido/robot/</path>
    <filename>d7/da6/Robot_8hpp</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="de/d1d/CollisionFree_8hpp" name="CollisionFree.hpp" local="yes" imported="no">aikido/constraint/dart/CollisionFree.hpp</includes>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="yes" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d6/d6e/TrajectoryExecutor_8hpp" name="TrajectoryExecutor.hpp" local="yes" imported="no">aikido/control/TrajectoryExecutor.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">aikido/trajectory/Spline.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::robot::Robot</class>
    <namespace>aikido</namespace>
    <namespace>aikido::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad935170cf3805e00e82c5661d840464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Robot &gt;</type>
      <name>ConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a5b34bc49be50b8fb406e8ac7ef3d5804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Robot &gt;</type>
      <name>WeakRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae7ea0c2414452c6e44e04727ff411aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Robot &gt;</type>
      <name>WeakConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a08a329dcb035c215cb55814024d81767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Robot &gt;</type>
      <name>UniqueRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac36de5e6cc70a361a59dd0892f629c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Robot &gt;</type>
      <name>UniqueConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a35cdb287258f9253e92ff8b9da6baccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rviz.hpp</name>
    <path>/include/aikido/</path>
    <filename>db/d99/rviz_8hpp</filename>
    <includes id="d4/dfa/BodyNodeMarker_8hpp" name="BodyNodeMarker.hpp" local="yes" imported="no">rviz/BodyNodeMarker.hpp</includes>
    <includes id="d0/d8f/FrameMarker_8hpp" name="FrameMarker.hpp" local="yes" imported="no">rviz/FrameMarker.hpp</includes>
    <includes id="d1/dc3/InteractiveMarkerViewer_8hpp" name="InteractiveMarkerViewer.hpp" local="yes" imported="no">rviz/InteractiveMarkerViewer.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">rviz/ResourceServer.hpp</includes>
    <includes id="da/d5b/ShapeFrameMarker_8hpp" name="ShapeFrameMarker.hpp" local="yes" imported="no">rviz/ShapeFrameMarker.hpp</includes>
    <includes id="d6/d26/SkeletonMarker_8hpp" name="SkeletonMarker.hpp" local="yes" imported="no">rviz/SkeletonMarker.hpp</includes>
    <includes id="d6/d3e/TSRMarker_8hpp" name="TSRMarker.hpp" local="yes" imported="no">rviz/TSRMarker.hpp</includes>
    <includes id="dd/de3/WorldInteractiveMarkerViewer_8hpp" name="WorldInteractiveMarkerViewer.hpp" local="yes" imported="no">rviz/WorldInteractiveMarkerViewer.hpp</includes>
    <includes id="d6/db0/rviz_2shape__conversions_8hpp" name="shape_conversions.hpp" local="yes" imported="no">rviz/shape_conversions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>BodyNodeMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d4/dfa/BodyNodeMarker_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">ResourceServer.hpp</includes>
    <includes id="da/d5b/ShapeFrameMarker_8hpp" name="ShapeFrameMarker.hpp" local="yes" imported="no">ShapeFrameMarker.hpp</includes>
    <class kind="class">aikido::rviz::BodyNodeMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodeMarker &gt;</type>
      <name>BodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2caae3ca963e1d82a48e384680eeb9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>ConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6f3390775e93a2d0e218b13487d11b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodeMarker &gt;</type>
      <name>WeakBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a80c346eb0668f6ec82bd9094bb766eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>WeakConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a186798f195df3096da5979a48b57194d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodeMarker &gt;</type>
      <name>UniqueBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac9e830eb01365f1f7dc33e5aa197ffd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>UniqueConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a01cf381a90c2eb030b3fe2a84e9fc95f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrameMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d0/d8f/FrameMarker_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::rviz::FrameMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; FrameMarker &gt;</type>
      <name>FrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a71c26a83d75818ef01efaac71eeed5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const FrameMarker &gt;</type>
      <name>ConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a259b8e0e923cdd675d4f2795babe5b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; FrameMarker &gt;</type>
      <name>WeakFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a35bccf6e1f37a585ea67274e890ac8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const FrameMarker &gt;</type>
      <name>WeakConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2b8c9dfa9a51530e18a5fd13d99b7095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; FrameMarker &gt;</type>
      <name>UniqueFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a4b2f19a3a62965fc12fc8ff2cfc675fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const FrameMarker &gt;</type>
      <name>UniqueConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a100ccced3dd6c20edf64533b566eb400</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InteractiveMarkerViewer.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d1/dc3/InteractiveMarkerViewer_8hpp</filename>
    <includes id="de/dfd/TSR_8hpp" name="TSR.hpp" local="no" imported="no">aikido/constraint/dart/TSR.hpp</includes>
    <includes id="d6/d3e/TSRMarker_8hpp" name="TSRMarker.hpp" local="no" imported="no">aikido/rviz/TSRMarker.hpp</includes>
    <includes id="d6/dba/rviz_2pointers_8hpp" name="pointers.hpp" local="no" imported="no">aikido/rviz/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="no" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::rviz::InteractiveMarkerViewer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>InteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aac91d4365e1ab047ad7d8db7676a4bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>ConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a289c308fceb16012c144f43b6c3d5591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>WeakInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7f68b334063581103501e894ce311569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>WeakConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a28a06069c73873da3736f6d9a64213e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>UniqueInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac28e45377726d43cb1f266a1b94ff2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>UniqueConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac2e3bdd3914efe42b60aa34fe3b6ddaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ResourceServer.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d8/df9/ResourceServer_8hpp</filename>
    <class kind="struct">aikido::rviz::BinaryResource</class>
    <class kind="struct">aikido::rviz::TextureResource</class>
    <class kind="struct">aikido::rviz::MeshResource</class>
    <class kind="struct">aikido::rviz::ResourceRequest</class>
    <class kind="class">aikido::rviz::ResourceServer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TextureResource &gt;</type>
      <name>TextureResourcePtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0844c3a1c44227f91e00540aeec98e59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeFrameMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>da/d5b/ShapeFrameMarker_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">ResourceServer.hpp</includes>
    <class kind="class">aikido::rviz::ShapeFrameMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>ShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aae58ff66e95bc1d2dcb81cface7f44fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>ConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab349244402ace54b805b3d025f9e07ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>WeakShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2bbf49828f7d08d2fe9544e93b3fc180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>WeakConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a687a16a76c2b7713e94f0d71f7c9ff0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>UniqueShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1a6038295bfe54351ac5d172d9d89b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>UniqueConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afdda6d93e2b5a744245d74ebbd8892a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SkeletonMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/d26/SkeletonMarker_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d4/dfa/BodyNodeMarker_8hpp" name="BodyNodeMarker.hpp" local="yes" imported="no">BodyNodeMarker.hpp</includes>
    <includes id="d8/df9/ResourceServer_8hpp" name="ResourceServer.hpp" local="yes" imported="no">ResourceServer.hpp</includes>
    <class kind="class">aikido::rviz::SkeletonMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
  </compound>
  <compound kind="file">
    <name>TrajectoryMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d2/d02/TrajectoryMarker_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">aikido/trajectory/Trajectory.hpp</includes>
    <class kind="class">aikido::rviz::TrajectoryMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
  </compound>
  <compound kind="file">
    <name>TSRMarker.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>d6/d3e/TSRMarker_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <class kind="class">aikido::rviz::TSRMarker</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
  </compound>
  <compound kind="file">
    <name>WorldInteractiveMarkerViewer.hpp</name>
    <path>/include/aikido/rviz/</path>
    <filename>dd/de3/WorldInteractiveMarkerViewer_8hpp</filename>
    <includes id="d0/dbb/World_8hpp" name="World.hpp" local="no" imported="no">aikido/planner/World.hpp</includes>
    <includes id="d1/dc3/InteractiveMarkerViewer_8hpp" name="InteractiveMarkerViewer.hpp" local="no" imported="no">aikido/rviz/InteractiveMarkerViewer.hpp</includes>
    <includes id="d6/dba/rviz_2pointers_8hpp" name="pointers.hpp" local="no" imported="no">aikido/rviz/pointers.hpp</includes>
    <class kind="class">aikido::rviz::WorldInteractiveMarkerViewer</class>
    <namespace>aikido</namespace>
    <namespace>aikido::rviz</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; WorldInteractiveMarkerViewer &gt;</type>
      <name>WorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0c12e75ddb2e2e5381f534fd98fb33ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const WorldInteractiveMarkerViewer &gt;</type>
      <name>ConstWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ad1e8d560c9aecf37bc10ec92e94e0f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; WorldInteractiveMarkerViewer &gt;</type>
      <name>WeakWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a841cc2d949a49bcafcc6434e79f10c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const WorldInteractiveMarkerViewer &gt;</type>
      <name>WeakConstWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6709adc1ce981eadf9f59d8b81e38aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; WorldInteractiveMarkerViewer &gt;</type>
      <name>UniqueWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a57da9ff74c7030662350d3de7191e936</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const WorldInteractiveMarkerViewer &gt;</type>
      <name>UniqueConstWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0a7c17de106acd33f66f6b7ee3993bfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>statespace.hpp</name>
    <path>/include/aikido/</path>
    <filename>d1/dac/statespace_8hpp</filename>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">statespace/CartesianProduct.hpp</includes>
    <includes id="d3/db8/GeodesicInterpolator_8hpp" name="GeodesicInterpolator.hpp" local="yes" imported="no">statespace/GeodesicInterpolator.hpp</includes>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">statespace/Interpolator.hpp</includes>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">statespace/Rn.hpp</includes>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">statespace/SE2.hpp</includes>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">statespace/SE3.hpp</includes>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">statespace/SO2.hpp</includes>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">statespace/SO3.hpp</includes>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">statespace/ScopedState.hpp</includes>
    <includes id="d7/da6/StateHandle_8hpp" name="StateHandle.hpp" local="yes" imported="no">statespace/StateHandle.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">statespace/StateSpace.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d4/dc6/statespace_2dart_2JointStateSpaceHelpers_8hpp" name="JointStateSpaceHelpers.hpp" local="yes" imported="no">statespace/dart/JointStateSpaceHelpers.hpp</includes>
    <includes id="d4/d49/MetaSkeletonStateSaver_8hpp" name="MetaSkeletonStateSaver.hpp" local="yes" imported="no">statespace/dart/MetaSkeletonStateSaver.hpp</includes>
    <includes id="d5/df3/MetaSkeletonStateSpace_8hpp" name="MetaSkeletonStateSpace.hpp" local="yes" imported="no">statespace/dart/MetaSkeletonStateSpace.hpp</includes>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="yes" imported="no">statespace/dart/RnJoint.hpp</includes>
    <includes id="d3/d2e/SE2Joint_8hpp" name="SE2Joint.hpp" local="yes" imported="no">statespace/dart/SE2Joint.hpp</includes>
    <includes id="df/d83/SE3Joint_8hpp" name="SE3Joint.hpp" local="yes" imported="no">statespace/dart/SE3Joint.hpp</includes>
    <includes id="d6/d05/SO2Joint_8hpp" name="SO2Joint.hpp" local="yes" imported="no">statespace/dart/SO2Joint.hpp</includes>
    <includes id="d6/d26/SO3Joint_8hpp" name="SO3Joint.hpp" local="yes" imported="no">statespace/dart/SO3Joint.hpp</includes>
    <includes id="dc/de8/WeldJoint_8hpp" name="WeldJoint.hpp" local="yes" imported="no">statespace/dart/WeldJoint.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CartesianProduct.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d6/dec/CartesianProduct_8hpp</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">StateSpace.hpp</includes>
    <includes id="d7/d20/CartesianProduct-impl_8hpp" name="CartesianProduct-impl.hpp" local="yes" imported="no">detail/CartesianProduct-impl.hpp</includes>
    <class kind="class">aikido::statespace::CompoundStateHandle</class>
    <class kind="class">aikido::statespace::CartesianProduct</class>
    <class kind="class">aikido::statespace::CartesianProduct::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>MetaSkeletonStateSpace-impl.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>d6/dc8/MetaSkeletonStateSpace-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>RnJoint-impl.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>d6/ddb/RnJoint-impl_8hpp</filename>
    <includes id="da/d3e/RnJoint_8hpp" name="RnJoint.hpp" local="no" imported="no">aikido/statespace/dart/RnJoint.hpp</includes>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>RnJointTraits.hpp</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>dd/d6f/RnJointTraits_8hpp</filename>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits</class>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits&lt; 0 &gt;</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <namespace>aikido::statespace::dart::detail</namespace>
  </compound>
  <compound kind="file">
    <name>JointStateSpace.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d2/dc2/JointStateSpace_8hpp</filename>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">aikido/statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::JointStateSpace</class>
    <class kind="class">aikido::statespace::dart::JointStateSpace::Properties</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>MetaSkeletonStateSaver.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d4/d49/MetaSkeletonStateSaver_8hpp</filename>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSaver</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>MetaSkeletonStateSpace.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d5/df3/MetaSkeletonStateSpace_8hpp</filename>
    <includes id="d3/d9f/pair_8hpp" name="pair.hpp" local="yes" imported="no">aikido/common/pair.hpp</includes>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d6/dec/CartesianProduct_8hpp" name="CartesianProduct.hpp" local="yes" imported="no">aikido/statespace/CartesianProduct.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="d6/dc8/MetaSkeletonStateSpace-impl_8hpp" name="MetaSkeletonStateSpace-impl.hpp" local="yes" imported="no">detail/MetaSkeletonStateSpace-impl.hpp</includes>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace</class>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace::Properties</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>MetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8ed2b6f9ff6bc957ee5f55343ea579b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>ConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8d493e13286a781f5983bda8232b14d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>WeakMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a518c11ce2a31145e7eda1fe386b62d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>WeakConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a29e67649edf945287f33e51334c33a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>UniqueMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a0a7a00afa4a30bac93eadb58fc74d5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>UniqueConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a640cd5d21ceb88b577d0cb6bf21e0dfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RnJoint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>da/d3e/RnJoint_8hpp</filename>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <includes id="dd/d6f/RnJointTraits_8hpp" name="RnJointTraits.hpp" local="yes" imported="no">aikido/statespace/dart/detail/RnJointTraits.hpp</includes>
    <includes id="d6/ddb/RnJoint-impl_8hpp" name="RnJoint-impl.hpp" local="yes" imported="no">aikido/statespace/dart/detail/RnJoint-impl.hpp</includes>
    <class kind="class">aikido::statespace::dart::RJoint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
    <member kind="typedef">
      <type>RJoint&lt; 0 &gt;</type>
      <name>R0Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae72e38e578b41763d97f47d32bd1c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 1 &gt;</type>
      <name>R1Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>abaa5729da665c95333267de6bf10fc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 2 &gt;</type>
      <name>R2Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ad1287648351a3a6f0cad1598d93c033c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 3 &gt;</type>
      <name>R3Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>adfaec81dec6569c2dea0cb06cc45794f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 6 &gt;</type>
      <name>R6Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a840584b947a4d859602ef3498e72adfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SE2Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d3/d2e/SE2Joint_8hpp</filename>
    <includes id="d4/d96/statespace_2SE2_8hpp" name="SE2.hpp" local="yes" imported="no">../SE2.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SE2Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SE3Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>df/d83/SE3Joint_8hpp</filename>
    <includes id="d2/d72/SE3_8hpp" name="SE3.hpp" local="yes" imported="no">aikido/statespace/SE3.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SE3Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SO2Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d6/d05/SO2Joint_8hpp</filename>
    <includes id="d6/d12/SO2_8hpp" name="SO2.hpp" local="yes" imported="no">aikido/statespace/SO2.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SO2Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>SO3Joint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>d6/d26/SO3Joint_8hpp</filename>
    <includes id="d3/dc7/SO3_8hpp" name="SO3.hpp" local="yes" imported="no">aikido/statespace/SO3.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::SO3Joint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>WeldJoint.hpp</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>dc/de8/WeldJoint_8hpp</filename>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <includes id="d2/dc2/JointStateSpace_8hpp" name="JointStateSpace.hpp" local="yes" imported="no">aikido/statespace/dart/JointStateSpace.hpp</includes>
    <class kind="class">aikido::statespace::dart::WeldJoint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::statespace::dart</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianProduct-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d7/d20/CartesianProduct-impl_8hpp</filename>
    <class kind="class">aikido::statespace::CompoundStateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>Rn-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d8/df3/Rn-impl_8hpp</filename>
    <includes id="d4/d4e/Rn_8hpp" name="Rn.hpp" local="yes" imported="no">aikido/statespace/Rn.hpp</includes>
    <class kind="class">aikido::statespace::RStateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>ScopedState-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>de/d57/ScopedState-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE2-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>dd/da5/SE2-impl_8hpp</filename>
    <class kind="class">aikido::statespace::SE2StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE3-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>dd/d08/SE3-impl_8hpp</filename>
    <class kind="class">aikido::statespace::SE3StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO2-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d7/d6a/SO2-impl_8hpp</filename>
    <class kind="class">aikido::statespace::SO2StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO3-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d3/ded/SO3-impl_8hpp</filename>
    <class kind="class">aikido::statespace::SO3StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>StateHandle-impl.hpp</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>d6/dbc/StateHandle-impl_8hpp</filename>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>GeodesicInterpolator.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d3/db8/GeodesicInterpolator_8hpp</filename>
    <includes id="d2/d6f/Interpolator_8hpp" name="Interpolator.hpp" local="yes" imported="no">Interpolator.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">StateSpace.hpp</includes>
    <class kind="class">aikido::statespace::GeodesicInterpolator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>Interpolator.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d2/d6f/Interpolator_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::statespace::Interpolator</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolator &gt;</type>
      <name>InterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae78c8cb0f9e8b59f0c6f8415bc6c8c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolator &gt;</type>
      <name>ConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acd1df13520395c55b7cd026e051bc574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolator &gt;</type>
      <name>WeakInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6da018faa8a88dd6ec0ccf323251f12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolator &gt;</type>
      <name>WeakConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acefac2fbc8f04f77a08803a49950952d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolator &gt;</type>
      <name>UniqueInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af245b6690dc8d271d14f4efb78635d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolator &gt;</type>
      <name>UniqueConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a0a843c02e921c290916adf5a551dfe93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/include/aikido/statespace/</path>
    <filename>da/ddd/README_8md</filename>
  </compound>
  <compound kind="file">
    <name>Rn.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d4/d4e/Rn_8hpp</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">StateSpace.hpp</includes>
    <includes id="d8/df3/Rn-impl_8hpp" name="Rn-impl.hpp" local="yes" imported="no">detail/Rn-impl.hpp</includes>
    <class kind="class">aikido::statespace::RStateHandle</class>
    <class kind="class">aikido::statespace::R</class>
    <class kind="class">aikido::statespace::R::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <member kind="typedef">
      <type>R&lt; 0 &gt;</type>
      <name>R0</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a112711b214334a56f6211267f3a7ea48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 1 &gt;</type>
      <name>R1</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aa1c3a2d2580f90ca0da9fee65de8f966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 2 &gt;</type>
      <name>R2</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a236d98378f3a4c871d7df5d339a598a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 3 &gt;</type>
      <name>R3</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae0ff830e4bc4cbbf927ebcb04af2346c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 6 &gt;</type>
      <name>R6</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6bdc50148bffb18120bd4b4803960ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; Eigen::Dynamic &gt;</type>
      <name>Rn</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a7d6e5d692a6d4f52a878ad0d030055ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScopedState.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d5/dac/ScopedState_8hpp</filename>
    <includes id="d7/da6/StateHandle_8hpp" name="StateHandle.hpp" local="yes" imported="no">StateHandle.hpp</includes>
    <includes id="de/d57/ScopedState-impl_8hpp" name="ScopedState-impl.hpp" local="yes" imported="no">detail/ScopedState-impl.hpp</includes>
    <class kind="class">aikido::statespace::ScopedState</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SE3.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d2/d72/SE3_8hpp</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">StateSpace.hpp</includes>
    <includes id="dd/d08/SE3-impl_8hpp" name="SE3-impl.hpp" local="yes" imported="no">detail/SE3-impl.hpp</includes>
    <class kind="class">aikido::statespace::SE3StateHandle</class>
    <class kind="class">aikido::statespace::SE3</class>
    <class kind="class">aikido::statespace::SE3::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO2.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d6/d12/SO2_8hpp</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">StateSpace.hpp</includes>
    <includes id="d7/d6a/SO2-impl_8hpp" name="SO2-impl.hpp" local="yes" imported="no">detail/SO2-impl.hpp</includes>
    <class kind="class">aikido::statespace::SO2StateHandle</class>
    <class kind="class">aikido::statespace::SO2</class>
    <class kind="class">aikido::statespace::SO2::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>SO3.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d3/dc7/SO3_8hpp</filename>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">ScopedState.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">StateSpace.hpp</includes>
    <includes id="d3/ded/SO3-impl_8hpp" name="SO3-impl.hpp" local="yes" imported="no">detail/SO3-impl.hpp</includes>
    <class kind="class">aikido::statespace::SO3StateHandle</class>
    <class kind="class">aikido::statespace::SO3</class>
    <class kind="class">aikido::statespace::SO3::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>StateHandle.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d7/da6/StateHandle_8hpp</filename>
    <includes id="d6/dbc/StateHandle-impl_8hpp" name="StateHandle-impl.hpp" local="yes" imported="no">detail/StateHandle-impl.hpp</includes>
    <class kind="class">aikido::statespace::StateHandle</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
  </compound>
  <compound kind="file">
    <name>StateSpace.hpp</name>
    <path>/include/aikido/statespace/</path>
    <filename>d0/d73/StateSpace_8hpp</filename>
    <includes id="d2/d16/RNG_8hpp" name="RNG.hpp" local="yes" imported="no">aikido/common/RNG.hpp</includes>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d5/dac/ScopedState_8hpp" name="ScopedState.hpp" local="yes" imported="no">aikido/statespace/ScopedState.hpp</includes>
    <class kind="class">aikido::statespace::StateSpace</class>
    <class kind="class">aikido::statespace::StateSpace::State</class>
    <namespace>aikido</namespace>
    <namespace>aikido::statespace</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a55de554810a89a068e51133660087b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a04f07b5eb15f2c5f5b72221278854eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; StateSpace &gt;</type>
      <name>WeakStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a43ca940fe24d5036ce19540cb3e7cf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const StateSpace &gt;</type>
      <name>WeakConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aac239e63abbc94c92bc02cab1b887e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; StateSpace &gt;</type>
      <name>UniqueStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af85badb5902b06f3da6e845321512738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const StateSpace &gt;</type>
      <name>UniqueConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a85f9f4e81b79ee5b7194550faad26046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajectory.hpp</name>
    <path>/include/aikido/</path>
    <filename>d5/d07/trajectory_8hpp</filename>
    <includes id="df/dfd/Interpolated_8hpp" name="Interpolated.hpp" local="yes" imported="no">trajectory/Interpolated.hpp</includes>
    <includes id="df/db2/trajectory_2Spline_8hpp" name="Spline.hpp" local="yes" imported="no">trajectory/Spline.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">trajectory/Trajectory.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Interpolated.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>df/dfd/Interpolated_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d3/db8/GeodesicInterpolator_8hpp" name="GeodesicInterpolator.hpp" local="yes" imported="no">../statespace/GeodesicInterpolator.hpp</includes>
    <includes id="d2/de2/Trajectory_8hpp" name="Trajectory.hpp" local="yes" imported="no">Trajectory.hpp</includes>
    <class kind="class">aikido::trajectory::Interpolated</class>
    <class kind="struct">aikido::trajectory::Interpolated::Waypoint</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a2fa8e779f3587c13083faa74d6f72737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolated &gt;</type>
      <name>ConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a6ac0c2c899cf0a43fe9a86fca8b2e622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolated &gt;</type>
      <name>WeakInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a37caeb8a3bfbca4cd15ef0d48d488572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolated &gt;</type>
      <name>WeakConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>acc72dc9ff0a7c62ada97262dd342331d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolated &gt;</type>
      <name>UniqueInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a3958f463715266c2e7bd73ade7883ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolated &gt;</type>
      <name>UniqueConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aac066660116f2c739043326d79c476f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Trajectory.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>d2/de2/Trajectory_8hpp</filename>
    <includes id="d5/d1d/common_2pointers_8hpp" name="pointers.hpp" local="yes" imported="no">aikido/common/pointers.hpp</includes>
    <includes id="d5/dde/TrajectoryMetadata_8hpp" name="TrajectoryMetadata.hpp" local="no" imported="no">aikido/trajectory/TrajectoryMetadata.hpp</includes>
    <includes id="d0/d73/StateSpace_8hpp" name="StateSpace.hpp" local="yes" imported="no">../statespace/StateSpace.hpp</includes>
    <class kind="class">aikido::trajectory::Trajectory</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Trajectory &gt;</type>
      <name>TrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a4653e7dbb840b47d280798374eda6ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Trajectory &gt;</type>
      <name>ConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae287f9bd79aff29551b41b2e815e4c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Trajectory &gt;</type>
      <name>WeakTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a52a5ed13cddf456c3955d965617d3131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Trajectory &gt;</type>
      <name>WeakConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a89384b5934145651e614b905bca5c199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Trajectory &gt;</type>
      <name>UniqueTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a8af519255979af6d9041bbeade5dec34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Trajectory &gt;</type>
      <name>UniqueConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ad8b57775f2914cd7d23bf3339803c9b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryMetadata.hpp</name>
    <path>/include/aikido/trajectory/</path>
    <filename>d5/dde/TrajectoryMetadata_8hpp</filename>
    <class kind="struct">aikido::trajectory::TrajectoryMetadata</class>
    <namespace>aikido</namespace>
    <namespace>aikido::trajectory</namespace>
  </compound>
  <compound kind="page">
    <name>md_include_aikido_statespace_README</name>
    <title>State Space Concept</title>
    <filename>d0/d16/md_include_aikido_statespace_README</filename>
  </compound>
  <compound kind="namespace">
    <name>aikido</name>
    <filename>d9/dcf/namespaceaikido.html</filename>
    <namespace>aikido::common</namespace>
    <namespace>aikido::constraint</namespace>
    <namespace>aikido::control</namespace>
    <namespace>aikido::distance</namespace>
    <namespace>aikido::io</namespace>
    <namespace>aikido::perception</namespace>
    <namespace>aikido::planner</namespace>
    <namespace>aikido::robot</namespace>
    <namespace>aikido::rviz</namespace>
    <namespace>aikido::statespace</namespace>
    <namespace>aikido::trajectory</namespace>
  </compound>
  <compound kind="namespace">
    <name>aikido::common</name>
    <filename>d6/d61/namespaceaikido_1_1common.html</filename>
    <namespace>aikido::common::operators</namespace>
    <class kind="struct">aikido::common::DynamicCastFactory_shared_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory_raw_ptr</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt;&gt; &gt;</class>
    <class kind="struct">aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt; Arg, Args...&gt; &gt;</class>
    <class kind="class">aikido::common::ExecutorMultiplexer</class>
    <class kind="class">aikido::common::ExecutorThread</class>
    <class kind="class">aikido::common::type_list</class>
    <class kind="struct">aikido::common::DynamicCastFactory</class>
    <class kind="struct">aikido::common::PairHash</class>
    <class kind="class">aikido::common::RNG</class>
    <class kind="class">aikido::common::RNGWrapper</class>
    <class kind="class">aikido::common::SplineND</class>
    <class kind="class">aikido::common::SplineProblem</class>
    <class kind="class">aikido::common::StepSequence</class>
    <class kind="class">aikido::common::VanDerCorput</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RNG &gt;</type>
      <name>RNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a6e93f385ba51ae65b1358caec7123594</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const RNG &gt;</type>
      <name>ConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5ab830b62be72e5609b3cebb4adf1781</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; RNG &gt;</type>
      <name>WeakRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a08c378abf527cfdd2dfc4b7562221f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const RNG &gt;</type>
      <name>WeakConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a065e5aa82c6a074d83ba022eef076e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>UniqueRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2e5beefd493aaebdee692c2e3e4be73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const RNG &gt;</type>
      <name>UniqueConstRNGPtr</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ae49864e7eb880866ebf17e8470eceac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2f785e13331ed3caff844bf698624116</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi, Compare comp)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>clamp</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a2a65ebfdf34681623893b6d60c462756</anchor>
      <arglist>(const T &amp;v, const T &amp;lo, const T &amp;hi)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>sampleQuaternion</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a7d110a30773e873691fa252da91ca085</anchor>
      <arglist>(Engine &amp;_engine, std::uniform_real_distribution&lt; Scalar &gt; &amp;_distribution)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>pseudoinverse</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a0c897267b60a196a6d0b465d3b7050c0</anchor>
      <arglist>(const Eigen::MatrixXd &amp;mat, double eps=1e-6)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGsFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a4b27abd3edae153eb67309e0657f5f8e</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numOutputs, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; common::RNG &gt; &gt;</type>
      <name>cloneRNGFrom</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>ac57de355b263a15212902e5ba3ac6967</anchor>
      <arglist>(RNG &amp;_engine, std::size_t _numSeeds=NUM_DEFAULT_SEEDS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCollisionObject</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a39252825f40e93cfec2ecc20abf7e31a</anchor>
      <arglist>(const dart::collision::CollisionObject &amp;collisionObject, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCollisionResult</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a54d084e926f9f585cdb549e5774a873b</anchor>
      <arglist>(const dart::collision::CollisionResult &amp;collisionResult, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a101ad378b3da9a07f7149aed91ed25df</anchor>
      <arglist>(const std::string &amp;string, const std::string &amp;delimiters=&quot; \t&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>NUM_DEFAULT_SEEDS</name>
      <anchorfile>d6/d61/namespaceaikido_1_1common.html</anchorfile>
      <anchor>a5e75364963030abfe764984f5dcf35e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory_shared_ptr</name>
    <filename>dc/dc2/structaikido_1_1common_1_1DynamicCastFactory__shared__ptr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Pointee &gt;</type>
      <name>type</name>
      <anchorfile>dc/dc2/structaikido_1_1common_1_1DynamicCastFactory__shared__ptr.html</anchorfile>
      <anchor>a0883b4c25ee8e55ef7a6ff7f277f8b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Derived &gt;</type>
      <name>cast</name>
      <anchorfile>dc/dc2/structaikido_1_1common_1_1DynamicCastFactory__shared__ptr.html</anchorfile>
      <anchor>ad8e42fc865aaa5c021adb260aaf2e5a5</anchor>
      <arglist>(std::shared_ptr&lt; Pointee &gt; _pointer)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory_raw_ptr</name>
    <filename>df/d21/structaikido_1_1common_1_1DynamicCastFactory__raw__ptr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Pointee *</type>
      <name>type</name>
      <anchorfile>df/d21/structaikido_1_1common_1_1DynamicCastFactory__raw__ptr.html</anchorfile>
      <anchor>a48c65efc6f03540d7c73c2037f55fdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived *</type>
      <name>cast</name>
      <anchorfile>df/d21/structaikido_1_1common_1_1DynamicCastFactory__raw__ptr.html</anchorfile>
      <anchor>ad5eac576026dbe20af90503fb8c0546d</anchor>
      <arglist>(Pointee *_pointer)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt;&gt; &gt;</name>
    <filename>d1/dbd/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01common_1_1type__list_3_4_01_4.html</filename>
    <templarg>Factory</templarg>
    <templarg>Pointer</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::nullptr_t</type>
      <name>create</name>
      <anchorfile>d1/dbd/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01common_1_1type__list_3_4_01_4.html</anchorfile>
      <anchor>ad0200c9949f7e1df374c8dcda8c296ab</anchor>
      <arglist>(typename Pointer&lt; BaseParameter &gt;::type, Parameters &amp;&amp;...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory&lt; Factory, Pointer, BaseParameter, common::type_list&lt; Arg, Args...&gt; &gt;</name>
    <filename>dd/d95/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01co75847de62b802c9118509871e512b3f1.html</filename>
    <templarg>Factory</templarg>
    <templarg>Pointer</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>create</name>
      <anchorfile>dd/d95/structaikido_1_1common_1_1DynamicCastFactory_3_01Factory_00_01Pointer_00_01BaseParameter_00_01co75847de62b802c9118509871e512b3f1.html</anchorfile>
      <anchor>a7a9ee468a38a54812583f5154770b438</anchor>
      <arglist>(typename Pointer&lt; BaseParameter &gt;::type _base, Parameters &amp;&amp;..._params) -&gt; decltype(Factory&lt; Arg &gt;::create(Pointer&lt; BaseParameter &gt;::template cast&lt; Arg &gt;(_base), std::forward&lt; Parameters &gt;(_params)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::ExecutorMultiplexer</name>
    <filename>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</filename>
    <member kind="function">
      <type></type>
      <name>ExecutorMultiplexer</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a913e011a340fee2dbc7d720314da1302</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExecutorMultiplexer</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a257723570aa5bdaf920a830da087f5e4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCallback</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a0a73b152eec8c5123f3e1921d8efbd98</anchor>
      <arglist>(std::function&lt; void()&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllCallbacks</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a9ece5784195a32ad3201c44b0144bc42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a90806cfa588539b85b5a6072eccd1a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumCallbacks</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a08502f6ffe474dac735476c2c15f602c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>a10bccbd3161c5c18e7090e51984c3ca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>ab49eb079b555facd41299ccae2e2c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::function&lt; void()&gt; &gt;</type>
      <name>mCallbacks</name>
      <anchorfile>da/d75/classaikido_1_1common_1_1ExecutorMultiplexer.html</anchorfile>
      <anchor>abfe90b3dab4b99e82359c54d7e4008b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::ExecutorThread</name>
    <filename>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</filename>
    <member kind="function">
      <type></type>
      <name>ExecutorThread</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae5d77d74d469a5b97512cceaa4b6915f</anchor>
      <arglist>(std::function&lt; void()&gt; callback, const Duration &amp;period)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExecutorThread</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a682e106f2b3754bdddfa6b1d4bf64366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ab4ba44b5f43d799c069413df512b69f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a4f483324de5494de515e4ebb054f7bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>spin</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a338f0d61beefb9cf2c5ae8b93e20bd53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::function&lt; void()&gt;</type>
      <name>mCallback</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>a50d4eb6663507f96cd4af73d4d1f4ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mPeriod</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae37dccde1418fda579cadf4298bc2033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::atomic&lt; bool &gt;</type>
      <name>mIsRunning</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae52c72243ba806bb872ec0d7a356d978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::thread</type>
      <name>mThread</name>
      <anchorfile>d3/d75/classaikido_1_1common_1_1ExecutorThread.html</anchorfile>
      <anchor>ae85a43917dbaf2834b85570d9cd1c46d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::type_list</name>
    <filename>d4/d82/classaikido_1_1common_1_1type__list.html</filename>
    <templarg>Types</templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::common::DynamicCastFactory</name>
    <filename>dd/dd2/structaikido_1_1common_1_1DynamicCastFactory.html</filename>
    <templarg>Factory</templarg>
    <templarg>Pointer</templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::common::PairHash</name>
    <filename>df/d1d/structaikido_1_1common_1_1PairHash.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>df/d1d/structaikido_1_1common_1_1PairHash.html</anchorfile>
      <anchor>af1c2f7b15d77c1c4d90038c0240eb60f</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;pair) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::RNG</name>
    <filename>d1/d28/classaikido_1_1common_1_1RNG.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>result_type</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a7de3f8c6d25e4ef403ce98b0b06d01b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RNG</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>affdb879e4c968f6a52b6e4316749f7a6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual result_type</type>
      <name>operator()</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a41507c8dd859edd82f071882901829e3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>discard</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a6ca020034a0c5bd4f1560da721e77840</anchor>
      <arglist>(unsigned long long _z)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>af9694f1ad0edf820d073cd3f28944fd5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a84e6f0e25207d02a8185a542d8fbce51</anchor>
      <arglist>(result_type _seed) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>min</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a0b705e6b5cb247b00da02bcac178458b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>max</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>ad5fb705fa8722ed6a4439fab78643b2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>NUM_BITS</name>
      <anchorfile>d1/d28/classaikido_1_1common_1_1RNG.html</anchorfile>
      <anchor>a543218fbf4dfe9404dced872313689f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::RNGWrapper</name>
    <filename>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">aikido::common::RNG</base>
    <member kind="typedef">
      <type>std::independent_bits_engine&lt; T, RNG::NUM_BITS, result_type &gt;</type>
      <name>engine_type</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>acb9616c745d4794d85d166e620af7c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>result_type</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a7de3f8c6d25e4ef403ce98b0b06d01b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>ab912ba7e92fd118901f9006c5e195cb0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>aca789ca1090b80d749d8f68c744c2ca8</anchor>
      <arglist>(const T &amp;_rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a98568b49730a5b461179e448a2128290</anchor>
      <arglist>(result_type _seed)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RNGWrapper</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>acfbb6f1c9bceab7beb67bf751e062ef0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>rng</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>ad735f47ac2dcf222840d90b6d60aeb16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>rng</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a196e2e459a6bbef03ba03a4a3d6c8cf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a9be6c9889386e1cef6091194a6debc19</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>ade1cb94079ac375cb86edff11592dd6e</anchor>
      <arglist>(unsigned long long _z) override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>acfbb9d37572d71df589edab32d230012</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RNG &gt;</type>
      <name>clone</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>aebf3f83a95fe1fe845482bb63038a65f</anchor>
      <arglist>(result_type _seed) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>engine_type</type>
      <name>mRng</name>
      <anchorfile>d4/d08/classaikido_1_1common_1_1RNGWrapper.html</anchorfile>
      <anchor>a8662fcb978498608014da112b6fe9538</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::SplineND</name>
    <filename>d1/dca/classaikido_1_1common_1_1SplineND.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_NumCoefficients</templarg>
    <templarg>_NumOutputs</templarg>
    <templarg>_NumKnots</templarg>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>afdc52203b5ed71e0be5ce818651cc959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Index</type>
      <name>Index</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aee563231ec15026eec143209ecbde2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumKnotsAtCompileTime, 1 &gt;</type>
      <name>TimeVector</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ab196b6735f27565de53431f6585f4fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>SolutionMatrix</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>aa60b48eec4613456e24f26cf2431d590</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, 1 &gt;</type>
      <name>OutputVector</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a7b1409e401d44b61fa74d505c29a9560</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SolutionMatrix, Eigen::aligned_allocator&lt; SolutionMatrix &gt; &gt;</type>
      <name>SolutionMatrices</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a59775ad55e110c6e49409b22a2314fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a07c6fb6615f41369f96780f320d7de54</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a9b19d6a24b3f89c9dd97bf841b83d78a</anchor>
      <arglist>(const TimeVector &amp;_times, const std::vector&lt; SolutionMatrix, Eigen::aligned_allocator&lt; SolutionMatrix &gt; &gt; &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a15da823e0d0022157d35056196235680</anchor>
      <arglist>(SplineND &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineND</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a8c01e20bb5b5c6989e7499bfce10ce55</anchor>
      <arglist>(const SplineND &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineND &amp;</type>
      <name>operator=</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a4d385a5d7db6df7d7bda65fb33d63062</anchor>
      <arglist>(SplineND &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineND &amp;</type>
      <name>operator=</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ab6d3efa39bbbd56cb68010ed235912b3</anchor>
      <arglist>(const SplineND &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a986912275683274769a75d9fde75ead4</anchor>
      <arglist>(Index _index, Scalar _t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a5c5da20abd268bbe9349d442769d8eab</anchor>
      <arglist>(TimeVector &amp;&amp;_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a4e162c020a5b2ba68dcd3b736daa929c</anchor>
      <arglist>(const TimeVector &amp;_t)</arglist>
    </member>
    <member kind="function">
      <type>const TimeVector &amp;</type>
      <name>getTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a92d89358c4ff59cdb4096880169d9ba9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SolutionMatrices &amp;</type>
      <name>getCoefficients</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ae68ef2ddefc5f46a3b520f78becfe6eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumKnots</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ac939b5fbbfba97d2eae566fbc6d66b18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumOutputs</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a3a2c7e2a2114e975d37c3454cc6582e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumDerivatives</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a3de2adf68d96540d8c8eab82a9dc88da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumCoefficients</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a06113497f5b052670f4653480ac17590</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>getDuration</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a377da42cfdb00ac90d2c7969b124369d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getSegmentIndex</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a449276732c1009b9346cb9e5588c17d7</anchor>
      <arglist>(Scalar _t) const </arglist>
    </member>
    <member kind="function">
      <type>OutputVector</type>
      <name>evaluate</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a727b178693f6f34cd9ae358fe57877b6</anchor>
      <arglist>(Scalar _t, Index _derivative=0) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumCoefficientsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ad1b7eeea93f84e5619b161d8d79ac48c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumOutputsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>acd25055ce1d01087a920661a2f4d6a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumKnotsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>ae0ae032ace76207e8c54c684d6e59065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumSegmentsAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a308fe2606eede2a07c651552380617d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a62a632c0ccf00b18048723b5d44e32dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, 1 &gt;</type>
      <name>CoefficientVector</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a56555f7cdece7be9e69c1c0ad9061478</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>CoefficientMatrix</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a118042672810ce198e0908ff84bab399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimeVector</type>
      <name>mTimes</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a26fce2ca513befe4f20f67f380d2d4d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SolutionMatrices</type>
      <name>mSolution</name>
      <anchorfile>d1/dca/classaikido_1_1common_1_1SplineND.html</anchorfile>
      <anchor>a37ded18841102a8ca8c5c9c93117f978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::SplineProblem</name>
    <filename>d9/d97/classaikido_1_1common_1_1SplineProblem.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>_NumCoefficients</templarg>
    <templarg>_NumOutputs</templarg>
    <templarg>_NumKnots</templarg>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a53c3aeb45a8ccef61ddefee78aecbf43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Index</type>
      <name>Index</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a329bee141521e133e33c722b5863baf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumKnotsAtCompileTime, 1 &gt;</type>
      <name>TimeVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a91ff97055a983f344b3265ef01c74517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, 1 &gt;</type>
      <name>OutputVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a9d15b753e5c4b4ce07efe8e35ac16d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, NumOutputsAtCompileTime &gt;</type>
      <name>OutputMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ad6025a66b0d3473ea6f0a0019b49cf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, 1 &gt;</type>
      <name>CoefficientVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ad793d6b116d214f4185dd858227e7c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumCoefficientsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>CoefficientMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>afd025333a231c00e3ea8e0f6e1a08f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; Scalar, 0, Index &gt;</type>
      <name>ProblemMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a9936b7cf8e41446edf146c8a4c622f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, DimensionAtCompileTime, NumOutputsAtCompileTime &gt;</type>
      <name>ProblemVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>acc4e15f55d1b3125affa25ed33c77b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, NumOutputsAtCompileTime, NumCoefficientsAtCompileTime &gt;</type>
      <name>SolutionMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ab73edeab6467df2dbc6b130d40756f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineND&lt; Scalar, Index, _NumCoefficients, _NumOutputs, _NumKnots &gt;</type>
      <name>Spline</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a3946fca2dd31538767a59d25777a7d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a8da0fadca3122a9d7d72c205dacd8063</anchor>
      <arglist>(const TimeVector &amp;_times)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a5162fd4971844d2e73736190cdfdd1f8</anchor>
      <arglist>(const TimeVector &amp;_times, Index _numCoefficients, Index _numOutputs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a2aba5606b3f9475348b51f8fea8ab00a</anchor>
      <arglist>(SplineProblem &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineProblem</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a38f1ee34d64caa95946deacd67187c85</anchor>
      <arglist>(const SplineProblem &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a0060aa15e27e66dc1f7581e8bb5da8b7</anchor>
      <arglist>(SplineProblem &amp;&amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>SplineProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a438935cd67d7f083877a0ff11bcd5f76</anchor>
      <arglist>(const SplineProblem &amp;_other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstantConstraint</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a1740e2d8467d194dab07b6f086a03c9e</anchor>
      <arglist>(Index _knot, Index _derivative, const OutputVector &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addContinuityConstraint</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a5afc0fc1887da0588137ea7d111eb4e6</anchor>
      <arglist>(Index _knot, Index _derivative)</arglist>
    </member>
    <member kind="function">
      <type>Spline</type>
      <name>fit</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>aa59732a0938590b77e7a334b2c0ad032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumKnots</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ac2107f8da3f1a31b02be8c9293ccb077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getNumOutputs</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ac3a1f027e760d9fc90b13c2c752a6015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>getDuration</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>af12a8d3987abfed253d7470c2de9181a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CoefficientVector</type>
      <name>createTimeVector</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a13170e1862d1fc40d8e150ddd08750fc</anchor>
      <arglist>(Scalar _t, Index _i, Index _n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CoefficientMatrix</type>
      <name>createCoefficientMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ab376246499a6b0179e91431115185703</anchor>
      <arglist>(Index _n)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumCoefficientsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ab702c509d75e3cdc3058e3ec8150cfa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumOutputsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a0a582aaa7bf1e6a40a6142e55b29cf78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumKnotsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a4ef751411147b2091183c306913a8462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>NumSegmentsAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a1934e7156b65ffd3980d37c990a3ce5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Index</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a3959d89830c89b8c77930e7249066e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumKnots</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>aaaf61ac795b4ab9c1a36040e1a2b8e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumSegments</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a876e51b8ed962c3dae6b53dd06e8de10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumCoefficients</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a9bf3a4d49d8531e09ef8faaafca645d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mNumOutputs</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>ae23326aed182a49abb4d813171544ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mDimension</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a18bf3b57432d749ddc2ad09e2ce415ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CoefficientMatrix</type>
      <name>mCoefficientMatrix</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a5395f3580f94bdfce9795742ca04d9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>mRowIndex</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>aa087e0f8e8e4e729ef5cd1f92c56d4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TimeVector</type>
      <name>mTimes</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>af3f9e7069623979c9af8edeba2dc5291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProblemMatrix</type>
      <name>mA</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a6d81a9ccf054b0c76aeb8c1057da89e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProblemVector</type>
      <name>mB</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a8db8c3e95504863a115d59a223feefd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; SolutionMatrix, Eigen::aligned_allocator&lt; SolutionMatrix &gt; &gt;</type>
      <name>mSolution</name>
      <anchorfile>d9/d97/classaikido_1_1common_1_1SplineProblem.html</anchorfile>
      <anchor>a34edcf7b21f0fbc3a3a974c9469e3d3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::StepSequence</name>
    <filename>df/d0e/classaikido_1_1common_1_1StepSequence.html</filename>
    <class kind="class">aikido::common::StepSequence::const_iterator</class>
    <member kind="function">
      <type></type>
      <name>StepSequence</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>ae17402bb004c4c3beabeeeef53c4ce7d</anchor>
      <arglist>(double stepSize, bool includeStartpoint=true, bool includeEndpoint=true, double startPoint=0.0, double endPoint=1.0)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a2f1229291ecaf1f5060e56b322995a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a6e0e858aa880ad155158c63600091ce0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a09fe93861a7302d8ba89d1a64492614c</anchor>
      <arglist>(std::size_t n) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLength</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a83db86d717da3d126a390fc83a350f73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateLength</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>abde480a88fe7dbf4ac995b02783ebdf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>mStepSize</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>ae77e9140222831a4657c9a53a61546a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeStartPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>aa77673541479c97740000c811d636e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeEndPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a77e09cacece5b1ebe5bfe99af00d4320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>mStartPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a113c4d4379c8ca32b5db549ba8b0830b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>mEndPoint</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a69d7911d7756656aadf1fd018047c5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mNumSteps</name>
      <anchorfile>df/d0e/classaikido_1_1common_1_1StepSequence.html</anchorfile>
      <anchor>a0aa94f05adf90e99b059e5591d1daf1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::StepSequence::const_iterator</name>
    <filename>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</filename>
    <member kind="function">
      <type>double</type>
      <name>dereference</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a56dbf0b8520a140814e804cc0141635d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a815c7173c4d0b085059e273c2787bdf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a719d01e1e8b5e9dcdf64236599434cf5</anchor>
      <arglist>(const StepSequence::const_iterator &amp;other) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>a4f73d111bd81ccec24e04f2f654ab2bd</anchor>
      <arglist>(const StepSequence &amp;seq, std::size_t step)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const StepSequence &amp;</type>
      <name>mSeq</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>af303dbde76db504361a2cb753dfb2055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mStep</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>aa0b2ddfd6a0b251375b1813705b7a7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mValue</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>aa44b316b0cc444171c6a9ab787090dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StepSequence</name>
      <anchorfile>dc/d70/classaikido_1_1common_1_1StepSequence_1_1const__iterator.html</anchorfile>
      <anchor>adc10d5963404733770b076e67ee4dbd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::VanDerCorput</name>
    <filename>df/d94/classaikido_1_1common_1_1VanDerCorput.html</filename>
    <class kind="class">aikido::common::VanDerCorput::const_iterator</class>
    <member kind="function">
      <type></type>
      <name>VanDerCorput</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a6c2a1064a3d3380c4a62f6e893af7c06</anchor>
      <arglist>(double span=1.0, bool includeStartpoint=false, bool includeEndpoint=false, double minResolution=0.0)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a3cbcd46b1e0b0c531bac9329b9eec208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>aa1ebfe2c344d1bae7f8bf12b493a8876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>operator[]</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a1dd648b121d86677070e78bf3968b0eb</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLength</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a6b7a79fbaac6b4549c12eda265c875a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>computeVanDerCorput</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a6ef9ff5aee5dc80369e14eeaa33ecebf</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>mSpan</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>ad6e6978d7d682e3d680545701cd6ae4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeStartpoint</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a45cd074b30dae709ae431e04bbd43f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>mIncludeEndpoint</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>aab90240324b2f723c8d388bfa95fb789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mMinResolution</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a58177649e3d58253f44fd8999d48e422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr int</type>
      <name>BASE</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>a4416da83554163e5d8cadcb63dc3d0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr int</type>
      <name>MAX</name>
      <anchorfile>df/d94/classaikido_1_1common_1_1VanDerCorput.html</anchorfile>
      <anchor>abe13ff7a814a68c9dbeb11bbe30d7b64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::common::VanDerCorput::const_iterator</name>
    <filename>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</filename>
    <member kind="function">
      <type>double</type>
      <name>dereference</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>ad40adb9c7f4d3e1066f45515a34725b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>afbbabda6e6e3f1d9bfe9b8cb2719e535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a5c260b8d8dd91b93189816e5fefb5555</anchor>
      <arglist>(const VanDerCorput::const_iterator &amp;other) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a508d4b43fbe3be3f52f437a0b276076e</anchor>
      <arglist>(const VanDerCorput *seq)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VanDerCorput *</type>
      <name>mSeq</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a106cfa23a6706b12dbc6843f27c75e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mN</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a39f98123ee2a8d0e71bd0e42772115f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mFinalIter</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>ab5f98f43239557c8db2cd0f9bb3eebc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>mCurr</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a41ec327a3b056ddcc4bb0790cf0b28eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>VanDerCorput</name>
      <anchorfile>d4/d60/classaikido_1_1common_1_1VanDerCorput_1_1const__iterator.html</anchorfile>
      <anchor>a129883e7a33213fad30b37229c1770ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::common::operators</name>
    <filename>d8/d72/namespaceaikido_1_1common_1_1operators.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>a3593747aa33d43a9de2aa3cb986a66de</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionObject &amp;collisionObject)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>d8/d72/namespaceaikido_1_1common_1_1operators.html</anchorfile>
      <anchor>af3eeed202bd70764941ea4e67087b827</anchor>
      <arglist>(std::ostream &amp;stream, const dart::collision::CollisionResult &amp;collisionResult)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint</name>
    <filename>d4/db9/namespaceaikido_1_1constraint.html</filename>
    <namespace>aikido::constraint::dart</namespace>
    <namespace>aikido::constraint::uniform</namespace>
    <class kind="class">aikido::constraint::CartesianProductProjectable</class>
    <class kind="class">aikido::constraint::CartesianProductSampleable</class>
    <class kind="class">aikido::constraint::CartesianProductTestable</class>
    <class kind="class">aikido::constraint::CyclicSampleable</class>
    <class kind="class">aikido::constraint::DefaultTestableOutcome</class>
    <class kind="class">aikido::constraint::Differentiable</class>
    <class kind="class">aikido::constraint::DifferentiableIntersection</class>
    <class kind="class">aikido::constraint::DifferentiableSubspace</class>
    <class kind="class">aikido::constraint::FiniteSampleable</class>
    <class kind="class">aikido::constraint::NewtonsMethodProjectable</class>
    <class kind="class">aikido::constraint::Projectable</class>
    <class kind="class">aikido::constraint::RejectionSampleable</class>
    <class kind="class">aikido::constraint::Sampleable</class>
    <class kind="class">aikido::constraint::SampleGenerator</class>
    <class kind="class">aikido::constraint::Satisfied</class>
    <class kind="class">aikido::constraint::Testable</class>
    <class kind="class">aikido::constraint::TestableIntersection</class>
    <class kind="class">aikido::constraint::TestableOutcome</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Differentiable &gt;</type>
      <name>DifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1a12f838d0919548ebb34e4b5036cf60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Differentiable &gt;</type>
      <name>ConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a42f96ef94d5b9500f69c87d923b0258c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Differentiable &gt;</type>
      <name>WeakDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a0f4439c33f232df8556f26b72692bc76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Differentiable &gt;</type>
      <name>WeakConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab26ff2bfec99c0dc173bec479e0699b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>UniqueDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa7410953d2dbe0fa789c5a7b7a6be59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Differentiable &gt;</type>
      <name>UniqueConstDifferentiablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab075f8029c906ba6d002d919da337bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Projectable &gt;</type>
      <name>ProjectablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8b943907af16556b4a26c81e83560643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Sampleable &gt;</type>
      <name>SampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>addcc44c3249e65b8d273f6a31e30c03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Sampleable &gt;</type>
      <name>ConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa1a59ca1b0d116d55490b4cfa5a80d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Sampleable &gt;</type>
      <name>WeakSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>abbdb6fc190a3ca31069d8d78f2555c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Sampleable &gt;</type>
      <name>WeakConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2aa43a5bd3d81d2771ce3aa1c0d3941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>UniqueSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a04d5d0cfc146c14b41c969d6db1e518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Sampleable &gt;</type>
      <name>UniqueConstSampleablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae89393311886605be570538a90074ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Testable &gt;</type>
      <name>TestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa749fba91b58949a6c3bd41ae7f39cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Testable &gt;</type>
      <name>ConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>aa2b1b74add33a65ce5994d0f07bdc86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Testable &gt;</type>
      <name>WeakTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a59afe2e627052475fe68a714f5541eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Testable &gt;</type>
      <name>WeakConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a1994872c8daeefab2f7b256ed5c644c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>UniqueTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ab117e9a807013f31028c0e13dd039e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Testable &gt;</type>
      <name>UniqueConstTestablePtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>af533d04a7259ede666cdbc7e3373eb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestableIntersection &gt;</type>
      <name>TestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a353151b01c822c0f2751eb3e9e0f7cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TestableIntersection &gt;</type>
      <name>ConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a561ce16cd5dade636b256b32c09efb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TestableIntersection &gt;</type>
      <name>WeakTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8daee5f02e7e9bdbc24644699fbadd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TestableIntersection &gt;</type>
      <name>WeakConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ac0890d7d5647ec9499b1d5d432c0e5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TestableIntersection &gt;</type>
      <name>UniqueTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a8a6d705f2a1bb6568bb8fe00bb1f0c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TestableIntersection &gt;</type>
      <name>UniqueConstTestableIntersectionPtr</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a7a2cc6be5dda0fd4d4a8ecc4b0f3a04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintType</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>a764bf6aa719f3f394e4ba1289489de4c</anchor>
      <arglist></arglist>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca22d77b4f36283fa15f20867ad3f2a30e">EQUALITY</enumvalue>
      <enumvalue file="d4/db9/namespaceaikido_1_1constraint.html" anchor="a764bf6aa719f3f394e4ba1289489de4ca2334c5c5672d3d347e758454046d7333">INEQUALITY</enumvalue>
    </member>
    <member kind="function">
      <type>Child *</type>
      <name>dynamic_cast_or_throw</name>
      <anchorfile>d4/db9/namespaceaikido_1_1constraint.html</anchorfile>
      <anchor>ae4d6b7656f37d1bbb9bd5db8feaa5ad0</anchor>
      <arglist>(TestableOutcome *outcome)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CartesianProductProjectable</name>
    <filename>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</filename>
    <base>aikido::constraint::Projectable</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductProjectable</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>afa67456c9ca9e2a934d241dce777b96a</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _stateSpace, std::vector&lt; ProjectablePtr &gt; _constraints)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>ad39bf002c1c31846b6be965e9741ade4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>a8e7f2d9f0842eb9a02f3b5b0a10bc745</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Projectable</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>aeab18cc3f462922d476dcac255828b4a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>a64d63097d00546bc54888337e0ee43e1</anchor>
      <arglist>(statespace::StateSpace::State *_s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>a57c620810733be0fca2ef0fbef2877c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ProjectablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>d0/d3f/classaikido_1_1constraint_1_1CartesianProductProjectable.html</anchorfile>
      <anchor>a63293dde0bc3fa80789c90da7d601719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CartesianProductSampleable</name>
    <filename>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductSampleable</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a45feee4ff4aa6b8a42f1d7d85ae2f466</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _stateSpace, std::vector&lt; std::shared_ptr&lt; Sampleable &gt;&gt; _constraints)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a0a443b0dbbea0d4f7c1d14d1cf8f2152</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a8070b15735be2db8634ed00b0600f0f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sampleable</name>
      <anchorfile>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</anchorfile>
      <anchor>ac0494ea38e4cca7a47d2227ba1676a03</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a40fa9b96cad2144c56ccbc07de8add99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::shared_ptr&lt; Sampleable &gt; &gt;</type>
      <name>mConstraints</name>
      <anchorfile>d0/def/classaikido_1_1constraint_1_1CartesianProductSampleable.html</anchorfile>
      <anchor>a5ea192348ae631cf25c25ea11912d96b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CartesianProductTestable</name>
    <filename>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductTestable</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a53496a8af495d8bca45753c685e4720c</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _stateSpace, std::vector&lt; TestablePtr &gt; _constraints)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>aff11be9c5dbf4fe2ea85ba97aa2cb4dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a24f3167ad354b6739bfdb7cdb0511989</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a5c54e550d6b1f2ba331d36a96ffc9f3b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Testable</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>ac62b89278e4b325400557e641d20913d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a763abc3d836745ec5ad852078a709a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; TestablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>d2/d10/classaikido_1_1constraint_1_1CartesianProductTestable.html</anchorfile>
      <anchor>a2aeb7705114996634e84a418d2f18707</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::CyclicSampleable</name>
    <filename>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>CyclicSampleable</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a76decf40ee5501f5c7503ebd9739e125</anchor>
      <arglist>(SampleablePtr _sampleable)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a142e6c2ef2088c4aba8887de3c129960</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a4a0f6df5d09881cbd24e8497161dcbf7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mSampleable</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a79ec705d77a607196111ad15033f7d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>dc/d71/classaikido_1_1constraint_1_1CyclicSampleable.html</anchorfile>
      <anchor>a406ca16669b3402bc2f38b82aac68681</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::DefaultTestableOutcome</name>
    <filename>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</filename>
    <base>aikido::constraint::TestableOutcome</base>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>a893f3e43ffcfac214d1faffcaf0a342b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>a920a900b4b0083af362620441a26eced</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSatisfiedFlag</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>adbec6eb1217e9d6fe7ab05970e6942b6</anchor>
      <arglist>(bool satisfiedFlag)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSatisfiedFlag</name>
      <anchorfile>d5/d68/classaikido_1_1constraint_1_1DefaultTestableOutcome.html</anchorfile>
      <anchor>a2ed7f25c6adbc1740665136e97d32ea8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Differentiable</name>
    <filename>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Differentiable</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>af57231c107b176905efae5142dcadc1a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>aed6e612b7355f3dc49dd8bdec9449cb7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>ae765cd0fb411bdb71ca0b19b4ee95c74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>a0822cfc8ff95cd25c95df139450f265f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getValue</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>a58b5a9753b25dd3a2ad72edf50da6f2e</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getJacobian</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>aec4646b8dd435851873ec30bbec277a4</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>d9/d97/classaikido_1_1constraint_1_1Differentiable.html</anchorfile>
      <anchor>ae8de1a4bba1c3ebc116d5c74613e4204</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::DifferentiableIntersection</name>
    <filename>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>DifferentiableIntersection</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a7b811f902255f049e964365c674a7b37</anchor>
      <arglist>(std::vector&lt; DifferentiablePtr &gt; _constraints, statespace::StateSpacePtr _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>aea2fe79b898751d2a9add1d8d730ff81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>aa500ec60be5d36efaaba549a80b0a691</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a7ac6f49b44125e416d64c7f79b0da40d</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a3548568c2b12c54e481b91b0dbd14cf0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a8e01426fdee04a3034b88db6691a08b4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>aeed69d06bf32b3782aa6dcbdb7f372eb</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; DifferentiablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>a29d7f7fa3a65da49bf744d89d6d5972a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; aikido::statespace::StateSpace &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>dc/d45/classaikido_1_1constraint_1_1DifferentiableIntersection.html</anchorfile>
      <anchor>aed8874b11eae0f730be0681f7b8f1375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::DifferentiableSubspace</name>
    <filename>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>DifferentiableSubspace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>ab3e3ef5685951109c20fcc1a8ad18f09</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _stateSpace, DifferentiablePtr _constraint, std::size_t _index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DifferentiableSubspace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a1e323eb161c98dab6105576421a3e3de</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a12e39284aa84f1d924d79fd7b187033c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>aa36256f5a25686f2b4a0baed35114d7b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a457ba79db971a9d66d0ead7ec31adcca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a0a1850d5b62358cd0991a29ff48e7758</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a94f2870395dd053abce407dc6cfd6ce1</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a87ef331aab73638b5f40b2270e262b64</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a66e057c38aff4f04e79e047f1fa9c5ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mConstraint</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>a7f315d64207e66f2fe99d5f6f8c8c2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mIndex</name>
      <anchorfile>d9/de9/classaikido_1_1constraint_1_1DifferentiableSubspace.html</anchorfile>
      <anchor>ab5a74af7fee0afeaf4227e65e0f8903e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::FiniteSampleable</name>
    <filename>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a97fa61f26afd0060d1b493a72b04f98a</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, const statespace::StateSpace::State *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a1e762b9eac4d5e56e4977971f4d83c0e</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, const std::vector&lt; const statespace::StateSpace::State * &gt; &amp;_states)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>af008e2114b515a2b661eba1ea022534c</anchor>
      <arglist>(const FiniteSampleable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a11e386c486fe7669da056bbe509805fc</anchor>
      <arglist>(FiniteSampleable &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>FiniteSampleable &amp;</type>
      <name>operator=</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>afab11c0abcfdb760e6d7cd57f4a85717</anchor>
      <arglist>(const FiniteSampleable &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>FiniteSampleable &amp;</type>
      <name>operator=</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a9510004e888ce739819e2fb5147fcb49</anchor>
      <arglist>(FiniteSampleable &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiniteSampleable</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a18e1c15f130ca6c218595e969dfabbb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a57fae4a29d0e99bcf7a6d396a9139286</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>aa9ccb856968cb629f09536ffb292083a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>a9aec763f83f6b3f7edee51262d8d4ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; statespace::StateSpace::State * &gt;</type>
      <name>mStates</name>
      <anchorfile>d5/d5f/classaikido_1_1constraint_1_1FiniteSampleable.html</anchorfile>
      <anchor>aad11a62afddcecec2c71a8994ef8554c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::NewtonsMethodProjectable</name>
    <filename>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</filename>
    <base>aikido::constraint::Projectable</base>
    <member kind="function">
      <type></type>
      <name>NewtonsMethodProjectable</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a7a3e8722451c0d0b98d96b5ad2767f80</anchor>
      <arglist>(DifferentiablePtr _differentiable, std::vector&lt; double &gt; _tolerance, int _maxIteration=1000, double _minStepSize=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a867d868d2161ea8cb22c29b1b022e0b6</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a76012ffcfc44482b1161510eabeb74de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>acc4c993e990ce952c9eb9ceda71532ad</anchor>
      <arglist>(const statespace::StateSpace::State *_s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mDifferentiable</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a933e8446353ab93a6cb2f9a4d6ca5611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>mTolerance</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a1134fedf5477863e5badb95ce4c1d68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mMaxIteration</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a6d2586b45ccb41b7dfa805d655304b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mMinStepSize</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>a5f4dd5d97e15342654a2544cfad29ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d6/db0/classaikido_1_1constraint_1_1NewtonsMethodProjectable.html</anchorfile>
      <anchor>aa5365f2522ec53da031432f417af8dac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Projectable</name>
    <filename>d1/d26/classaikido_1_1constraint_1_1Projectable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>aef81f239d22f9fd287d055e355b39ef8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>d1/d26/classaikido_1_1constraint_1_1Projectable.html</anchorfile>
      <anchor>ad759802f9a5864781d3b19ba0e1f7aa5</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::RejectionSampleable</name>
    <filename>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>RejectionSampleable</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a48d2c2e7e7d3b6dcbbbfa5a77378e79b</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, SampleablePtr _sampleable, TestablePtr _testable, int _maxTrialPerSample)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a719d57788af2768642471634445f6dd6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a134234236eae28cace753e89107e135d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a33c8299db673e758916ce0912e483ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mSampleable</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>ae6c7d2e9265e38c61444f23b9ca95774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TestablePtr</type>
      <name>mTestable</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>a13d838d1aa4be777bb820529e6962a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mMaxTrialPerSample</name>
      <anchorfile>d9/d54/classaikido_1_1constraint_1_1RejectionSampleable.html</anchorfile>
      <anchor>ae88e3142180589a57c0631f9ec5c1695</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Sampleable</name>
    <filename>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</anchorfile>
      <anchor>a37e6cf3296da12c0408cae9a4fd25349</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>dc/da1/classaikido_1_1constraint_1_1Sampleable.html</anchorfile>
      <anchor>aec69bb8aa4ee5159052d31b522e3ce9c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::SampleGenerator</name>
    <filename>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SampleGenerator</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>afabe63ca4cbe1d053e009c88cf890de1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>a6ac375579e21f5b5d1b96e1e02086e86</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>ac8ff8567b64de788b7981b2d9a3197c2</anchor>
      <arglist>(statespace::StateSpace::State *_state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSamples</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>a6433e0efe17904dfe26e9274aa4ac6ca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canSample</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>ac44789fa2549d4b64b344825978cfb83</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>NO_LIMIT</name>
      <anchorfile>dd/d38/classaikido_1_1constraint_1_1SampleGenerator.html</anchorfile>
      <anchor>a2d7ffa2d54d48c1faeff94eb07faee55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Satisfied</name>
    <filename>da/de2/classaikido_1_1constraint_1_1Satisfied.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <base>aikido::constraint::Projectable</base>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>Satisfied</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a54f43bd8cf97ae0209841a292929bc3e</anchor>
      <arglist>(statespace::StateSpacePtr _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>ae73b83eaf72bb37cbc8a87bd58df0778</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a9580284fa5890daf8efd899c8a47c530</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; constraint::ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>aebc58a6567604f2cee76cec83625b222</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a30eb5cf3ba8ba841048d3481c27453ac</anchor>
      <arglist>(const statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a9551ebebcc7c807efb81a9da972c6dc4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>aff48abf85938a82beac46cf06781ed1b</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>a4f0fbb53656d4c4af28ea1370a094d53</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>ad58d8812911e85d11f44ffbf1b722d72</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>da/de2/classaikido_1_1constraint_1_1Satisfied.html</anchorfile>
      <anchor>aa34ae53ce6bfe63e4d3b2dbd76e238cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::Testable</name>
    <filename>d3/d4c/classaikido_1_1constraint_1_1Testable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>a07ce106362c75ad355947152f61a0105</anchor>
      <arglist>(const statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>a82f5fe79503c14c4163d96edb0d27c67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d3/d4c/classaikido_1_1constraint_1_1Testable.html</anchorfile>
      <anchor>aadaf1edca0ee10ef531a78d6ed71a181</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::TestableIntersection</name>
    <filename>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>TestableIntersection</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a9d93f84295cdcfbf73c875aeb1035c1a</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, std::vector&lt; TestablePtr &gt; _constraints=std::vector&lt; TestablePtr &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a785aabf42dace5ba94cffa867ceb6843</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a53c1e6707c395cd857bd4993fe49ac4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a61daa149a6c300ca8064ca7fa618e700</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a837d30e9cf95cceabe61db0b5c2ef19f</anchor>
      <arglist>(TestablePtr constraint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>testConstraintStateSpaceOrThrow</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a6fb9df22a13cddff0168b3ff485c51d6</anchor>
      <arglist>(const TestablePtr &amp;constraint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a00998d44fdc83d022ac4e91ccc14fbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; TestablePtr &gt;</type>
      <name>mConstraints</name>
      <anchorfile>de/d9e/classaikido_1_1constraint_1_1TestableIntersection.html</anchorfile>
      <anchor>a0402721f0a41db747f6872342755cc13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::TestableOutcome</name>
    <filename>d3/d72/classaikido_1_1constraint_1_1TestableOutcome.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>d3/d72/classaikido_1_1constraint_1_1TestableOutcome.html</anchorfile>
      <anchor>a5410219af626c5607e86b2139c4fed5d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>toString</name>
      <anchorfile>d3/d72/classaikido_1_1constraint_1_1TestableOutcome.html</anchorfile>
      <anchor>ae909d19f5ce5d0525a231bb018bf9d1f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint::dart</name>
    <filename>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</filename>
    <namespace>aikido::constraint::dart::detail</namespace>
    <class kind="class">aikido::constraint::dart::CollisionFree</class>
    <class kind="class">aikido::constraint::dart::CollisionFreeOutcome</class>
    <class kind="class">aikido::constraint::dart::FrameDifferentiable</class>
    <class kind="class">aikido::constraint::dart::FramePairDifferentiable</class>
    <class kind="class">aikido::constraint::dart::FrameTestable</class>
    <class kind="class">aikido::constraint::dart::InverseKinematicsSampleable</class>
    <class kind="class">aikido::constraint::dart::TSR</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CollisionFree &gt;</type>
      <name>CollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a4a19e2641a038515c281e075cb7d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CollisionFree &gt;</type>
      <name>ConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a6f6e3cef5b4b245866ccd85db59179da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; CollisionFree &gt;</type>
      <name>WeakCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a0e0786bb7f6099b23f164626e01c1ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const CollisionFree &gt;</type>
      <name>WeakConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a408c0f83e36fb6bb1d0d29dfecb4e3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CollisionFree &gt;</type>
      <name>UniqueCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af9ba2c24e4883b5b93daaebfeeca1141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const CollisionFree &gt;</type>
      <name>UniqueConstCollisionFreePtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af496650ab9bcf9528aa1049002e97c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSR &gt;</type>
      <name>TSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aa572847b6da671443d87e7624e6c95d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSR &gt;</type>
      <name>ConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a7a923f80cf671fae0a3ba38755b83c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSR &gt;</type>
      <name>WeakTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a050763c953a69a2884a949ab97b1e1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSR &gt;</type>
      <name>WeakConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>abfc263235c9d09e77b0f08c90ca2d8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSR &gt;</type>
      <name>UniqueTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae45921614745a52165c7c75f93cb705d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSR &gt;</type>
      <name>UniqueConstTSRPtr</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ac29b63999d2f200ab823e07e9cb9c18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a98c5eb0198b89b9b80b5b6dd78c326ef</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ab31473e6fa2721102710788489cdc1fa</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a687b2d8e1fda1edac25215480b3a480a</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBoundsFor</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>ae92c5efe49c3a447e9dc6e8f3d9408b8</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>af68fa33da8fd50dcbbc4aaaf2a8bb3a6</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Differentiable &gt;</type>
      <name>createDifferentiableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a4e3979977a0176e524ae812fa2292e91</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a8c8a593062ee91ce7a85dfcf335cbb77</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Projectable &gt;</type>
      <name>createProjectableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a6db8b3446312005ddc3f6a26f319b7e2</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>aef8af303f771a3f31c5ecf1f5751f1bc</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Testable &gt;</type>
      <name>createTestableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a1ff820c1009b11865b608921a9c3eb35</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a0446319013bcb16c67a6d164861d4609</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::JointStateSpace &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Sampleable &gt;</type>
      <name>createSampleableBounds</name>
      <anchorfile>dd/d76/namespaceaikido_1_1constraint_1_1dart.html</anchorfile>
      <anchor>a50221ac10f5f86c8acb1730280519617</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeleton, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::CollisionFree</name>
    <filename>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>CollisionFree</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a2c093ebaae77242428e8d6e6a5056c5f</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace,::dart::dynamics::MetaSkeletonPtr _metaskeleton, std::shared_ptr&lt;::dart::collision::CollisionDetector &gt; _collisionDetector,::dart::collision::CollisionOption _collisionOptions=::dart::collision::CollisionOption(false, 1, std::make_shared&lt;::dart::collision::BodyNodeCollisionFilter &gt;()))</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a6f75abbcdb867e82928a20c7f45c5f27</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a5b326f9fdab7816374067f799607a6b4</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a037deffe4478550b47c14a9a9b12e87d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPairwiseCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a3b586e17f1cf74bc8d2d2acb087b3a25</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group1, std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePairwiseCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a0d7864908c1153119ad916dbe7a1d35c</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group1, std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSelfCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a9e91fc490547e854c1bf7b9c4db60624</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSelfCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a1999a50d5c629dfe5aa8694f18761e8d</anchor>
      <arglist>(std::shared_ptr&lt;::dart::collision::CollisionGroup &gt; _group)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>::dart::collision::CollisionGroup</type>
      <name>CollisionGroup</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>acb160835578078305eeab79a5e22fb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>aee5cb218c3a80492b0147c10822d3997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a92f50c60838b780be48accd43ab9942a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt;::dart::collision::CollisionDetector &gt;</type>
      <name>mCollisionDetector</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>a37b52090bcb11d4069d6b10c6c1508d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionOption</type>
      <name>mCollisionOptions</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>abca9224a7a5ee4a0d160bcf8982f7c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::pair&lt; std::shared_ptr&lt; CollisionGroup &gt;, std::shared_ptr&lt; CollisionGroup &gt; &gt; &gt;</type>
      <name>mGroupsToPairwiseCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>ab7706a5fcef7afe3730e919c297372ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::shared_ptr&lt; CollisionGroup &gt; &gt;</type>
      <name>mGroupsToSelfCheck</name>
      <anchorfile>d5/deb/classaikido_1_1constraint_1_1dart_1_1CollisionFree.html</anchorfile>
      <anchor>ae5f1a6f8c0c892246ded13373edc4cae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::CollisionFreeOutcome</name>
    <filename>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</filename>
    <base>aikido::constraint::TestableOutcome</base>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a1882f5418611476cdcb68b30dbe8cdb6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>ad18edb8a233637d9a70b4607977ccc6e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>ac03fa1f5c065a9821261919820b29bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>getPairwiseContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a8e767161de162bd78e4d0d9ca3d9b281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>getSelfContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>acac4b9be90ef1d7f9fff04dbdf311f14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCollisionObjectName</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a03197a8256e07a33129cc28ad2121010</anchor>
      <arglist>(const ::dart::collision::CollisionObject *object) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>mPairwiseContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a1ba9ed81e15846bd30b8019b8f50cf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt;::dart::collision::Contact &gt;</type>
      <name>mSelfContacts</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>a48d8f9a5d9dbbe8050d98f6b1181a146</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CollisionFree</name>
      <anchorfile>dd/d5a/classaikido_1_1constraint_1_1dart_1_1CollisionFreeOutcome.html</anchorfile>
      <anchor>aa17355bc414f840bda5593cb27be4f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::FrameDifferentiable</name>
    <filename>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>FrameDifferentiable</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a620762e7449f1549519311ef31802969</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace,::dart::dynamics::MetaSkeletonPtr _metaskeleton,::dart::dynamics::ConstJacobianNodePtr _jacobianNode, DifferentiablePtr _poseConstraint)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a8eb45de0db2b11343e201fb8a74e31a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a52595e5c2854560c4637d1837ddf77f7</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a1e83d25f4c48fa5b0e43c5d5baee9572</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>aa9facbe8a906e5098cba53c82a66750f</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>afd8c806e4efa5f612318ef0dc0d00763</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a242af391255bcd12fba453d492721e44</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a53ffd430924dff1ca2ae23eeaacd687f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>a618cfa30cc2618c9460ea3b7a2e166d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mJacobianNode</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>acbf10f915aab95092bc24681c85d799d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mPoseConstraint</name>
      <anchorfile>de/dad/classaikido_1_1constraint_1_1dart_1_1FrameDifferentiable.html</anchorfile>
      <anchor>ae249c8f4f3d549214524ae3e7d95c414</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::FramePairDifferentiable</name>
    <filename>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</filename>
    <base>aikido::constraint::Differentiable</base>
    <member kind="function">
      <type></type>
      <name>FramePairDifferentiable</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a985fc1f87507d352a74466d30a4ff02f</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace,::dart::dynamics::MetaSkeletonPtr _metaskeleton,::dart::dynamics::ConstJacobianNodePtr _jacobianNodeTarget,::dart::dynamics::ConstJacobianNodePtr _jacobianNodeBase, DifferentiablePtr _relPoseConstraint)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>ad2eb65429eb696181e017ea54f22b5bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a90b58a310e201ac3390158da0200fa02</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a84e7166de57101e5b68527a17df84b22</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAndJacobian</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a4869913590b92bd1d8f4537e3fa761cc</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_val, Eigen::MatrixXd &amp;_jac) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>aae4c55caa319c52de0d5e900eb3e4b97</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>ab20badca5e512e9ea4b6c00d549b2599</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>ade30731046de8d71ffe596ee4bfa0fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a375c3c0cb56a9bba0eafe7ec4205655c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mJacobianNode1</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a820a15114385a7d6cc1bc6a304f17657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mJacobianNode2</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>ae71cdd6d569eb94cec1b187c1748430d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DifferentiablePtr</type>
      <name>mRelPoseConstraint</name>
      <anchorfile>d8/d6e/classaikido_1_1constraint_1_1dart_1_1FramePairDifferentiable.html</anchorfile>
      <anchor>a666b8b6174be39d152a2134ee20e1a92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::FrameTestable</name>
    <filename>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</filename>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>FrameTestable</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a7dada0e2530acc5f2619d3337b18f652</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace,::dart::dynamics::MetaSkeletonPtr _metaskeleton,::dart::dynamics::ConstJacobianNodePtr _frame, TestablePtr _poseConstraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>ae9cbbef67f91c15905d109f46fefcd3f</anchor>
      <arglist>(const statespace::StateSpace::State *_state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a65cd77f45ab302b233834785263c9242</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; statespace::StateSpace &gt;</type>
      <name>getStateSpace</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a9bacc2c1419cea95014c69433d37a998</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a40c71bbdc5502f1b6fa816db56a281a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a2f7a1965c4c9c1dccdac0d285ed2c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ConstJacobianNodePtr</type>
      <name>mFrame</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a9220bfd6cbcab76ce0fe2f5ac73b06e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TestablePtr</type>
      <name>mPoseConstraint</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a819f95acd2d4dcb9c00ba8a9de77c68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SE3 &gt;</type>
      <name>mPoseStateSpace</name>
      <anchorfile>d7/d7e/classaikido_1_1constraint_1_1dart_1_1FrameTestable.html</anchorfile>
      <anchor>a15919b38be4ecf82405b35989c4f1b1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::InverseKinematicsSampleable</name>
    <filename>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>InverseKinematicsSampleable</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a9a27e3cc48115b939698f175a0b43b3a</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _metaSkeletonStateSpace,::dart::dynamics::MetaSkeletonPtr _metaskeleton, SampleablePtr _poseConstraint, SampleablePtr _seedConstraint,::dart::dynamics::InverseKinematicsPtr _inverseKinematics, int _maxNumTrials)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseKinematicsSampleable</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>ac27834729b4adc749842083ad57e387e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>afa93ae5f94a397dc47a8db29882bf41f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>aaa050fe9e88615de2326125320733523</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>ad47df847e0bb5eca667a3861e442f509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a75651699d0cdfe6c8a8bc132b659e93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mPoseConstraint</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a8f601735f3db74c67ed7e925cf9a470c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SampleablePtr</type>
      <name>mSeedConstraint</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a3bed7a6f35228da481ccc29c1f886e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::InverseKinematicsPtr</type>
      <name>mInverseKinematics</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a35d9e66fe99540d79605d3cb48915f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mMaxNumTrials</name>
      <anchorfile>d5/d01/classaikido_1_1constraint_1_1dart_1_1InverseKinematicsSampleable.html</anchorfile>
      <anchor>a4ecc6352b32f208651366f9317d701f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::dart::TSR</name>
    <filename>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <base>aikido::constraint::Differentiable</base>
    <base>aikido::constraint::Testable</base>
    <base>aikido::constraint::Projectable</base>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>abf31e6c9b6d2b426a286cca3fd1f367a</anchor>
      <arglist>(std::unique_ptr&lt; common::RNG &gt; _rng, const Eigen::Isometry3d &amp;_T0_w=Eigen::Isometry3d::Identity(), const Eigen::Matrix&lt; double, 6, 2 &gt; &amp;_Bw=Eigen::Matrix&lt; double, 6, 2 &gt;::Zero(), const Eigen::Isometry3d &amp;_Tw_e=Eigen::Isometry3d::Identity(), double _testableTolerance=1e-6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ab3db546a484f61a567fdb13ce8b7408b</anchor>
      <arglist>(const Eigen::Isometry3d &amp;_T0_w=Eigen::Isometry3d::Identity(), const Eigen::Matrix&lt; double, 6, 2 &gt; &amp;_Bw=Eigen::Matrix&lt; double, 6, 2 &gt;::Zero(), const Eigen::Isometry3d &amp;_Tw_e=Eigen::Isometry3d::Identity(), double _testableTolerance=1e-6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a0e7c81a6e91752a887babf08fec5794b</anchor>
      <arglist>(const TSR &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a81691abb51b9c89c5182e32e5ff6e8dc</anchor>
      <arglist>(TSR &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TSR &amp;</type>
      <name>operator=</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a12451a4bf0795aa30dfd0fc68e28851b</anchor>
      <arglist>(const TSR &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TSR &amp;</type>
      <name>operator=</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a8df722bbe00f5bec038121f7f50a71dc</anchor>
      <arglist>(TSR &amp;&amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TSR</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a88c5481809695c9941cbb20ab26ade95</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a73d552c5d10196c809fbc187615f5a21</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; statespace::SE3 &gt;</type>
      <name>getSE3</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a78a97fd88b7ecd07cf156796b8295f29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ab5d0b928bf6dcb12e91ef046e7e74a12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>aeb10f9f83465c69e13ac9afd28c2be1b</anchor>
      <arglist>(const statespace::StateSpace::State *_s, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>adfd5a2d1cd15b1e04392830ba45525d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a6fa7c21b765c546b0081f8ac905c2614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRNG</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a6d89e4d6f0777da936baeeb250c1ff5b</anchor>
      <arglist>(std::unique_ptr&lt; common::RNG &gt; rng)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a144bd5d6cf7413dfbf6aa41621513952</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>af3ba27dc03b7d87f144768e66dd652b9</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ab1c0f080c9dbc67c75e29c9724045201</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ac3b6d25b48a1adb28369b12c19e7f93f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a13d5b6b27335d75a76f6e8bb8116e120</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTestableTolerance</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>aa0b2fb745c56a99439cc16f7504e09e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTestableTolerance</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>ac91a357176b65925915c0b49df7db08d</anchor>
      <arglist>(double _testableTolerance)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Isometry3d</type>
      <name>mT0_w</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a421456fef44f972eda67e0cab037cbe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Matrix&lt; double, 6, 2 &gt;</type>
      <name>mBw</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a3927aa252cd9a1f4eb9e1758ad930b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Isometry3d</type>
      <name>mTw_e</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a249434aba4cb3737be70a7ab5e05240a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mTestableTolerance</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a2ede0d2cd3881eb96e3c2a0212c9a723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a8a95b2589152faad7ac8a29f814a16fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SE3 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>da/d99/classaikido_1_1constraint_1_1dart_1_1TSR.html</anchorfile>
      <anchor>a55370ae321e28d4c481b6eb540f7c7d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint::dart::detail</name>
    <filename>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</filename>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SO2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SO3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SE2Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SE3Joint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <class kind="struct">aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::WeldJoint &gt;</class>
    <member kind="typedef">
      <type>common::type_list&lt; statespace::dart::R0Joint, statespace::dart::R1Joint, statespace::dart::R2Joint, statespace::dart::R3Joint, statespace::dart::R6Joint, statespace::dart::SO2Joint, statespace::dart::SO3Joint, statespace::dart::SE2Joint, statespace::dart::SE3Joint, statespace::dart::WeldJoint &gt;</type>
      <name>JointStateSpaceTypeList</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>aa2ef96897817dae96aa822579615a945</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>acb9755232157469768edc6f955c76f08</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::RJoint&lt; N &gt;&gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a5ff86a443d6e52db73d6ec3f3c0821e7</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::SE2Joint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; OutputConstraint &gt;</type>
      <name>createBoxConstraint</name>
      <anchorfile>d4/d73/namespaceaikido_1_1constraint_1_1dart_1_1detail.html</anchorfile>
      <anchor>a83a7d8b037e9f5568f4db6ca58f42094</anchor>
      <arglist>(std::shared_ptr&lt; statespace::dart::WeldJoint &gt; _stateSpace, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl</name>
    <filename>d9/d4f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl</name>
    <filename>d0/d6f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl</name>
    <filename>d0/d90/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl</name>
    <filename>dd/dc6/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>db/dae/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>db/dae/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>af8b1539b182ed52f202cb1b6d568b88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>db/dae/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a5cc512b62eaeef5e77e236d9579a0e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>db/dae/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a4431c87c8f4745d12ee541a39e335b26</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>da/db5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>da/db5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a691fb9cb3c0978b20cff45f2344534b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>da/db5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a1adf0be05010977af8db267fcb6aee1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>da/db5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>ac58ffb263bd21cef2975481a39ac2773</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>da/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>da/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a64b955bf60c3e5f6e0772ac4bbdd172e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>da/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>aae525cbfa2a5578d62ecf473992f873b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>da/d11/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>afcb0a0a621db79c6af33731ecfc9b2c1</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::RJoint&lt; N &gt; &gt;</name>
    <filename>d1/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>statespace::dart::RJoint&lt; N &gt;</type>
      <name>StateSpace</name>
      <anchorfile>d1/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>a03cf3a769edd31f31f1ccff8fc3a5008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d1/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>ac3ddc720d5087c3342d15bd41fd5f875</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>d1/d28/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1RJoint_3_01N_01_4_01_4.html</anchorfile>
      <anchor>ab63b6948ef8375e639b4daa57caef626</anchor>
      <arglist>(StateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SO2Joint &gt;</name>
    <filename>d4/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d4/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>ac0fb8366e71cc1b55102bedce1e46d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d4/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>ad54dd9efc336567e6639bad38104dffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>d4/dfa/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>ad7643571f71bd02f1eef89117080fc72</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SO2Joint &gt;</name>
    <filename>d0/d6e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d0/d6e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>ad4f4bc181af60b9103822f92e8a1ab55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d0/d6e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>ad37cc9c75bb6f497049e0c8491a34373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d0/d6e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a60305679f6370a4e43a9d6781e10bd4f</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SO2Joint &gt;</name>
    <filename>d3/db9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d3/db9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>aa57e844934faefd35f1a421e8a48bed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d3/db9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>afb587a6d9fa1374c709a044bfec001e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>d3/db9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a5bf1f57af76775c7965187d520cc7d49</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SO2Joint &gt;</name>
    <filename>df/d0b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO2Joint</type>
      <name>StateSpace</name>
      <anchorfile>df/d0b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>a4577e432ceeff10f8cbaa06201a294ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>df/d0b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>ad7e222aa7084e591b892e90c0ee2560e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>df/d0b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO2Joint_01_4.html</anchorfile>
      <anchor>aa25450bfbcddfe1918e66036f46dd950</anchor>
      <arglist>(StateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SO3Joint &gt;</name>
    <filename>d7/df9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d7/df9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a458cc57970ffd6824bf6b43dbecf4787</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d7/df9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a8df2f24f598def777314c9d432133cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>d7/df9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a4d6443bd7da1883effdcfea283a86f2a</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SO3Joint &gt;</name>
    <filename>d3/dd1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d3/dd1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a313873c79872f18752960061b2dd75fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d3/dd1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>ad7ed791f9a2c2d9eb5aa45308d2583e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d3/dd1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>aabd0433710fda620a63621e41ae08ff7</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SO3Joint &gt;</name>
    <filename>db/d44/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>db/d44/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a98f0f19513ea4b47142b6627187f26ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>db/d44/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a7af5aa3a57f14af14bd69f4e93529007</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>db/d44/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a46bbd8326dc161673ea9a897fe438a59</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SO3Joint &gt;</name>
    <filename>d3/d39/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SO3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d3/d39/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>abe78d5f6bf36f5f95f07776ade54884d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d3/d39/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>ab974bc5514f1d0ead463a41f1b7003b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>d3/d39/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SO3Joint_01_4.html</anchorfile>
      <anchor>a0c3b5f73ea6f4d24dbb9b8af08066800</anchor>
      <arglist>(StateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SE2Joint &gt;</name>
    <filename>db/d4b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>db/d4b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>ab24780d49aaf02a4a1b453c0a85f433a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>db/d4b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a6cbdf596ba62e705d4b268da5565df41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>db/d4b/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a86cb155a301ac4e35ff9a9e5c94ebf8b</anchor>
      <arglist>(StateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SE2Joint &gt;</name>
    <filename>df/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>df/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a31c099a94f03b1654c0a87a2f6f387b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>df/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a2a7eb9854794140191d5835de33d694a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>df/de1/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>ac32b80aab4cdb0464f3f02de03aa8f30</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SE2Joint &gt;</name>
    <filename>dc/d45/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>dc/d45/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a1c921919bb7f6aeb8f62f22440f90317</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>dc/d45/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a1797cfefc0fc7e075c1c97f7744deda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>dc/d45/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>adc0655de87863d414c27a31c6c6d3440</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SE2Joint &gt;</name>
    <filename>d5/d4f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE2Joint</type>
      <name>StateSpace</name>
      <anchorfile>d5/d4f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>ae6d90fa6640df7243e0e79a4032c75a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d5/d4f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a51023db3efabdf60104bc9b360881119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>d5/d4f/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE2Joint_01_4.html</anchorfile>
      <anchor>a3b3013c9e992d5033dddaac531199f11</anchor>
      <arglist>(StateSpacePtr stateSpace, std::unique_ptr&lt; common::RNG &gt; rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::SE3Joint &gt;</name>
    <filename>dd/dc2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>dd/dc2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>abf37890c6b509d64335213532daef3da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>dd/dc2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>acf3c61d89170c5f9d97f64ba8eb9d26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>dd/dc2/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a9e54f3f13236071d24adc733f693edd0</anchor>
      <arglist>(StateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::SE3Joint &gt;</name>
    <filename>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a682e3b0d3717ea5fc1ea5ceb01b32b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>af1fcabcb536319b78698704d5dd126cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d7/d60/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>ad21fb2dc57bdfb15686637145d6d19a9</anchor>
      <arglist>(StateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::SE3Joint &gt;</name>
    <filename>db/d9e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>db/d9e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a94b5e90686900718dca2db09641c7202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>db/d9e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a48a0d28cbdf9150d2cc69adda1234109</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>db/d9e/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a305faa34be09d46880a5ea9cffb6e341</anchor>
      <arglist>(StateSpacePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::SE3Joint &gt;</name>
    <filename>db/d41/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::SE3Joint</type>
      <name>StateSpace</name>
      <anchorfile>db/d41/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a80c6a9b758a7437317c4b1538a6c2543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>db/d41/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>a6d41cf9f0e4c1c84b411a6cd20348f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>db/d41/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1SE3Joint_01_4.html</anchorfile>
      <anchor>ad6221a873e83f3b11bd5eca2fe2df148</anchor>
      <arglist>(StateSpacePtr, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createDifferentiableFor_impl&lt; statespace::dart::WeldJoint &gt;</name>
    <filename>d6/dd6/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>d6/dd6/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a087bf9ebb9fe11e34b17e5cf69d3c36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d6/dd6/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>add6dd1723fec33668cff4d1e3e0249cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Differentiable &gt;</type>
      <name>create</name>
      <anchorfile>d6/dd6/structaikido_1_1constraint_1_1dart_1_1detail_1_1createDifferentiableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>adeb3d4d7da226f6377e88612d57a2375</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createTestableFor_impl&lt; statespace::dart::WeldJoint &gt;</name>
    <filename>d9/dc5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>d9/dc5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a6bf6d79d53beebcdf60ca325017d17f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d9/dc5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a04f85d30ed90ffb08c370d5acad55346</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Testable &gt;</type>
      <name>create</name>
      <anchorfile>d9/dc5/structaikido_1_1constraint_1_1dart_1_1detail_1_1createTestableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a99c2f6bf26ad8ca26b64dadc241b34c7</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createProjectableFor_impl&lt; statespace::dart::WeldJoint &gt;</name>
    <filename>d1/d37/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>d1/d37/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>ac9bdead5fd5a101feb9256b0e2ceebf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d1/d37/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>afa3d4daf8975479752ff5da19f7503b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Projectable &gt;</type>
      <name>create</name>
      <anchorfile>d1/d37/structaikido_1_1constraint_1_1dart_1_1detail_1_1createProjectableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a3eababaa6fe4ef00c7631559c37fe8a2</anchor>
      <arglist>(StateSpacePtr _stateSpace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::constraint::dart::detail::createSampleableFor_impl&lt; statespace::dart::WeldJoint &gt;</name>
    <filename>dc/da9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</filename>
    <member kind="typedef">
      <type>statespace::dart::WeldJoint</type>
      <name>StateSpace</name>
      <anchorfile>dc/da9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a65aa4640a206cc1558663d5a4dc8598c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>dc/da9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>a70026a9cee4046f0c5dd46055ec4df2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Sampleable &gt;</type>
      <name>create</name>
      <anchorfile>dc/da9/structaikido_1_1constraint_1_1dart_1_1detail_1_1createSampleableFor__impl_3_01statespace_1_1dart_1_1WeldJoint_01_4.html</anchorfile>
      <anchor>ac2f80be1a68df3351fd4d804443012a6</anchor>
      <arglist>(StateSpacePtr _stateSpace, std::unique_ptr&lt; common::RNG &gt;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::constraint::uniform</name>
    <filename>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</filename>
    <class kind="class">aikido::constraint::uniform::RnBoxConstraintSampleGenerator</class>
    <class kind="class">aikido::constraint::uniform::RBoxConstraint</class>
    <class kind="class">aikido::constraint::uniform::RConstantSampler</class>
    <class kind="class">aikido::constraint::uniform::SE2BoxConstraint</class>
    <class kind="class">aikido::constraint::uniform::SO2UniformSampler</class>
    <class kind="class">aikido::constraint::uniform::SO3UniformSampler</class>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 0 &gt;</type>
      <name>R0BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a74032c1d1178f4ea82048f8fd836ea4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 1 &gt;</type>
      <name>R1BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>aadfe7b44198259068917c68b5f6fea75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 2 &gt;</type>
      <name>R2BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afcaa3818f8d20494fcf01831387ef3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 3 &gt;</type>
      <name>R3BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a51c8f4d5b54f9e62c27392f7257d9163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; 6 &gt;</type>
      <name>R6BoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a78a0dfe4176e2c9ac1ecf20d14cec6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RBoxConstraint&lt; Eigen::Dynamic &gt;</type>
      <name>RnBoxConstraint</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a612fb574a8d316320865a9f0cde66a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 0 &gt;</type>
      <name>R0ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a7d4666e1982865003824e4f0913f3438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 1 &gt;</type>
      <name>R1ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a6466649294e62304a68331de6b162029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 2 &gt;</type>
      <name>R2ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>ae82ef22f973a9f69c34d3175d4688058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 3 &gt;</type>
      <name>R3ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a30a8a6c822c0a4cdf194f5a36260dd51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; 6 &gt;</type>
      <name>R6ConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>a1a99697ca5449aa670f31b1395ee7905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RConstantSampler&lt; Eigen::Dynamic &gt;</type>
      <name>RnConstantSampler</name>
      <anchorfile>d4/d71/namespaceaikido_1_1constraint_1_1uniform.html</anchorfile>
      <anchor>afe45e1c61b9184dd8e55bb8244f85c25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::RnBoxConstraintSampleGenerator</name>
    <filename>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</filename>
    <templarg>N</templarg>
    <base>aikido::constraint::SampleGenerator</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a007228a7d05be63aa8449a02e45ee679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a0341b3aa9421cb692c3287502f33acac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a1909b7ecf0696794f7ffc9cd065971ae</anchor>
      <arglist>(statespace::StateSpace::State *_state) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSamples</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a3a797b1891a463e27d29a54f2b278147</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSample</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>aa05bb0518b6126410ac78977b97a42d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RnBoxConstraintSampleGenerator</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>acc5e01ace452b91ff6c228d5217e8bfc</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R&lt; N &gt;&gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng, const VectorNd &amp;_lowerLimits, const VectorNd &amp;_upperLimits)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::R&lt; N &gt; &gt;</type>
      <name>mSpace</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>aa9c006795b812f1c2ae11c5147b3ffdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a0163c5af3e7cbbdfcad04e1871b0fd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::uniform_real_distribution&lt; double &gt; &gt;</type>
      <name>mDistributions</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>a06d2b3e7a07bbbf19dfafe95743616b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RBoxConstraint&lt; N &gt;</name>
      <anchorfile>d2/db6/classaikido_1_1constraint_1_1uniform_1_1RnBoxConstraintSampleGenerator.html</anchorfile>
      <anchor>ab7e9f0c3f6de62cc4bc7cdaf871dd054</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::RBoxConstraint</name>
    <filename>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</filename>
    <templarg>N</templarg>
    <base>aikido::constraint::Differentiable</base>
    <base>aikido::constraint::Projectable</base>
    <base>aikido::constraint::Sampleable</base>
    <base>aikido::constraint::Testable</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>ac46ad3e7f6fc798e8364f3b6ac299ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RBoxConstraint</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a8157da72d64d7baac68be414dcf0de38</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R&lt; N &gt;&gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng, const VectorNd &amp;_lowerLimits, const VectorNd &amp;_upperLimits)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>acd83767a9394773335f563e8d6e813a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getConstraintDimension</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>aa0d52a8098a36512187fccdc12ef9030</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; constraint::ConstraintType &gt;</type>
      <name>getConstraintTypes</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a81e2cd8f043fb943b480cb6602fa80d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a4fe9e683e38b58b9b554025f39c848ef</anchor>
      <arglist>(const statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a97cbcb53221631b413f9146537fda044</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>aca8f3ead581b7481ab5f73e543c754bf</anchor>
      <arglist>(const statespace::StateSpace::State *_s, statespace::StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a2187a9895f6fe0bc08d620262bb0862c</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::VectorXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getJacobian</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a1c9138f108cab6b28fb4b91702e35e0c</anchor>
      <arglist>(const statespace::StateSpace::State *_s, Eigen::MatrixXd &amp;_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a5f2dae228b6dd059a321df45db453e4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getLowerLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a8549c6cab947391c39d81a0adbd92d04</anchor>
      <arglist>() const -&gt; const VectorNd &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getUpperLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>ae8f570a6ea78517bac239c548ad3138c</anchor>
      <arglist>() const -&gt; const VectorNd &amp;</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::R&lt; N &gt; &gt;</type>
      <name>mSpace</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>ac58b28aecf1b5787efe53209aee1f60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a0da5cfbd0d61f5556b0733a6e9144823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorNd</type>
      <name>mLowerLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a187e8b63de09c0b757ab8d89803547d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorNd</type>
      <name>mUpperLimits</name>
      <anchorfile>d4/d19/classaikido_1_1constraint_1_1uniform_1_1RBoxConstraint.html</anchorfile>
      <anchor>a5aaa9a7c971e9287c46a7a9f9039bbaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::RConstantSampler</name>
    <filename>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</filename>
    <templarg>N</templarg>
    <base>aikido::constraint::Sampleable</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>abd2d29c294535c1c255c99ee7edde7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RConstantSampler</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>a878c1a2ec5dbaa46e632e58b8500ff77</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R&lt; N &gt;&gt; _space, const VectorNd &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>a60bf82335bf3da525d3d48faea925a9f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>ad04ff4f70c871f21c365c44dd78a38cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const VectorNd &amp;</type>
      <name>getConstantValue</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>acd7fc9927a435df825ed03e19d8eb981</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::R&lt; N &gt; &gt;</type>
      <name>mSpace</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>ad69703f5e624fae855f00811e892a551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorNd</type>
      <name>mValue</name>
      <anchorfile>db/d5b/classaikido_1_1constraint_1_1uniform_1_1RConstantSampler.html</anchorfile>
      <anchor>a9c326500da5b0a6f5ed9a2cacc14386f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::SE2BoxConstraint</name>
    <filename>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</filename>
    <base>aikido::constraint::Projectable</base>
    <base>aikido::constraint::Sampleable</base>
    <base>aikido::constraint::Testable</base>
    <member kind="function">
      <type></type>
      <name>SE2BoxConstraint</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>afba1aa29abffc3b08b1ce015a2ffaa65</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SE2 &gt; space, std::unique_ptr&lt; common::RNG &gt; rng, const Eigen::Vector2d &amp;lowerLimits, const Eigen::Vector2d &amp;upperLimits)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>afb1ea31a8bd78040afe0872fd3e499a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a19292ab2ef66a0fa1a0858756b64f37d</anchor>
      <arglist>(const statespace::StateSpace::State *state, TestableOutcome *outcome=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TestableOutcome &gt;</type>
      <name>createOutcome</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a13c8fe0f81e60e433378a4cd5c3143a5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>af536ab967c9dde59ba84b047a4874c12</anchor>
      <arglist>(const statespace::StateSpace::State *s, statespace::StateSpace::State *out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a089ee5f7cec6ec45cb01e2332bc67755</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>getLowerLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a044ecb79575d8e87c1255fd1483ac804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>getUpperLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a0c1122b03ac1866d8fdcaf8c872820c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SE2 &gt;</type>
      <name>mSpace</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>aee8127b6cfb85e8df593e1852007f6cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a443004c4b4503848b225c196cc3c01c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>mLowerLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a9a472b336d779e2a64882d89ae254512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector3d</type>
      <name>mUpperLimits</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a7787a612257012b6608f684d9d6a5418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mRnDimension</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a1268f8e78c2972430a85c645be899c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mDimension</name>
      <anchorfile>da/daf/classaikido_1_1constraint_1_1uniform_1_1SE2BoxConstraint.html</anchorfile>
      <anchor>a63c83780ca7ce21f92974352758301bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::SO2UniformSampler</name>
    <filename>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>SO2UniformSampler</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>ac7bc55f901ad98a87aea46e21db0a748</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SO2 &gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>ab599f01ee9874b67b115a30df7350700</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>a2862161abf678198885016772267344d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SO2 &gt;</type>
      <name>mSpace</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>ab03bca5843c71d81f96d378821d6c8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>df/d06/classaikido_1_1constraint_1_1uniform_1_1SO2UniformSampler.html</anchorfile>
      <anchor>a0a7c7e29dc88beeb823bfc1db622177c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::constraint::uniform::SO3UniformSampler</name>
    <filename>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</filename>
    <base>aikido::constraint::Sampleable</base>
    <member kind="function">
      <type></type>
      <name>SO3UniformSampler</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>afbe2841a75b8512355c15e48086f8478</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SO3 &gt; _space, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>a4d246b46b62206621fe03f1459a1334c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>createSampleGenerator</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>aaed2ea6036f1a787368e7e8a0f20b896</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SO3 &gt;</type>
      <name>mSpace</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>a29790fefa154e741d8f250adda3a6e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>de/d8a/classaikido_1_1constraint_1_1uniform_1_1SO3UniformSampler.html</anchorfile>
      <anchor>a5b800430a73d88564c3047e2aebf8c5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::control</name>
    <filename>d9/daa/namespaceaikido_1_1control.html</filename>
    <namespace>aikido::control::ros</namespace>
    <class kind="class">aikido::control::BarrettFingerKinematicSimulationPositionCommandExecutor</class>
    <class kind="class">aikido::control::BarrettFingerKinematicSimulationSpreadCommandExecutor</class>
    <class kind="class">aikido::control::BarrettHandKinematicSimulationPositionCommandExecutor</class>
    <class kind="class">aikido::control::InstantaneousTrajectoryExecutor</class>
    <class kind="class">aikido::control::KinematicSimulationTrajectoryExecutor</class>
    <class kind="class">aikido::control::PositionCommandExecutor</class>
    <class kind="class">aikido::control::QueuedTrajectoryExecutor</class>
    <class kind="class">aikido::control::TrajectoryExecutor</class>
    <class kind="class">aikido::control::TrajectoryResult</class>
    <class kind="class">aikido::control::TrajectoryRunningException</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>BarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6c14c53cb9910c69ead5c1234f348d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>ConstBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a04d30dbf53c19f0022a2959d0bfb0097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a3e03cf73ed55f6d064f036573787594a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakConstBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a2972c6da3dc273cb910bdc4c34892696</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a48491cad4fcee7f29688116763931e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BarrettFingerKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueConstBarrettFingerKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ae3c35554b54bdaab1c1950c5fa1d876d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>BarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>abeea13913a1cc5b6e1c0363444f8651c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>ConstBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a27ec452aacdd9e9c6323107eb545b170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>WeakBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a34b6473fa41c0004dd250d414a4585c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>WeakConstBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a51ed018423ce1deb1c9b3d5338ff3044</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>UniqueBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1ac446ae9d8d21e57372515e248a943d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BarrettFingerKinematicSimulationSpreadCommandExecutor &gt;</type>
      <name>UniqueConstBarrettFingerKinematicSimulationSpreadCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1e97e1cd93c41a7e0efb490e390afb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>BarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ae5b4c9525a1038c6a9c84070d736cdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>ConstBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a9d2ffab5b198b3787ef825321107f919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>aeda747a56eba82f31ad1c63349cd2bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>WeakConstBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af6a3e0cc39957b0d406d0f7f6cd3ab65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ab6b776934858fd2c63307a14152c44a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BarrettHandKinematicSimulationPositionCommandExecutor &gt;</type>
      <name>UniqueConstBarrettHandKinematicSimulationPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>acb8e601f305e37f099708a86da98e55b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>PositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a88d847e44672c3db371d8507f6a69599</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>ConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8fcca9aa9bb24048a3a95cecc821afc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>WeakPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6555b6acf0a36aa8fdda6d7fb9c81af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>WeakConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a67a1c05b63331eb86ec434e27fb66c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PositionCommandExecutor &gt;</type>
      <name>UniquePositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a526e3e5f3195b3c6372506a22c6b4e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const PositionCommandExecutor &gt;</type>
      <name>UniqueConstPositionCommandExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a107dce219a6fb867cc66636fa85ba248</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>TrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a6cd6ce65058e69bbb77911fdbb13bca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>ConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a60109b41f290e36c59d8d609bb384ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>WeakTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af37f4572e010e770b185b52b2bdbbc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>WeakConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>aff1a075c0818cd34033494dd05c08583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>UniqueTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8982dfe576a145810192301598dc9319</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryExecutor &gt;</type>
      <name>UniqueConstTrajectoryExecutorPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>af44c2673d069625938196c5d1efdb2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryResult &gt;</type>
      <name>TrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1908080933ac626b49500769167b431e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryResult &gt;</type>
      <name>ConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>ad76541d345e94209212a677ae58e73aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryResult &gt;</type>
      <name>WeakTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a9910229097d6c47680558ac665ac778a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryResult &gt;</type>
      <name>WeakConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a8a7c3f720d4bd9fe680338bff028f967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryResult &gt;</type>
      <name>UniqueTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a54b618752dd91f3077a442e6b3aa897f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryResult &gt;</type>
      <name>UniqueConstTrajectoryResultPtr</name>
      <anchorfile>d9/daa/namespaceaikido_1_1control.html</anchorfile>
      <anchor>a1eecbc5b44e957430f5bfb212c723618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::BarrettFingerKinematicSimulationPositionCommandExecutor</name>
    <filename>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</filename>
    <base>aikido::control::PositionCommandExecutor</base>
    <member kind="function">
      <type></type>
      <name>BarrettFingerKinematicSimulationPositionCommandExecutor</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a36d73a2d1671afec59ca74ec02830329</anchor>
      <arglist>(::dart::dynamics::ChainPtr finger, std::size_t proximal, std::size_t distal,::dart::collision::CollisionDetectorPtr collisionDetector=nullptr,::dart::collision::CollisionGroupPtr collideWith=nullptr,::dart::collision::CollisionOption collisionOptions=::dart::collision::CollisionOption(false, 1))</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a2e516fe6fcf96f118370bd1e8cf5bcd5</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPosition) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ad2000ac49b61d55d2a431e341a6c6e0e</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCollideWith</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a0bf6693a0d085559dd43e9a9adb481cc</anchor>
      <arglist>(::dart::collision::CollisionGroupPtr collideWith)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PositionCommandExecutor</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>a52fd19e414bc2eabc5c4d5e92c53db05</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr double</type>
      <name>getMimicRatio</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a4d7e5304fd8e862ae46f3f527cfa23d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setFingerCollisionGroup</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a448275712bfe761acdf098d34b228e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ac2f0d0f64ab8c2f470ab37cffcbacfb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::ChainPtr</type>
      <name>mFinger</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ace7e730abfe42c751969dc4115c3a9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::DegreeOfFreedom *</type>
      <name>mProximalDof</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a7b1fed32bfde69d3d56e6b2845484383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::DegreeOfFreedom *</type>
      <name>mDistalDof</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a51392c31701c765d9019c9c0eb177b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>mProximalLimits</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a7b477e00d5d66b21cbdf530eff6bbbda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>mDistalLimits</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>aa2932aa8d3cb52d39712c2e4cc804e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionDetectorPtr</type>
      <name>mCollisionDetector</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a9a781d42a9a42aed4059a236e9007dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionGroupPtr</type>
      <name>mCollideWith</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>aa1333259f71f20ff115d91f2f93421e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionOption</type>
      <name>mCollisionOptions</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a69ce8b842899cd956d3106574f4949dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionGroupPtr</type>
      <name>mProximalCollisionGroup</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a3fec9f15a3f670dc9672100c12324c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionGroupPtr</type>
      <name>mDistalCollisionGroup</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>afa6d4d431b2d31e6a03af005ad70f017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mProximalGoalPosition</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ad8c072b87c490469dc3faed3bcd997f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mDistalGoalPosition</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a759c57cf86373ed6f187f760add820b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mDistalOnly</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>aa190f8db00d36e3ca1428d33c6a7075e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a8c70fdd305d5f3dd9604d61087cf00c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a4b1da7428fca41c3c217b3911bda4be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a6c011dc6e06e350893491fe3fa454c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>kMimicRatio</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ada9937b9a7ba06001f0c617ea6fb56f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>kProximalSpeed</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ae09c1bc88e30e9be4041f0b7c197e819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>kDistalSpeed</name>
      <anchorfile>d6/d8b/classaikido_1_1control_1_1BarrettFingerKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a4c3e1443265e88ac4e94715eb2e66c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::chrono::system_clock::time_point</type>
      <name>mTimeOfPreviousCall</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>aa09708704dcc6443c6604239d3af6d83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::BarrettFingerKinematicSimulationSpreadCommandExecutor</name>
    <filename>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</filename>
    <base>aikido::control::PositionCommandExecutor</base>
    <member kind="function">
      <type></type>
      <name>BarrettFingerKinematicSimulationSpreadCommandExecutor</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a25c330bc21dba350b2aa743b4c14d1e7</anchor>
      <arglist>(std::array&lt;::dart::dynamics::ChainPtr, 2 &gt; fingers, std::size_t spread,::dart::collision::CollisionDetectorPtr collisionDetector=nullptr,::dart::collision::CollisionGroupPtr collideWith=nullptr,::dart::collision::CollisionOption collisionOptions=::dart::collision::CollisionOption(false, 1))</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a5a5b5ac7a960465cf4ac19b9a48724ac</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPosition) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a64d1b2434e8fc2d3c5c45a261b4a4d1a</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCollideWith</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>afbfe4bbb146582da947d5fa208b1eabc</anchor>
      <arglist>(::dart::collision::CollisionGroupPtr collideWith)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setFingerCollisionGroup</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>adccd58f22c13f0258d0e4477fbdd4ae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::array&lt;::dart::dynamics::ChainPtr, kNumFingers &gt;</type>
      <name>mFingers</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a52f32f5dd8c434afb80c7c5c88b9ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt;::dart::dynamics::DegreeOfFreedom * &gt;</type>
      <name>mSpreadDofs</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a70786e8480cafb217d0247dcd1d3b51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::pair&lt; double, double &gt;</type>
      <name>mDofLimits</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a5389d2b2af8e932442bdba44913bd387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionDetectorPtr</type>
      <name>mCollisionDetector</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a1912f848576fb19ef66cda9d3d561dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionGroupPtr</type>
      <name>mCollideWith</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>aeccb58a4ae0ee23fcfa3288f54cb983a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionOption</type>
      <name>mCollisionOptions</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a318b055de604ed95d9cd11be6f11c6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionGroupPtr</type>
      <name>mSpreadCollisionGroup</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>aa9d648ff2c9ab58640d7994ff5542ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mGoalPosition</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>abaeb4726f825b15f5d3380d8e8eb7ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a134df0f9470e29b3eb2e71fdda90716f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>aca29d186e72c0fa8dc80184aed396c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>ad57ed2d38a028020726e042fab7a3de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>kDofSpeed</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>aa660fca231f8ea50cc786818b692666c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>kTolerance</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a52801c197ea105403b3b18f3a6f7d7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>kDofTolerance</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>a07f25889b88b7b91ead9f2b7986fefce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr int</type>
      <name>kNumFingers</name>
      <anchorfile>dd/d3f/classaikido_1_1control_1_1BarrettFingerKinematicSimulationSpreadCommandExecutor.html</anchorfile>
      <anchor>ab1eaa65a22eb2fa6ea95456588d631dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::BarrettHandKinematicSimulationPositionCommandExecutor</name>
    <filename>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</filename>
    <base>aikido::control::PositionCommandExecutor</base>
    <member kind="function">
      <type></type>
      <name>BarrettHandKinematicSimulationPositionCommandExecutor</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a7e61fc06598a6b4450e7058cc8b4bda0</anchor>
      <arglist>(dart::dynamics::SkeletonPtr robot, const std::string &amp;prefix,::dart::collision::CollisionDetectorPtr collisionDetector=nullptr,::dart::collision::CollisionGroupPtr collideWith=nullptr,::dart::collision::CollisionOption collisionOptions=::dart::collision::CollisionOption(false, 1))</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ae075cf9f572632f6de059c03b2a7dedd</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ab2cc0869c57375b49d503e5efda611d7</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setCollideWith</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>aa99c2d0c900af68de16c125f85e038a3</anchor>
      <arglist>(::dart::collision::CollisionGroupPtr collideWith)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setupExecutors</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a788acd335605e17d1ec7005a9bcd474c</anchor>
      <arglist>(dart::dynamics::SkeletonPtr robot, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::array&lt; BarrettFingerKinematicSimulationPositionCommandExecutorPtr, kNumPositionExecutors &gt;</type>
      <name>mPositionCommandExecutors</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ad2c398bd9424e6b26305374dcec91920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BarrettFingerKinematicSimulationSpreadCommandExecutorPtr</type>
      <name>mSpreadCommandExecutor</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>aa39676fa01c044951801f055f2b6a81a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::future&lt; void &gt; &gt;</type>
      <name>mFingerFutures</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ab0ad211cf85afbbca569e558e2b89a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionDetectorPtr</type>
      <name>mCollisionDetector</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a957d2e70d278d3b2d84a995037b8edbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionGroupPtr</type>
      <name>mCollideWith</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a9e67ef1b80b914e515cd2975dcbf5fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionOption</type>
      <name>mCollisionOptions</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a968467935960d6221b6eb9cd4a56fb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a31fcee308f9c64ef481ed250a2ed33b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a3e65df390247ea752155175b5a823894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ab593924e5b8fad23744747fd38e8ec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr int</type>
      <name>kNumPositionExecutors</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a580f0d402843027b0a6b62aecd6b88f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr int</type>
      <name>kNumSpreadExecutor</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a6dc64cc764f3cfaff8f576c40e33cffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr auto</type>
      <name>kPrimalDofs</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>afea68182490463da749c513033adf267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr auto</type>
      <name>kDistalDofs</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>aa1ae249f78fef946ccc399cb17e05b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr int</type>
      <name>kNumSpreadJoints</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>ae79f3d18f5141ca1ae05e415b7a4824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr auto</type>
      <name>kWaitPeriod</name>
      <anchorfile>d9/d1e/classaikido_1_1control_1_1BarrettHandKinematicSimulationPositionCommandExecutor.html</anchorfile>
      <anchor>a5c3955e948aa0cc2230abad118204747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::InstantaneousTrajectoryExecutor</name>
    <filename>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>InstantaneousTrajectoryExecutor</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a7a8e56c89930eaa0a656a805fc24ec6f</anchor>
      <arglist>(::dart::dynamics::SkeletonPtr skeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InstantaneousTrajectoryExecutor</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a571befbf2d9bf496b76a2c2d8c0ee0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>aff42195a23aab7507038941a90322d23</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a5f68278932e1e6ad9ee479b58279b9b1</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a0d7bb3b8b8d74c0975fecb088d9f2031</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>a6093b9bfe5bad73f91c72afa189c1611</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryExecutor</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>ab981192c05b76cd68242200f80faa03d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::SkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>ac385def8a29d1b82e5543e941788cdd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>ad685d74e2ea03aee5c0a37283fc00f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d7/d1d/classaikido_1_1control_1_1InstantaneousTrajectoryExecutor.html</anchorfile>
      <anchor>af8f2c4e27964c46dee447d832e7de451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::chrono::system_clock::time_point</type>
      <name>mExecutionStartTime</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>a21c09435b8f2f37e8919f296ca34a4b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::KinematicSimulationTrajectoryExecutor</name>
    <filename>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>KinematicSimulationTrajectoryExecutor</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a2210ed11bdad835fca99f6a8b431a7cb</anchor>
      <arglist>(::dart::dynamics::SkeletonPtr skeleton)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KinematicSimulationTrajectoryExecutor</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a9a158c57f3e036e08b912fa59cc7097b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a42793d7fdddbc9ee3ff3c9aefb3f016c</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>aa295b90dc0187d12756d9b071114664d</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>aee8afd0c0682dbb54253bea0ba264e17</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>ac1f67cdaa5527be17f941589158b11f2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::SkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a81ad08cf041e1a1e3dcfc6359831492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>trajectory::TrajectoryPtr</type>
      <name>mTraj</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a0e37193ca2c1caa6a22354ec3a4bbbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a715d28a830418a94f4187f519f071ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>ae307ab018146f0f46af508928753c740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a7c9d5abc8dd6d09aea9f447bb39ccee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>a1c707ef519c0b6d70494e4816872540c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>de/d69/classaikido_1_1control_1_1KinematicSimulationTrajectoryExecutor.html</anchorfile>
      <anchor>afaed62eecb8574c4049cb46715e16e96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::PositionCommandExecutor</name>
    <filename>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>a8f4e8c0c3fe1a9c198af792949ec7bb4</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>dc/d34/classaikido_1_1control_1_1PositionCommandExecutor.html</anchorfile>
      <anchor>ab4f6244d621d8ebc7720001de06099af</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::QueuedTrajectoryExecutor</name>
    <filename>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>QueuedTrajectoryExecutor</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>af61401450838902e7774104d7558affc</anchor>
      <arglist>(std::shared_ptr&lt; TrajectoryExecutor &gt; executor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QueuedTrajectoryExecutor</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a7ab00197520dd72721e8f89eb7b66439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a28463458e8a54155bf374dd309a5e40d</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a08d41e0ae2d8eba2845e2313af4cbddc</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a58d08560e4c2bfd4ec2e17fa71d5013d</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a1e5ff3d8e688e4cc089e6f1e864453be</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; TrajectoryExecutor &gt;</type>
      <name>mExecutor</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a918effcca17d3c286681cc6fc3b28b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a2a6f1b0f1e83f58e94f748cad843e54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::future&lt; void &gt;</type>
      <name>mFuture</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a577ddc41b0db7c485fb089e88a8fea0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; trajectory::TrajectoryPtr &gt;</type>
      <name>mTrajectoryQueue</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a2f1f22518215afd3b0e8417ef9a72e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; std::shared_ptr&lt; std::promise&lt; void &gt; &gt; &gt;</type>
      <name>mPromiseQueue</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a17fe6152a6861513dc1325ce9b609a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>de/d54/classaikido_1_1control_1_1QueuedTrajectoryExecutor.html</anchorfile>
      <anchor>a7044a0d08826543f0cae1fd8c912cbbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::TrajectoryExecutor</name>
    <filename>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validate</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>aae9fc4064e039ecc8f8340f808bc69a0</anchor>
      <arglist>(trajectory::TrajectoryPtr traj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>a04c006e7eca2dc72c69813662197ac9e</anchor>
      <arglist>(trajectory::TrajectoryPtr _traj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>a1ea937c7974387b9d92820e06b2f7ce2</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abort</name>
      <anchorfile>d8/db7/classaikido_1_1control_1_1TrajectoryExecutor.html</anchorfile>
      <anchor>a4ad97e80bee4dae3082306611ce28599</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::TrajectoryResult</name>
    <filename>d4/d4f/classaikido_1_1control_1_1TrajectoryResult.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryResult</name>
      <anchorfile>d4/d4f/classaikido_1_1control_1_1TrajectoryResult.html</anchorfile>
      <anchor>a664275d2700a3f68e20ed48603f26f37</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::TrajectoryRunningException</name>
    <filename>d3/d5f/classaikido_1_1control_1_1TrajectoryRunningException.html</filename>
    <member kind="function">
      <type></type>
      <name>TrajectoryRunningException</name>
      <anchorfile>d3/d5f/classaikido_1_1control_1_1TrajectoryRunningException.html</anchorfile>
      <anchor>aa214e0acb745b7fba1d6b9524c6410ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryRunningException</name>
      <anchorfile>d3/d5f/classaikido_1_1control_1_1TrajectoryRunningException.html</anchorfile>
      <anchor>a7be76760fe4d81f1dd563ff2a64b3a49</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::control::ros</name>
    <filename>d8/db3/namespaceaikido_1_1control_1_1ros.html</filename>
    <class kind="class">aikido::control::ros::RosJointStateClient</class>
    <class kind="class">aikido::control::ros::RosPositionCommandExecutor</class>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutionException</class>
    <class kind="class">aikido::control::ros::RosTrajectoryExecutor</class>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a9c51274415d446d79fa29f9c2586a808</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>toSplineJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a582c2ddfe540b4fafe70fe4567f3b51e</anchor>
      <arglist>(const std::shared_ptr&lt; aikido::statespace::dart::MetaSkeletonStateSpace &gt; &amp;space, const trajectory_msgs::JointTrajectory &amp;jointTrajectory, const Eigen::VectorXd &amp;startPositions)</arglist>
    </member>
    <member kind="function">
      <type>trajectory_msgs::JointTrajectory</type>
      <name>toRosJointTrajectory</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>a395afeed1ec9b219e39d5f11ca215c68</anchor>
      <arglist>(const aikido::trajectory::TrajectoryPtr &amp;trajectory, double timestep)</arglist>
    </member>
    <member kind="function">
      <type>sensor_msgs::JointState</type>
      <name>positionsToJointState</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>adafd2730688b1c49c8f2adc9ddd0b098</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions, const std::vector&lt; std::string &gt; &amp;jointNames)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waitForActionServer</name>
      <anchorfile>d8/db3/namespaceaikido_1_1control_1_1ros.html</anchorfile>
      <anchor>aad8d611d70283c9a870f99e14e0dde45</anchor>
      <arglist>(actionlib::ActionClient&lt; ActionSpec &gt; &amp;actionClient,::ros::CallbackQueue &amp;callbackQueue, TimeoutDuration timeoutDuration, PeriodDuration periodDuration)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosJointStateClient</name>
    <filename>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</filename>
    <class kind="struct">aikido::control::ros::RosJointStateClient::JointStateRecord</class>
    <member kind="function">
      <type></type>
      <name>RosJointStateClient</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>aef507109c6cf3f7e97a90cf4d0456cb6</anchor>
      <arglist>(dart::dynamics::SkeletonPtr _skeleton,::ros::NodeHandle _nodeHandle, const std::string &amp;_topicName, std::size_t _capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spin</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>ab1e4f75577d2d29d462386120a3e3a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getLatestPosition</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>ad10732042834c1071e54abd3d9005089</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;_metaSkeleton) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>jointStateCallback</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>a853d9ee0ee845f3cfbc0542882ed891b</anchor>
      <arglist>(const sensor_msgs::JointState &amp;_jointState)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>afb0eed5899a9e2dd5eb46a25dbfd5619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>aa0c504a38d9e240cd8cac9b6694190ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; std::string, boost::circular_buffer&lt; JointStateRecord &gt; &gt;</type>
      <name>mBuffer</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>a7f5f598f353f3dca56af5229362b50ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mCapacity</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>a818a5981a12bbf1d1f637dea7500888f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::CallbackQueue</type>
      <name>mCallbackQueue</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>ab81532016a56e9984eeb2243607f2cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::NodeHandle</type>
      <name>mNodeHandle</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>acf948d7060f09596518ca1dc871d370a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::Subscriber</type>
      <name>mSubscriber</name>
      <anchorfile>d6/d6f/classaikido_1_1control_1_1ros_1_1RosJointStateClient.html</anchorfile>
      <anchor>aae58600b2d6025bfa5bffed26a28fc08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::control::ros::RosJointStateClient::JointStateRecord</name>
    <filename>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</anchorfile>
      <anchor>aa5cadcfc6afa459ae4dcc144349c6d15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>::ros::Time</type>
      <name>mStamp</name>
      <anchorfile>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</anchorfile>
      <anchor>a293177345acb4a368273a6c26e91de35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mPosition</name>
      <anchorfile>d0/d20/structaikido_1_1control_1_1ros_1_1RosJointStateClient_1_1JointStateRecord.html</anchorfile>
      <anchor>aa61273b0e6479d22c28e61ca5feeb2be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosPositionCommandExecutor</name>
    <filename>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</filename>
    <base>aikido::control::PositionCommandExecutor</base>
    <member kind="function">
      <type></type>
      <name>RosPositionCommandExecutor</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a8f27260610b7b1b7a38f4e68f7212f04</anchor>
      <arglist>(::ros::NodeHandle node, const std::string &amp;serverName, std::vector&lt; std::string &gt; jointNames, std::chrono::milliseconds connectionTimeout=std::chrono::milliseconds{1000}, std::chrono::milliseconds connectionPollingPeriod=std::chrono::milliseconds{20})</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RosPositionCommandExecutor</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a72806beebd280f5647e15ab08f686407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>abc284dd2bcea398372bcb04be2544762</anchor>
      <arglist>(const Eigen::VectorXd &amp;goalPositions) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a0aeea939009d370a057030d0e26b63f6</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>actionlib::ActionClient&lt; pr_control_msgs::SetPositionAction &gt;</type>
      <name>RosPositionActionClient</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a89b6d2ab40762294e6cd3bc68a17e1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>RosPositionActionClient::GoalHandle</type>
      <name>GoalHandle</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a67ef864e1165dcd95b8884325d698670</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transitionCallback</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a845f582be2fc573403f27b1cc6d1720a</anchor>
      <arglist>(GoalHandle handle)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::NodeHandle</type>
      <name>mNode</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a1405e7ed6a048e48b3fb0a98a54bdeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::CallbackQueue</type>
      <name>mCallbackQueue</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a9f7b77c6c076ccdd7bb9f713564eb3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RosPositionActionClient</type>
      <name>mClient</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a6ec0683ef74366246ccb11a6a7354b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RosPositionActionClient::GoalHandle</type>
      <name>mGoalHandle</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a678897e37980af1faaf0617f10a4624c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mJointNames</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a77ee78e39715c00de55048e2d65c0a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionTimeout</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a545bc48c4b9e536e92d72a6c41766b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionPollingPeriod</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a0509b251c52dbca86fc8096b97701d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a2f575f8aacde18e7327e82ecb2ee91ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a8bd2a268eacec2827d97b817b121003b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d7/df5/classaikido_1_1control_1_1ros_1_1RosPositionCommandExecutor.html</anchorfile>
      <anchor>a718d7d2fa3c9e0f9718a4ac4f274eeb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosTrajectoryExecutionException</name>
    <filename>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</filename>
    <member kind="function">
      <type></type>
      <name>RosTrajectoryExecutionException</name>
      <anchorfile>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</anchorfile>
      <anchor>a4e4223b51010d503108425235388ff59</anchor>
      <arglist>(const std::string &amp;what, actionlib::TerminalState terminalState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RosTrajectoryExecutionException</name>
      <anchorfile>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</anchorfile>
      <anchor>a5b8301e498a5e599e852852c214ccab3</anchor>
      <arglist>(const std::string &amp;what, int result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RosTrajectoryExecutionException</name>
      <anchorfile>d3/d53/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutionException.html</anchorfile>
      <anchor>aa1563b65b764f7e9023be247d864da5b</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::control::ros::RosTrajectoryExecutor</name>
    <filename>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</filename>
    <base>aikido::control::TrajectoryExecutor</base>
    <member kind="function">
      <type></type>
      <name>RosTrajectoryExecutor</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a5596e2a53473260fad95e9c980e902c3</anchor>
      <arglist>(::ros::NodeHandle node, const std::string &amp;serverName, double waypointTimestep, double goalTimeTolerance, const std::chrono::milliseconds &amp;connectionTimeout=std::chrono::milliseconds{1000}, const std::chrono::milliseconds &amp;connectionPollingPeriod=std::chrono::milliseconds{20})</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RosTrajectoryExecutor</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a86d19d567024017943b064c58f0c817d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a70f24cad7db40919fc94d0b6e628eeeb</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a8f79b051197b7ebd86023192a0d21e44</anchor>
      <arglist>(trajectory::TrajectoryPtr traj) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>execute</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a07f4952a62cd802cb7e97c731a4e9004</anchor>
      <arglist>(trajectory::TrajectoryPtr traj, const ::ros::Time &amp;startTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>acf9b15c2940df9ed53a72ec5c2228b0f</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a044b99a365aec448dcc693793046e7cd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>actionlib::ActionClient&lt; control_msgs::FollowJointTrajectoryAction &gt;</type>
      <name>TrajectoryActionClient</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a5f6a7141eb2e8684de001d71d3b3a2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TrajectoryActionClient::GoalHandle</type>
      <name>GoalHandle</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a70d3b7276cedc0542c878014a19f1759</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transitionCallback</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a23dd26f305101482985ce811f6b27585</anchor>
      <arglist>(GoalHandle handle)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::NodeHandle</type>
      <name>mNode</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a31764dd540b8c0b015e075970bc6ac7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::ros::CallbackQueue</type>
      <name>mCallbackQueue</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a280689dd5cfc9e5c64f11a1bc21a2d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrajectoryActionClient</type>
      <name>mClient</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>afd270ee837e667dba76ecab669126977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrajectoryActionClient::GoalHandle</type>
      <name>mGoalHandle</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a7b57acd23314fe3bc59c956027cf17b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mWaypointTimestep</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a2fe96d0ec9a2792759c3ce52ee60ab13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mGoalTimeTolerance</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>adfa3ec24b707441c48808b2a7c5a3ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionTimeout</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a6146bbb3dcd8c8291443ee437003d1d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::chrono::milliseconds</type>
      <name>mConnectionPollingPeriod</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a0c36d5ecd387ec00601c05303632cc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mInProgress</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a198136cfd5411bf6aca597416cf9b4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; std::promise&lt; void &gt; &gt;</type>
      <name>mPromise</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a3bbfd82b0d5eb8337537b0e2a2905d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d6/d01/classaikido_1_1control_1_1ros_1_1RosTrajectoryExecutor.html</anchorfile>
      <anchor>a12d1a87987914dab5cc1dda39d1ead2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::distance</name>
    <filename>d4/d44/namespaceaikido_1_1distance.html</filename>
    <namespace>aikido::distance::detail</namespace>
    <class kind="class">aikido::distance::CartesianProductWeighted</class>
    <class kind="class">aikido::distance::DistanceMetric</class>
    <class kind="class">aikido::distance::REuclidean</class>
    <class kind="class">aikido::distance::SE2</class>
    <class kind="class">aikido::distance::SE2Weighted</class>
    <class kind="class">aikido::distance::SO2Angular</class>
    <class kind="class">aikido::distance::SO3Angular</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DistanceMetric &gt;</type>
      <name>DistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>aaf63ec63b18e6e5e472c50bfd9531c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const DistanceMetric &gt;</type>
      <name>ConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a641469ad5d19138970617763e196c3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; DistanceMetric &gt;</type>
      <name>WeakDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a68af1916eae84a82cf5222dc04c3b46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const DistanceMetric &gt;</type>
      <name>WeakConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a2cee8bcb64505e74a51cbe850bd81336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>UniqueDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ad45bd005a5a117fc225afc0ae480450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const DistanceMetric &gt;</type>
      <name>UniqueConstDistanceMetricPtr</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a7a03ac8528cfc5c774c6ccb1b28eb6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 0 &gt;</type>
      <name>R0Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a50543f9d5f6a65d32a0b9d493a460acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 1 &gt;</type>
      <name>R1Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a667d3fadad12dfacbee30d36a3a88721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 2 &gt;</type>
      <name>R2Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a6903891de6aaaac9b338421b21589f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 3 &gt;</type>
      <name>R3Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a0854bb5f71af46c24b5e5e7301cfc359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; 6 &gt;</type>
      <name>R6Euclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae57f5e9a8e4a7abc73ca19821a51c630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>REuclidean&lt; Eigen::Dynamic &gt;</type>
      <name>RnEuclidean</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a1fdca133d62fc1fd8e40918a96c52162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CartesianProductWeighted</type>
      <name>Weighted</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>a4fda8871126805b629f5427794860cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetricFor</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ae3bec5c04d96f08fd3f054d861d55a58</anchor>
      <arglist>(std::shared_ptr&lt; Space &gt; _sspace)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>createDistanceMetric</name>
      <anchorfile>d4/d44/namespaceaikido_1_1distance.html</anchorfile>
      <anchor>ad738effdbea68c7731993a3cd90fa485</anchor>
      <arglist>(statespace::StateSpacePtr _sspace)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::CartesianProductWeighted</name>
    <filename>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>CartesianProductWeighted</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>a21b506cd7f4fe83c7d97718f4df01a59</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _space, std::vector&lt; DistanceMetricPtr &gt; _metrics)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianProductWeighted</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>a7a4ab42568828f4596c86ff2f5081e58</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _space, std::vector&lt; std::pair&lt; DistanceMetricPtr, double &gt;&gt; _metrics)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>ac4db0f2dfb9aca2d284a3b8f55d1d188</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>a8d002b937448ad0e73b213c6904b60de</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceMetric</name>
      <anchorfile>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</anchorfile>
      <anchor>af5faeff37a5c85d12431965ed7115d48</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::CartesianProduct &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>acb53025d4d5cd0df434b1a9cd7079f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::pair&lt; DistanceMetricPtr, double &gt; &gt;</type>
      <name>mMetrics</name>
      <anchorfile>da/d0d/classaikido_1_1distance_1_1CartesianProductWeighted.html</anchorfile>
      <anchor>ac161d106fcfa2932d020571ffd443dfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::DistanceMetric</name>
    <filename>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</anchorfile>
      <anchor>ac4c514ce9d0b95e000830d3a910e6bf2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>da/dfb/classaikido_1_1distance_1_1DistanceMetric.html</anchorfile>
      <anchor>a71fc6abe4d2a1c33f42c2876401b0e74</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::REuclidean</name>
    <filename>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</filename>
    <templarg>N</templarg>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>REuclidean</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>ac6e0d3518ab33423770ca5df2673a12d</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R&lt; N &gt;&gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>ae761af4ccf5cd51e549b2a5626cc1dd9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>a56ba4fe2189ecadf36ebf2285b2ded8c</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::R&lt; N &gt; &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d7/dcf/classaikido_1_1distance_1_1REuclidean.html</anchorfile>
      <anchor>a3f6c8445eb7f588025d9de4d98325525</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SE2</name>
    <filename>d8/d72/classaikido_1_1distance_1_1SE2.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SE2</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>a295f2d1762d7b2aa866dd96e058bd1ba</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SE2 &gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>ab8b61f8587e7527f4deb248f4b543a76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>ac59f6cd5b44ec46a497ab99de45efc1f</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SE2 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>d8/d72/classaikido_1_1distance_1_1SE2.html</anchorfile>
      <anchor>ad516e2328570df77907d4f2b85c70e85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SE2Weighted</name>
    <filename>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SE2Weighted</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>ab332d11aaa3af31ba969ceb0589f3cd7</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SE2 &gt; space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2Weighted</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a5ac999c54d48a2b165011a66cae7d39e</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SE2 &gt; space, const Eigen::Vector2d &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a79dc2be38d9103be519dfc361da9ff6c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a460f572f5c30b8302bb5bdd8c4d72cb8</anchor>
      <arglist>(const statespace::StateSpace::State *state1, const statespace::StateSpace::State *state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SE2 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>ad9a3056298440a3379d734194e93db6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector2d</type>
      <name>mWeights</name>
      <anchorfile>dd/d3d/classaikido_1_1distance_1_1SE2Weighted.html</anchorfile>
      <anchor>a72d13b05ad09630c2e3ab486cbc1f23c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SO2Angular</name>
    <filename>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SO2Angular</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>a88cede6ea39cc0326274e6ad63019578</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SO2 &gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>a142f9eb749233a5227b4e83567225ecb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>a272491427d144bca8f7d737f10f44393</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SO2 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>da/dd4/classaikido_1_1distance_1_1SO2Angular.html</anchorfile>
      <anchor>ab3af3ac9419a5004496932adcaec33e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::distance::SO3Angular</name>
    <filename>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</filename>
    <base>aikido::distance::DistanceMetric</base>
    <member kind="function">
      <type></type>
      <name>SO3Angular</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>a68ba074c74bfc6e2cd20df7ece592de5</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SO3 &gt; _space)</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>a375188327b018ec754c72cd46bd27c4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>ad44bace895a3c0aeaf6358950428aaa7</anchor>
      <arglist>(const statespace::StateSpace::State *_state1, const statespace::StateSpace::State *_state2) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; statespace::SO3 &gt;</type>
      <name>mStateSpace</name>
      <anchorfile>dd/d31/classaikido_1_1distance_1_1SO3Angular.html</anchorfile>
      <anchor>a6dfe4d4c58dd31a2c977f9086e3b77e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::distance::detail</name>
    <filename>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</filename>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R0 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R1 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R3 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R6 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SO2 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SO3 &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::CartesianProduct &gt;</class>
    <class kind="struct">aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SE2 &gt;</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; DistanceMetric &gt;</type>
      <name>Ptr</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a3b8952d56389bb3863b188867e162583</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; statespace::CartesianProduct, statespace::R0, statespace::R1, statespace::R2, statespace::R3, statespace::R6, statespace::SO2, statespace::SO3, statespace::SE2 &gt;</type>
      <name>SupportedStateSpaces</name>
      <anchorfile>d4/d5b/namespaceaikido_1_1distance_1_1detail.html</anchorfile>
      <anchor>a2bf865b647746954ff17905f5c6d0963</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl</name>
    <filename>d4/d14/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R0 &gt;</name>
    <filename>d0/dc1/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R0_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d0/dc1/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R0_01_4.html</anchorfile>
      <anchor>a3fdae21b41d98102a3cbaefd921c1abc</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R0 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R1 &gt;</name>
    <filename>d4/d97/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R1_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d4/d97/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R1_01_4.html</anchorfile>
      <anchor>a74df61d73a00804c9866a81f625e7c26</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R1 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R2 &gt;</name>
    <filename>d3/dc4/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R2_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d3/dc4/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R2_01_4.html</anchorfile>
      <anchor>ab3efa642747c73c2a30263d12ff44930</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R2 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R3 &gt;</name>
    <filename>d1/d62/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R3_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d1/d62/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R3_01_4.html</anchorfile>
      <anchor>ade7913a0708620968402cc658e993158</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R3 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::R6 &gt;</name>
    <filename>d3/d03/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R6_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d3/d03/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1R6_01_4.html</anchorfile>
      <anchor>ae35b6fa4b4dfcbe2c08b1891515a3acb</anchor>
      <arglist>(std::shared_ptr&lt; statespace::R6 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SO2 &gt;</name>
    <filename>d9/d46/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1SO2_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d9/d46/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1SO2_01_4.html</anchorfile>
      <anchor>abcc4d4dca14046770a944dac7a31a4f4</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SO2 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SO3 &gt;</name>
    <filename>d8/d8a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1SO3_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d8/d8a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1SO3_01_4.html</anchorfile>
      <anchor>a81de38a111841d3161fc8954d6ea9914</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SO3 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::CartesianProduct &gt;</name>
    <filename>dd/de7/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1CartesianProduct_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>dd/de7/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1CartesianProduct_01_4.html</anchorfile>
      <anchor>a5ee95cc662f5fe37ad7beb1f9c68e4af</anchor>
      <arglist>(std::shared_ptr&lt; statespace::CartesianProduct &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::distance::detail::createDistanceMetricFor_impl&lt; statespace::SE2 &gt;</name>
    <filename>d2/d2a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1SE2_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d2/d2a/structaikido_1_1distance_1_1detail_1_1createDistanceMetricFor__impl_3_01statespace_1_1SE2_01_4.html</anchorfile>
      <anchor>a94bdbd1b36e450d3fa03534fc6f17ac9</anchor>
      <arglist>(std::shared_ptr&lt; statespace::SE2 &gt; _sspace)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::io</name>
    <filename>d2/db8/namespaceaikido_1_1io.html</filename>
    <namespace>aikido::io::detail</namespace>
    <class kind="class">aikido::io::CatkinResourceRetriever</class>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbodyString</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a0ab91fa623ddbba8b9bb4a2150380395</anchor>
      <arglist>(const std::string &amp;kinBodyString, const dart::common::Uri &amp;baseUri=&quot;&quot;, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>readKinbody</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a9c32779712b779d369942ebdee37cfc6</anchor>
      <arglist>(const dart::common::Uri &amp;kinBodyUri, const dart::common::ResourceRetrieverPtr &amp;retriever=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>YAML::Node</type>
      <name>loadYAML</name>
      <anchorfile>d2/db8/namespaceaikido_1_1io.html</anchorfile>
      <anchor>a4da7c052f494bd2dfe1f903d87ca3ce5</anchor>
      <arglist>(const dart::common::Uri &amp;yamlUri, const dart::common::ResourceRetrieverPtr &amp;retriever)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::io::CatkinResourceRetriever</name>
    <filename>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</filename>
    <base virtualness="virtual">dart::common::ResourceRetriever</base>
    <class kind="struct">aikido::io::CatkinResourceRetriever::Workspace</class>
    <member kind="function">
      <type></type>
      <name>CatkinResourceRetriever</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>aaa3c8a6429dd2665f40ac8f6ea726e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CatkinResourceRetriever</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a27e921efc03fe7526c677d0c2de6cc74</anchor>
      <arglist>(const dart::common::ResourceRetrieverPtr &amp;_delegate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CatkinResourceRetriever</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a8b63d16a127ccbb58465a03c7fa23696</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a1961345a915eb126f56af6c6bde3f3b4</anchor>
      <arglist>(const dart::common::Uri &amp;_uri) override</arglist>
    </member>
    <member kind="function">
      <type>dart::common::ResourcePtr</type>
      <name>retrieve</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a5432cf8a6cd7b3d64808445872f6ea56</anchor>
      <arglist>(const dart::common::Uri &amp;_uri) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; Workspace &gt;</type>
      <name>getWorkspaces</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a5fb470f5dd055437c5dc98981bcb4679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>dart::common::Uri</type>
      <name>resolvePackageUri</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>ad2af3306506eed42e8f7bb71a3c5ac0e</anchor>
      <arglist>(const dart::common::Uri &amp;_uri) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::common::ResourceRetrieverPtr</type>
      <name>mDelegate</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>aacbdf472b1b37019965811ba2fc8fbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Workspace &gt;</type>
      <name>mWorkspaces</name>
      <anchorfile>d5/d55/classaikido_1_1io_1_1CatkinResourceRetriever.html</anchorfile>
      <anchor>a2ca43b25c6cf6e320a402779243dd593</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::io::CatkinResourceRetriever::Workspace</name>
    <filename>d9/d49/structaikido_1_1io_1_1CatkinResourceRetriever_1_1Workspace.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>mPath</name>
      <anchorfile>d9/d49/structaikido_1_1io_1_1CatkinResourceRetriever_1_1Workspace.html</anchorfile>
      <anchor>adf605f123ba88f725ba2f5296367848b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, std::string &gt;</type>
      <name>mSourceMap</name>
      <anchorfile>d9/d49/structaikido_1_1io_1_1CatkinResourceRetriever_1_1Workspace.html</anchorfile>
      <anchor>aaf59c547737fe65ebfd3c76e0e74f1a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::io::detail</name>
    <filename>da/d43/namespaceaikido_1_1io_1_1detail.html</filename>
    <class kind="struct">aikido::io::detail::encode_impl</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, true &gt;</class>
    <class kind="struct">aikido::io::detail::encode_impl&lt; MatrixType, false &gt;</class>
    <member kind="function">
      <type>YAML::Mark</type>
      <name>getMark</name>
      <anchorfile>da/d43/namespaceaikido_1_1io_1_1detail.html</anchorfile>
      <anchor>a01bc4ac464aec57ed9b598c6befcabae</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::io::detail::encode_impl</name>
    <filename>d2/d45/structaikido_1_1io_1_1detail_1_1encode__impl.html</filename>
    <templarg></templarg>
    <templarg>IsVectorAtCompileTime</templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::io::detail::encode_impl&lt; MatrixType, true &gt;</name>
    <filename>d3/d2f/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static YAML::Node</type>
      <name>encode</name>
      <anchorfile>d3/d2f/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01true_01_4.html</anchorfile>
      <anchor>a438e434c7ae9f35ea2f310d29caf39f2</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::io::detail::encode_impl&lt; MatrixType, false &gt;</name>
    <filename>d0/d42/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static YAML::Node</type>
      <name>encode</name>
      <anchorfile>d0/d42/structaikido_1_1io_1_1detail_1_1encode__impl_3_01MatrixType_00_01false_01_4.html</anchorfile>
      <anchor>a6ae95b604049d5ac88c4b1315cd2684f</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::perception</name>
    <filename>d1/da8/namespaceaikido_1_1perception.html</filename>
    <class kind="class">aikido::perception::AprilTagsDatabase</class>
    <class kind="class">aikido::perception::AprilTagsModule</class>
    <class kind="class">aikido::perception::ObjectDatabase</class>
    <class kind="class">aikido::perception::PerceptionModule</class>
    <class kind="class">aikido::perception::RcnnPoseModule</class>
    <class kind="class">aikido::perception::YamlAprilTagsDatabase</class>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertROSPoseToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>ac399bb547ad0a0b3ac8a6b866c05a680</anchor>
      <arglist>(geometry_msgs::Pose const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>convertStampedTransformToEigen</name>
      <anchorfile>d1/da8/namespaceaikido_1_1perception.html</anchorfile>
      <anchor>ac75da57d56398b8c4b3856197fbf7168</anchor>
      <arglist>(tf::StampedTransform const &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::AprilTagsDatabase</name>
    <filename>da/def/classaikido_1_1perception_1_1AprilTagsDatabase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AprilTagsDatabase</name>
      <anchorfile>da/def/classaikido_1_1perception_1_1AprilTagsDatabase.html</anchorfile>
      <anchor>af132bea4eb1d3406d24ed67f4ec2c339</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getTagNameOffset</name>
      <anchorfile>da/def/classaikido_1_1perception_1_1AprilTagsDatabase.html</anchorfile>
      <anchor>ac16886344e0c5271f6d67909158ca472</anchor>
      <arglist>(const std::string &amp;_tagName, std::string &amp;body_name, dart::common::Uri &amp;body_resource, Eigen::Isometry3d &amp;body_offset)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::AprilTagsModule</name>
    <filename>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</filename>
    <base>aikido::perception::PerceptionModule</base>
    <member kind="function">
      <type></type>
      <name>AprilTagsModule</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>ac4ce126287d9999e4f7124b316129152</anchor>
      <arglist>(ros::NodeHandle node, std::string markerTopic, std::shared_ptr&lt; AprilTagsDatabase &gt; configData, dart::common::ResourceRetrieverPtr resourceRetriever, std::string destinationFrame, dart::dynamics::Frame *referenceLink)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AprilTagsModule</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>afc4a2d646decd99f448fefea2a1bac3d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>detectObjects</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>a04b393ff054fd3b10b43b66534d5dcd2</anchor>
      <arglist>(const aikido::planner::WorldPtr &amp;env, ros::Duration timeout=ros::Duration(0.0), ros::Time timestamp=ros::Time(0.0)) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PerceptionModule</name>
      <anchorfile>d7/dce/classaikido_1_1perception_1_1PerceptionModule.html</anchorfile>
      <anchor>a23df4e43e5fed3dcf764e51ec78270bb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mMarkerTopic</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>a0414a7eba23604e3adca35f04873fb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mReferenceFrameId</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>a9b3c1a04768b3f4c104f57a599614819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::common::ResourceRetrieverPtr</type>
      <name>mResourceRetriever</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>a09380a9e290715275ac8c4aa52171490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::Frame *</type>
      <name>mReferenceLink</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>ad95d48e0d64594f4a8f60e9210a1ccce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; AprilTagsDatabase &gt;</type>
      <name>mConfigData</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>a36821129a2a76c89f1bcc5a1cc4db246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::NodeHandle</type>
      <name>mNode</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>a8a5456008116d9eb66de3e9567c40f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>tf::TransformListener</type>
      <name>mListener</name>
      <anchorfile>d7/ddb/classaikido_1_1perception_1_1AprilTagsModule.html</anchorfile>
      <anchor>a9c5ef1c65b2f09d89b5f79b8a1662aa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::ObjectDatabase</name>
    <filename>df/de1/classaikido_1_1perception_1_1ObjectDatabase.html</filename>
    <member kind="function">
      <type></type>
      <name>ObjectDatabase</name>
      <anchorfile>df/de1/classaikido_1_1perception_1_1ObjectDatabase.html</anchorfile>
      <anchor>a049e8e10442713d54f56cb15c68254bc</anchor>
      <arglist>(const dart::common::ResourceRetrieverPtr &amp;resourceRetriever, dart::common::Uri configDataURI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectDatabase</name>
      <anchorfile>df/de1/classaikido_1_1perception_1_1ObjectDatabase.html</anchorfile>
      <anchor>a75908cf9920934dc3542b09b431f43d7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectByKey</name>
      <anchorfile>df/de1/classaikido_1_1perception_1_1ObjectDatabase.html</anchorfile>
      <anchor>aa9db88ae7c708cf7c657c9628b83b948</anchor>
      <arglist>(const std::string &amp;_obj_key, std::string &amp;obj_name, dart::common::Uri &amp;obj_resource)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>YAML::Node</type>
      <name>mObjData</name>
      <anchorfile>df/de1/classaikido_1_1perception_1_1ObjectDatabase.html</anchorfile>
      <anchor>ab529c9f255e29d1e4093b27836d0b6dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::PerceptionModule</name>
    <filename>d7/dce/classaikido_1_1perception_1_1PerceptionModule.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detectObjects</name>
      <anchorfile>d7/dce/classaikido_1_1perception_1_1PerceptionModule.html</anchorfile>
      <anchor>adc245352ee3542e25e651f887fda6036</anchor>
      <arglist>(const aikido::planner::WorldPtr &amp;env, ros::Duration timeout, ros::Time timestamp)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::RcnnPoseModule</name>
    <filename>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</filename>
    <base>aikido::perception::PerceptionModule</base>
    <member kind="function">
      <type></type>
      <name>RcnnPoseModule</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>a4abb49df9cdf4921126c11d5b614734f</anchor>
      <arglist>(ros::NodeHandle nodeHandle, std::string markerTopic, std::shared_ptr&lt; ObjectDatabase &gt; configData, std::shared_ptr&lt; aikido::io::CatkinResourceRetriever &gt; resourceRetriever, std::string referenceFrameId, dart::dynamics::Frame *referenceLink)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RcnnPoseModule</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>a2494239deadc1acdf7c238f0e30b76d7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>detectObjects</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>af2212575e22610ab5233d7d5c463d213</anchor>
      <arglist>(const aikido::planner::WorldPtr &amp;env, ros::Duration timeout=ros::Duration(0.0), ros::Time timestamp=ros::Time(0.0)) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ros::NodeHandle</type>
      <name>mNodeHandle</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>a4795e185887808ca94e9efc0c2646eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mMarkerTopic</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>af9c68b0ef2a84bc2cd659e8d6b5e29de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; ObjectDatabase &gt;</type>
      <name>mConfigData</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>abc700331925d91c18990ac3636993c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; aikido::io::CatkinResourceRetriever &gt;</type>
      <name>mResourceRetriever</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>a7a8522c67a58ae2ae62ec38210cb847e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mReferenceFrameId</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>abf757f99b80d68585e49659e4f4d5879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::Frame *</type>
      <name>mReferenceLink</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>ab88b859d5566d4336e448bc4ea901f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>tf::TransformListener</type>
      <name>mTfListener</name>
      <anchorfile>d1/d64/classaikido_1_1perception_1_1RcnnPoseModule.html</anchorfile>
      <anchor>adec215f14d81d7612d98542a812e5231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::perception::YamlAprilTagsDatabase</name>
    <filename>d1/dc0/classaikido_1_1perception_1_1YamlAprilTagsDatabase.html</filename>
    <base>aikido::perception::AprilTagsDatabase</base>
    <member kind="function">
      <type></type>
      <name>YamlAprilTagsDatabase</name>
      <anchorfile>d1/dc0/classaikido_1_1perception_1_1YamlAprilTagsDatabase.html</anchorfile>
      <anchor>abcbbd67ea90469001c380b4d87171790</anchor>
      <arglist>(const dart::common::ResourceRetrieverPtr &amp;resourceRetriever, dart::common::Uri configDataURI)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~YamlAprilTagsDatabase</name>
      <anchorfile>d1/dc0/classaikido_1_1perception_1_1YamlAprilTagsDatabase.html</anchorfile>
      <anchor>a0d4d680463cca2c52eac3ab771f43428</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTagNameOffset</name>
      <anchorfile>d1/dc0/classaikido_1_1perception_1_1YamlAprilTagsDatabase.html</anchorfile>
      <anchor>a62567359a4e3c0024304ceea6a13f779</anchor>
      <arglist>(const std::string &amp;_tagName, std::string &amp;body_name, dart::common::Uri &amp;body_resource, Eigen::Isometry3d &amp;body_offset) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>YAML::Node</type>
      <name>mTagData</name>
      <anchorfile>d1/dc0/classaikido_1_1perception_1_1YamlAprilTagsDatabase.html</anchorfile>
      <anchor>a18588c0acd4b809508ba5cd0117b2ec7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner</name>
    <filename>d5/dc7/namespaceaikido_1_1planner.html</filename>
    <namespace>aikido::planner::ompl</namespace>
    <namespace>aikido::planner::parabolic</namespace>
    <namespace>aikido::planner::vectorfield</namespace>
    <class kind="struct">aikido::planner::PlanningResult</class>
    <class kind="class">aikido::planner::TrajectoryPostProcessor</class>
    <class kind="class">aikido::planner::World</class>
    <class kind="class">aikido::planner::WorldStateSaver</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; World &gt;</type>
      <name>WorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>aa129f13cd8608a9a2c32ff3ed004b401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const World &gt;</type>
      <name>ConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>abab1048a8c2b02894784e4eed7440424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; World &gt;</type>
      <name>WeakWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a0a80182a9415c37ff6606a8477818905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const World &gt;</type>
      <name>WeakConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a9025cfb1edb43461abf19a24783f5409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; World &gt;</type>
      <name>UniqueWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>afbe4cc668596b5b0b035e59c716e8235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const World &gt;</type>
      <name>UniqueConstWorldPtr</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a06e4494bb40a6e49514302f48bbe4831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planSnap</name>
      <anchorfile>d5/dc7/namespaceaikido_1_1planner.html</anchorfile>
      <anchor>a16a8ae2f9bee860b7905912d480421a8</anchor>
      <arglist>(const statespace::ConstStateSpacePtr &amp;stateSpace, const statespace::StateSpace::State *startState, const statespace::StateSpace::State *goalState, const std::shared_ptr&lt; statespace::Interpolator &gt; &amp;interpolator, const std::shared_ptr&lt; constraint::Testable &gt; &amp;constraint, planner::PlanningResult &amp;planningResult)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::planner::PlanningResult</name>
    <filename>d4/d9a/structaikido_1_1planner_1_1PlanningResult.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>message</name>
      <anchorfile>d4/d9a/structaikido_1_1planner_1_1PlanningResult.html</anchorfile>
      <anchor>adb0787892e557ef1643de92034267d63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::TrajectoryPostProcessor</name>
    <filename>df/d7a/classaikido_1_1planner_1_1TrajectoryPostProcessor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>df/d7a/classaikido_1_1planner_1_1TrajectoryPostProcessor.html</anchorfile>
      <anchor>a6e66cd6b0f1701cb9e7fe532677789fa</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>df/d7a/classaikido_1_1planner_1_1TrajectoryPostProcessor.html</anchorfile>
      <anchor>a1eaf55e63db944766cc553682820d34f</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::World</name>
    <filename>d0/dee/classaikido_1_1planner_1_1World.html</filename>
    <class kind="struct">aikido::planner::World::State</class>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a096b23dd284f68f09c7c46f97667475e</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~World</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>adfa589428e1a0d267f555ba78b3c67cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; World &gt;</type>
      <name>clone</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>aa98200c125daf72676168c7f691a7fb9</anchor>
      <arglist>(const std::string &amp;newName=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>setName</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a1b617b612f2a9108befa35c6b01f47e7</anchor>
      <arglist>(const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a862009062693008855e2e6eef6a00fad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>getSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>ae088bd3aa161e47d3015b31b4c5a1ded</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>getSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a123544d3fdb9b462582f5647359b811f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a14bae9d2b94ed1754a9964d776825e56</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skel) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumSkeletons</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a0f7883ac225c438582548dafac3048c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>addSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a5111847424a2be57ba1bdd126a68a6f9</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSkeleton</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a2bcb58f12530ec803e4da58facd126e3</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>std::mutex &amp;</type>
      <name>getMutex</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>ac34e14efdd33794a399491d6944cd3c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>World::State</type>
      <name>getState</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a60ddc61b80ee7a9a4e08dc69d7e857a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a75d48583f89b614ed88490ffb067d615</anchor>
      <arglist>(const World::State &amp;State)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; World &gt;</type>
      <name>create</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>adc792f9b305efeb95b7eea09a8c4fbaa</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>acac0a13832f1bf6373fe1ce5c4f42a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; dart::dynamics::SkeletonPtr &gt;</type>
      <name>mSkeletons</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a38d77c9185e00807283a59dbe7b00952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a453fa7e3ea77a88b175ec7ed186ed2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dart::common::NameManager&lt; dart::dynamics::SkeletonPtr &gt;</type>
      <name>mSkeletonNameManager</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>a2371c4faf8dc793882935f426e9079da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static dart::common::NameManager&lt; World * &gt;</type>
      <name>mWorldNameManager</name>
      <anchorfile>d0/dee/classaikido_1_1planner_1_1World.html</anchorfile>
      <anchor>aa4bdd12836d09753065e64af0659d164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::planner::World::State</name>
    <filename>df/d21/structaikido_1_1planner_1_1World_1_1State.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>df/d21/structaikido_1_1planner_1_1World_1_1State.html</anchorfile>
      <anchor>ae7be7998dd087905d361f2329c1d0772</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>df/d21/structaikido_1_1planner_1_1World_1_1State.html</anchorfile>
      <anchor>a580f761b6aa6c2463f17b4b5f7aac61f</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, dart::dynamics::Skeleton::Configuration &gt;</type>
      <name>configurations</name>
      <anchorfile>df/d21/structaikido_1_1planner_1_1World_1_1State.html</anchorfile>
      <anchor>a0978f478bd9e73ab3e4ba9467cb15262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::WorldStateSaver</name>
    <filename>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Options</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a4a06d878487049fbe3df8286ed519f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONFIGURATIONS</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a4a06d878487049fbe3df8286ed519f62adf633dff9da2d8a400925ed2cf76cfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldStateSaver</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a6c48fce941d1d5a472b9b90385ee2cce</anchor>
      <arglist>(World *world, int options=CONFIGURATIONS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateSaver</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>ac7705b0e97c8f18e823f329b214bd54b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>World *</type>
      <name>mWorld</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a340e78bb7d8b9a47480d8e40658b0bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mOptions</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>a1171e9ba5db46a576fd013cfc4ad3e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>World::State</type>
      <name>mWorldState</name>
      <anchorfile>d1/df6/classaikido_1_1planner_1_1WorldStateSaver.html</anchorfile>
      <anchor>aaf35707e24439b4148af8390ba2b83f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::ompl</name>
    <filename>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</filename>
    <class kind="class">aikido::planner::ompl::CRRT</class>
    <class kind="class">aikido::planner::ompl::CRRTConnect</class>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace</class>
    <class kind="class">aikido::planner::ompl::GoalRegion</class>
    <class kind="class">aikido::planner::ompl::MotionValidator</class>
    <class kind="class">aikido::planner::ompl::StateSampler</class>
    <class kind="class">aikido::planner::ompl::StateValidityChecker</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>ompl_shared_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a80d7422befdffd8a46238dbe81effa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; T &gt;</type>
      <name>ompl_weak_ptr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ace5edcfd0ba1691a4c0eb33bef99c512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; GeometricStateSpace &gt;</type>
      <name>GeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>acd9aadee862348e8ebf557ef099b1082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>ConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a381d6b417e3b485ca76ad56ef336c33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; GeometricStateSpace &gt;</type>
      <name>WeakGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae7dc686694607cc236a76df966d0ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>WeakConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a68d84a38da90cd4ff11a8b52bedd589a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GeometricStateSpace &gt;</type>
      <name>UniqueGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a6ba25ac2323cbee6c6b00cda950721de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const GeometricStateSpace &gt;</type>
      <name>UniqueConstGeometricStateSpacePtr</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>aba907832f0c1a8192ca7d32192e0ffa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_make_shared</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>adee178d5dc8755a37c11d6d835a70481</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_dynamic_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a9f9741a3ded8d2b646a5fb855f4aa67e</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt; T &gt;</type>
      <name>ompl_static_pointer_cast</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a26c7df73b3c990fad15d1083af920609</anchor>
      <arglist>(const ompl_shared_ptr&lt; U &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ompl_bind</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a23c5c15b6e0b38a4fb7fb7727197f540</anchor>
      <arglist>(F &amp;&amp;f, Args &amp;&amp;...args) -&gt; decltype(boost::bind(std::forward&lt; F &gt;(f), std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>createSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ad7b398d71985813c60cc5744fde1fe54</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr _stateSpace, constraint::TestablePtr _validityConstraint, double _maxDistanceBtwValidityChecks, std::unique_ptr&lt; common::RNG &gt; _rng)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>acec107715e7b654196f7fb1726c23411</anchor>
      <arglist>(const statespace::StateSpace::State *_start, const statespace::StateSpace::State *_goal, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>aba719859bd15eb19de58b1242ea6c608</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRT</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a2a0a0f3ba0eddd4863e52cd5340cce1d</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planCRRTConnect</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a8eb47f3098cae26a285a8e6b0bd471e7</anchor>
      <arglist>(const statespace::StateSpace::State *_start, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler, constraint::ProjectablePtr _trajConstraint, statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxPlanTime, double _maxExtensionDistance, double _maxDistanceBtwProjections, double _minStepsize, double _minTreeConnectionDistance)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::SpaceInformationPtr</type>
      <name>getSpaceInformation</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>af7d1aab861b12ef19fe77d5300a6a4a0</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>ompl_shared_ptr&lt;::ompl::base::GoalRegion &gt;</type>
      <name>getGoalRegion</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>ae450c07e0526ea3ae5dc17d877187adc</anchor>
      <arglist>(::ompl::base::SpaceInformationPtr _si, constraint::TestablePtr _goalTestable, constraint::SampleablePtr _goalSampler)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a346d2e10c86942ad264ecdf393eafdaf</anchor>
      <arglist>(const ::ompl::base::PlannerPtr &amp;_planner, const ::ompl::base::ProblemDefinitionPtr &amp;_pdef, statespace::StateSpacePtr _sspace, statespace::InterpolatorPtr _interpolator, double _maxPlanTime)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; trajectory::Interpolated &gt;, bool &gt;</type>
      <name>simplifyOMPL</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a60acd428122fb8cc67a569b41e2c49eb</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _validityConstraint, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjector, double _maxDistanceBtwValidityChecks, double _timeout, std::size_t _maxEmptySteps, trajectory::InterpolatedPtr _originalTraj)</arglist>
    </member>
    <member kind="function">
      <type>::ompl::geometric::PathGeometric</type>
      <name>toOMPLTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a4f5c0d8e61722cb13058bc68ed2905fa</anchor>
      <arglist>(const trajectory::InterpolatedPtr &amp;_interpolatedTraj,::ompl::base::SpaceInformationPtr _si)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Interpolated &gt;</type>
      <name>toInterpolatedTrajectory</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a5e574bca79caca6fcfee48b968fe1477</anchor>
      <arglist>(const ::ompl::geometric::PathGeometric &amp;_path, statespace::InterpolatorPtr _interpolator)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>EQUALITY_EPSILON</name>
      <anchorfile>d1/da7/namespaceaikido_1_1planner_1_1ompl.html</anchorfile>
      <anchor>a202c6dab902b5ffd042c953463b27b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::CRRT</name>
    <filename>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</filename>
    <class kind="class">aikido::planner::ompl::CRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>CRRT</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a12b8ef609569f7becc2e2a948d56ca75</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CRRT</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a0ede66ec2ed2043da8a79cedc3cec2e0</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, const std::string &amp;_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CRRT</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a94c596297e1f303fd6ba3308126d766e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>aa3472f807b4e5010a7414c2aa9e3711c</anchor>
      <arglist>(::ompl::base::PlannerData &amp;_data) const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a7be89c1b0e0fe146502be923f0b14735</anchor>
      <arglist>(const ::ompl::base::PlannerTerminationCondition &amp;_ptc) override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a6cc9cfac7ea24f94ac2a84601fde7b49</anchor>
      <arglist>(double _solveTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab072f567c2cb5cd40e1bdc1b6b772b91</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab9968eee53308e4e053e26be6804ece7</anchor>
      <arglist>(double _goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a18b87ec2b7b8f1714048b68b4fab429b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a6ba1fe219cdd71373868b290cd2139c6</anchor>
      <arglist>(double _distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a999c655262db27c39de8b3f730216b18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPathConstraint</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>af74e8a18d69e9b42ec4d10d157cb8cd9</anchor>
      <arglist>(constraint::ProjectablePtr _projectable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionResolution</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a5e10fc9e220e7016d06d196e2652200f</anchor>
      <arglist>(double _resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProjectionResolution</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a45365434ddd3e9e90978aaff24817934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinStateDifference</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>acc3fd006bd99c3d9444f79fbe449c6f8</anchor>
      <arglist>(double _mindist)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinStateDifference</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>aaa1c8a2ab6800bdd83f4e413cce06b64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a8efdd027f9e9c52789a2492052316a61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a5c54d3a5b4f1245dd2a0d8b9b128ce9f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ompl_shared_ptr&lt;::ompl::NearestNeighbors&lt; Motion * &gt;&gt;</type>
      <name>TreeData</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a92ecb313f8e88100e28c3695558f1245</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>freeMemory</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a2a51714cf81d6c586e2025333e0323f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a1b0dfdd97ea32bd8bebbd2735c392998</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>constrainedExtend</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab8a14bb5ca101c5548a28920e03db91b</anchor>
      <arglist>(const ::ompl::base::PlannerTerminationCondition &amp;ptc, TreeData &amp;tree, Motion *nmotion,::ompl::base::State *gstate,::ompl::base::State *xstate,::ompl::base::Goal *goal, bool returnlast, double &amp;dist, bool &amp;foundgoal)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>mStartTree</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a9c2e30d4a46e49dd7681613fe447dee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::ompl::base::StateSamplerPtr</type>
      <name>mSampler</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a87b86ff84ada6d240d63e28de0077e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mGoalBias</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab33f809901205104f2d47fd9c0984a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxDistance</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a849baf0da929f65fb88ddf38c5135b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::ompl::RNG</type>
      <name>mRng</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a6a59c2101a468e469304f2ecf7a3961a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>mLastGoalMotion</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ae6cd73b3ea5126c27da802dc040582ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>constraint::ProjectablePtr</type>
      <name>mCons</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a9b04f9af68ebe95495b78e7030c02e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxStepsize</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>ab54bccab802c95a1f4c3cf1a87461ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMinStepsize</name>
      <anchorfile>d8/d58/classaikido_1_1planner_1_1ompl_1_1CRRT.html</anchorfile>
      <anchor>a06a8801141adcff3d2a69264bd0c5db2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::CRRT::Motion</name>
    <filename>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a10821e432e708a770e594f6f83fb162a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a2c1dfdacd5a1234783a0b67936ded833</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Motion</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a4fad9bae0c8e69e581cb323edfd15cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>::ompl::base::State *</type>
      <name>state</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a3b35f78db9f3d1a9011d2bdbfd8c9e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>dc/d3a/classaikido_1_1planner_1_1ompl_1_1CRRT_1_1Motion.html</anchorfile>
      <anchor>a43a3badc9879fd25cb048463d79ff7dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::CRRTConnect</name>
    <filename>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</filename>
    <base>aikido::planner::ompl::CRRT</base>
    <member kind="function">
      <type></type>
      <name>CRRTConnect</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a07eb41eef7c1ef5d517867a10c27437a</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CRRTConnect</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>afb57e9d7953b732d87ba0b048e74e927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>aad40e65081b1124e293b36a1e85dfaf0</anchor>
      <arglist>(::ompl::base::PlannerData &amp;_data) const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a5155719a6830ab904d1413054ecf2706</anchor>
      <arglist>(const ::ompl::base::PlannerTerminationCondition &amp;_ptc) override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a3e876f49260f19592a95e82a8962dd76</anchor>
      <arglist>(double _solveTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>aae616cfe61a7814b74c3829e7149c11c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionRadius</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a3c557081c00c23b8cdecca47cd839916</anchor>
      <arglist>(double _radius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConnectionRadius</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a9a2e5a0e86c40a4ce3fbce7baaf3569d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a3deaa08e88cdc13cd9fe69830d12cd7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a01e87f36b4708badcf1b5033e25dc4ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a781210c45e48a63645094a406cd8ce7c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>mGoalTree</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>a02b2a5d12912a05cf4abaf69ac36b737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mConnectionRadius</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>ab751752825c651e4408932ac081dedd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt;::ompl::base::State *,::ompl::base::State * &gt;</type>
      <name>mConnectionPoint</name>
      <anchorfile>d6/dc4/classaikido_1_1planner_1_1ompl_1_1CRRTConnect.html</anchorfile>
      <anchor>abeb3535b149b7c5a1cd6770d5fa091cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::GeometricStateSpace</name>
    <filename>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</filename>
    <class kind="class">aikido::planner::ompl::GeometricStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>GeometricStateSpace</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a14181a74c94fc26e2da917e6dc2d032c</anchor>
      <arglist>(statespace::StateSpacePtr _sspace, statespace::InterpolatorPtr _interpolator, distance::DistanceMetricPtr _dmetric, constraint::SampleablePtr _sampler, constraint::TestablePtr _boundsConstraint, constraint::ProjectablePtr _boundsProjection)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a98e9374ad1d370a892f2110b2e679eab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>ad5d499a0b2c440c48225f3fb8d0834e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>af8c2564421563df8f0298da5b68e47d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a2b52e42513d776e573d18ca888208334</anchor>
      <arglist>(::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a0ad8922a7a179bfd49fad21b590ad390</anchor>
      <arglist>(const ::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a1af10526511dbb2a570bbe88af651265</anchor>
      <arglist>(::ompl::base::State *_destination, const ::ompl::base::State *_source) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a93a7dac0fd520e527de48edd6d02c5bb</anchor>
      <arglist>(const ::ompl::base::State *_state1, const ::ompl::base::State *_state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a8e8c4a37673eb0584fadf704392b556d</anchor>
      <arglist>(const ::ompl::base::State *_state1, const ::ompl::base::State *_state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a3587040aae89844142a42f2dee08f5dc</anchor>
      <arglist>(const ::ompl::base::State *_from, const ::ompl::base::State *_to, double _t,::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a3f867ce617a1f1d8dee42f1f3a0b4c40</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::State *</type>
      <name>allocState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a947565010872907fe68d192f947f6d6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>::ompl::base::State *</type>
      <name>allocState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a6f13b6fd0e0e9a815f0f6d6f6b4eeaa9</anchor>
      <arglist>(const statespace::StateSpace::State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a52dee31edf6142049ea38dbbc90f91be</anchor>
      <arglist>(::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getAikidoStateSpace</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>ab9defa3f9c6fdc6351ca681e6f3e3f19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a408b0512191dadfa80e87f8fd2f8312d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::InterpolatorPtr</type>
      <name>mInterpolator</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>aa2da3679c625aa3ef741586cb3927961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>distance::DistanceMetricPtr</type>
      <name>mDistance</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a81921665c191a08b931e6227f4302352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::SampleablePtr</type>
      <name>mSampler</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a33571492d490456e6fc80d55d579f3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::TestablePtr</type>
      <name>mBoundsConstraint</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>a1c90a9a4171e52a5e9a6ed2f975495ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::ProjectablePtr</type>
      <name>mBoundsProjection</name>
      <anchorfile>df/dbd/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace.html</anchorfile>
      <anchor>acdafc7da23282fec05e9118bbc62ff32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::GeometricStateSpace::StateType</name>
    <filename>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</filename>
    <member kind="function">
      <type></type>
      <name>StateType</name>
      <anchorfile>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</anchorfile>
      <anchor>ab47287fb6b482e2244dbbd8cdb950798</anchor>
      <arglist>(statespace::StateSpace::State *_st)</arglist>
    </member>
    <member kind="variable">
      <type>statespace::StateSpace::State *</type>
      <name>mState</name>
      <anchorfile>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</anchorfile>
      <anchor>ab959a84df3c3df783d27c188debe38dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mValid</name>
      <anchorfile>d6/dbc/classaikido_1_1planner_1_1ompl_1_1GeometricStateSpace_1_1StateType.html</anchorfile>
      <anchor>aab21970e53ec410aa619cb35ca3e545c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::GoalRegion</name>
    <filename>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>GoalRegion</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a87c84452b9d22ff660c98bac39cd0dfe</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, constraint::TestablePtr _goalTestable, std::unique_ptr&lt; constraint::SampleGenerator &gt; _generator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGoal</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>adc7c3e6b5b2489123fb9593352be443d</anchor>
      <arglist>(::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a3d8ca00581c027a66f29f5c9458b1f55</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>couldSample</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a8012b2df123fb9931d0772f662348c4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a79a030bec482c9c7bc91581baf00c0a0</anchor>
      <arglist>(const ::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a114d0a341a05dc4b6ca5fb9c1060b4e9</anchor>
      <arglist>(const ::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::TestablePtr</type>
      <name>mTestable</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>a7bd5ed2032531e44ecf0a430bce70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; constraint::SampleGenerator &gt;</type>
      <name>mSampleGenerator</name>
      <anchorfile>dd/d36/classaikido_1_1planner_1_1ompl_1_1GoalRegion.html</anchorfile>
      <anchor>ab5355bcdb5401b22a7114ff92b158f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::MotionValidator</name>
    <filename>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionValidator</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>a2a6e94c2f9e3af8ee71c3442d1f1c70c</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, double _maxDistBtwValidityChecks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>aecfd8129e1412f6bc6ce3f878cc409a0</anchor>
      <arglist>(const ::ompl::base::State *_s1, const ::ompl::base::State *_s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>ae60746faa62c9456aede17bd90bd6114</anchor>
      <arglist>(const ::ompl::base::State *_s1, const ::ompl::base::State *_s2, std::pair&lt;::ompl::base::State *, double &gt; &amp;_lastValid) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mSequenceResolution</name>
      <anchorfile>df/d7d/classaikido_1_1planner_1_1ompl_1_1MotionValidator.html</anchorfile>
      <anchor>acd4f18b4e1e42e0240c5163b6e25a153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::StateSampler</name>
    <filename>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>StateSampler</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>af6cc91e259e23f4ed6302180b69b619c</anchor>
      <arglist>(const ::ompl::base::StateSpace *_space, std::unique_ptr&lt; constraint::SampleGenerator &gt; _generator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>a97bc3dda98a6a49ebb7153d4ca4cf768</anchor>
      <arglist>(::ompl::base::State *_state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>a0b23c75bdd66d0ed606bf851a1b3980c</anchor>
      <arglist>(::ompl::base::State *_state, const ::ompl::base::State *_near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>a157459a43c928a5b33227f2948f55a12</anchor>
      <arglist>(::ompl::base::State *_state, const ::ompl::base::State *_mean, double stdDev) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; aikido::constraint::SampleGenerator &gt;</type>
      <name>mGenerator</name>
      <anchorfile>d0/d36/classaikido_1_1planner_1_1ompl_1_1StateSampler.html</anchorfile>
      <anchor>aad4d89ed6b46931f7a2213982c08570c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::ompl::StateValidityChecker</name>
    <filename>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</filename>
    <member kind="function">
      <type></type>
      <name>StateValidityChecker</name>
      <anchorfile>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</anchorfile>
      <anchor>a27dad506560fe26003856ce123f4c87f</anchor>
      <arglist>(const ::ompl::base::SpaceInformationPtr &amp;_si, constraint::TestablePtr _constraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</anchorfile>
      <anchor>a080c7113ee5aa2ecfb1becea86acfa8c</anchor>
      <arglist>(const ::ompl::base::State *_state) const override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>constraint::TestablePtr</type>
      <name>mConstraint</name>
      <anchorfile>df/d18/classaikido_1_1planner_1_1ompl_1_1StateValidityChecker.html</anchorfile>
      <anchor>a9ecc537ce4707a157d28601300256b08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::parabolic</name>
    <filename>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</filename>
    <class kind="class">aikido::planner::parabolic::ParabolicSmoother</class>
    <class kind="class">aikido::planner::parabolic::ParabolicTimer</class>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcut</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a3b953539c07d33f11b8c2a254f4d2434</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMT, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a49dbe6e5f9ae926ed0e9f6a878f93037</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectory::Spline &gt;</type>
      <name>doShortcutAndBlend</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a4a864a9d7c4cc941f41eb8217ef844ba</anchor>
      <arglist>(const trajectory::Spline &amp;_inputTrajectory, aikido::constraint::TestablePtr _feasibilityCheck, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration, aikido::common::RNG &amp;_rng, double _timelimit=DEFAULT_TIMELIMT, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _checkResolution=DEFAULT_CHECK_RESOLUTION, double _tolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>abc87fc6c95d7d6a65c35a187af4971bd</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>computeParabolicTiming</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a71d41926976e9bc3b95199e7077ab345</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTrajectory, const Eigen::VectorXd &amp;_maxVelocity, const Eigen::VectorXd &amp;_maxAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>convertToSpline</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>abb2d3f31cde10092fb0f686b34d27a80</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTrajectory)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TIMELIMT</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a57f51689584df953bfbcce3285d83647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_BLEND_RADIUS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a5a6c51f8f280cc25caa4af68209d7090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>DEFAULT_BLEND_ITERATIONS</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a91556625d7b966f32ebe6e9a513dd1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_CHECK_RESOLUTION</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>a1846c0848aa85c637f2430cae9839d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>DEFAULT_TOLERANCE</name>
      <anchorfile>d2/d85/namespaceaikido_1_1planner_1_1parabolic.html</anchorfile>
      <anchor>acdc54d491b1fa68fb9f596449d7997af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::parabolic::ParabolicSmoother</name>
    <filename>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</filename>
    <base>aikido::planner::TrajectoryPostProcessor</base>
    <member kind="function">
      <type></type>
      <name>ParabolicSmoother</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>aa17f9e4d67e2a241b1b48c366d108e92</anchor>
      <arglist>(const Eigen::VectorXd &amp;_velocityLimits, const Eigen::VectorXd &amp;_accelerationLimits, bool _enableShortcut=true, bool _enableBlend=true, double _shortcutTimelimit=DEFAULT_TIMELIMT, double _blendRadius=DEFAULT_BLEND_RADIUS, int _blendIterations=DEFAULT_BLEND_ITERATIONS, double _feasibilityCheckResolution=DEFAULT_CHECK_RESOLUTION, double _feasibilityApproxTolerance=DEFAULT_TOLERANCE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ab7a31a254e2c907cf921bcf09b3f2beb</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_collisionTestable) override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ab0c53dc6cae4d77aee575338178b6fa0</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_collisionTestable) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>handleShortcutOrBlend</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>aae44773ce738921081579baba84c0236</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_collisionTestable)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mFeasibilityCheckResolution</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>aa7c40e01f4e0e1487c8d769b2fcebec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mFeasibilityApproxTolerance</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ac2f2f5c30288d3604139a60f92e12922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mVelocityLimits</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>afa78086da563e892fe527d3f91ab4ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mAccelerationLimits</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>a0f8d84e7d21e09329de2cd340ced3157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mEnableShortcut</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>ae2a96c5b6a7b503e74106fab81846e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mEnableBlend</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>abf3019c395d8053bbe3d6c5968506386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mShortcutTimelimit</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>acf19a34ce6565f8413f0d0605cb30584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mBlendRadius</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>acfb9d6a3bc8a67a41dc2bc9adc080c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mBlendIterations</name>
      <anchorfile>d4/d33/classaikido_1_1planner_1_1parabolic_1_1ParabolicSmoother.html</anchorfile>
      <anchor>aaef8e4fd96e1bf2b8bb2f86a5943912d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::parabolic::ParabolicTimer</name>
    <filename>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</filename>
    <base>aikido::planner::TrajectoryPostProcessor</base>
    <member kind="function">
      <type></type>
      <name>ParabolicTimer</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a32037335f69e00a2e9a13b27cbf59910</anchor>
      <arglist>(const Eigen::VectorXd &amp;_velocityLimits, const Eigen::VectorXd &amp;_accelerationLimits)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a8298379e662a935c8b8886a4b3e4771f</anchor>
      <arglist>(const aikido::trajectory::Interpolated &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>postprocess</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a1d8a115b807eab524d9166b39ca55981</anchor>
      <arglist>(const aikido::trajectory::Spline &amp;_inputTraj, const aikido::common::RNG &amp;_rng, const aikido::constraint::TestablePtr &amp;_constraint=nullptr) override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mVelocityLimits</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a8e394dc3abfb5b214fa259ec23eb1fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Eigen::VectorXd</type>
      <name>mAccelerationLimits</name>
      <anchorfile>d4/d6c/classaikido_1_1planner_1_1parabolic_1_1ParabolicTimer.html</anchorfile>
      <anchor>a98bd9a356151c49148268ab719ad4708</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::planner::vectorfield</name>
    <filename>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</filename>
    <class kind="class">aikido::planner::vectorfield::BodyNodePoseVectorField</class>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorOffsetVectorField</class>
    <class kind="class">aikido::planner::vectorfield::MoveEndEffectorPoseVectorField</class>
    <class kind="class">aikido::planner::vectorfield::VectorField</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>BodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a47ef9cf807108a60a46703a964ee7f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>ConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aa8fc53075a519c4368d7f6b42593768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>WeakBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>aeca425dda1cee907f7134df654097c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>WeakConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a6c63b8b5fc083805cd8a2fc21ad0b5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodePoseVectorField &gt;</type>
      <name>UniqueBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a1c5fe0dafc119636c4ee7e91364922f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodePoseVectorField &gt;</type>
      <name>UniqueConstBodyNodePoseVectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a097ddd184607ff861057aaa5a3ade77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; VectorField &gt;</type>
      <name>VectorFieldPtr</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a87ab043e8d644d8704b9e09d05a36510</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VectorFieldPlannerStatus</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a653bc87652ff77db6a831fa43cd74431</anchor>
      <arglist></arglist>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a1b52d4a7cbbcb87a81515c443453a2d5">TERMINATE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a92d766ccba721ca972a5627082925242">CACHE_AND_CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431a2f453cfe638e57e27bb0c9512436111e">CONTINUE</enumvalue>
      <enumvalue file="d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html" anchor="a653bc87652ff77db6a831fa43cd74431adfffe9658cd2a5ecefa682370bf06d5a">CACHE_AND_TERMINATE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>followVectorField</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a81f8bbaf6e7a9fac50ee3ff2ce1dcf25</anchor>
      <arglist>(const aikido::planner::vectorfield::VectorField &amp;vectorField, const aikido::statespace::StateSpace::State &amp;startState, const aikido::constraint::Testable &amp;constraint, std::chrono::duration&lt; double &gt; timelimit, double initialStepSize, double checkConstraintResolution, planner::PlanningResult *planningResult)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a560dc4a8d493a9767775901857e4217f</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, dart::dynamics::MetaSkeletonPtr metaskeleton, const dart::dynamics::BodyNodePtr &amp;bn, const aikido::constraint::TestablePtr &amp;constraint, const Eigen::Vector3d &amp;direction, double minDistance, double maxDistance, double positionTolerance, double angularTolerance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::PlanningResult *planningResult=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>planToEndEffectorPose</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a465d12cf58041222f6b4002d5c12076b</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, dart::dynamics::MetaSkeletonPtr metaskeleton, const dart::dynamics::BodyNodePtr &amp;bn, const aikido::constraint::TestablePtr &amp;constraint, const Eigen::Isometry3d &amp;goalPose, double poseErrorTolerance, double conversionRatioInGeodesicDistance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, std::chrono::duration&lt; double &gt; timelimit, planner::PlanningResult *planningResult=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeJointVelocityFromTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a8a266781e05a5e4e5ddf6f22472583ba</anchor>
      <arglist>(Eigen::VectorXd &amp;jointVelocity, const Eigen::Vector6d &amp;desiredTwist, const dart::dynamics::MetaSkeletonPtr metaSkeleton, const dart::dynamics::BodyNodePtr bodyNode, double jointLimitPadding, const Eigen::VectorXd &amp;jointVelocityLowerLimits, const Eigen::VectorXd &amp;jointVelocityUpperLimits, bool enforceJointVelocityLimits, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector6d</type>
      <name>computeGeodesicTwist</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>afa027fae31a834222c2f4ab8824f6496</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>computeGeodesicError</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>a564b72a8e78e5397bdad153c74622135</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeGeodesicDistance</name>
      <anchorfile>d9/d67/namespaceaikido_1_1planner_1_1vectorfield.html</anchorfile>
      <anchor>ac413955aa734563de5b5cadc0255f15c</anchor>
      <arglist>(const Eigen::Isometry3d &amp;fromTrans, const Eigen::Isometry3d &amp;toTrans, double r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::BodyNodePoseVectorField</name>
    <filename>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</filename>
    <base>aikido::planner::vectorfield::VectorField</base>
    <member kind="function">
      <type></type>
      <name>BodyNodePoseVectorField</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a44d8344422ab3425276aae016e3709d2</anchor>
      <arglist>(aikido::statespace::dart::MetaSkeletonStateSpacePtr metaSkeletonStateSpace, dart::dynamics::MetaSkeletonPtr metaSkeleton, dart::dynamics::BodyNodePtr bodyNode, double maxStepSize, double jointLimitPadding, bool enforceJointVelocityLimits=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateVelocity</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a0da56713d901bd0618c13417c45634ab</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state, Eigen::VectorXd &amp;qd) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorFieldPlannerStatus</type>
      <name>evaluateStatus</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>afd7ecc0cd7c7a417a3ceaf0ed7da2e16</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluateCartesianVelocity</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>ac776429f5f8b32cf8d566474e1fa5843</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose, Eigen::Vector6d &amp;cartesianVelocity) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorFieldPlannerStatus</type>
      <name>evaluateCartesianStatus</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a5f1444b170fd7250df67c50019018341</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateTrajectory</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a168c3ab38526b5913794ced471adee7a</anchor>
      <arglist>(const aikido::trajectory::Trajectory &amp;trajectory, const aikido::constraint::Testable *constraint, double evalStepSize, double &amp;evalTimePivot, bool includeEndTime) const override</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>getMetaSkeletonStateSpace</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a310adfe1af88f451a5c2ef4369cc5fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::dart::ConstMetaSkeletonStateSpacePtr</type>
      <name>getMetaSkeletonStateSpace</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>aa3653a6d5be98424d5687961ecf28f02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a9ab46b2904adefe50bcb669e509ffda4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::ConstMetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>aaf5338c62cce9808da01c9741add7cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::BodyNodePtr</type>
      <name>getBodyNode</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a4468c6388286e8835918bdaef448acd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::ConstBodyNodePtr</type>
      <name>getBodyNode</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a1898710a59b491aedb198c554cfd77a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorField</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a77de4ca96926670339624f2cf8344a01</anchor>
      <arglist>(aikido::statespace::StateSpacePtr stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a2708d5359d63bcb2d4d852574d8eaf48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>aikido::statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a399234fa766fc381cdc9030b91e3d7f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mMetaSkeletonStateSpace</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>ac0f08b1cf891252bd404eeb135c6a245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a314a3e9daac64a91693f50212078bf83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dart::dynamics::BodyNodePtr</type>
      <name>mBodyNode</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a729bae7cdc936e75674f7dd14f3c6942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxStepSize</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>af3bf54972bb159d8c5e34d10645fc7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mJointLimitPadding</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a3f987b32f0194fef7cc68e410b12e34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityLowerLimits</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>ae3eeeb7e8e3d251d03f356204bfa57d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityUpperLimits</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a630564a86c6105ed2c7f902975729806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mEnforceJointVelocityLimits</name>
      <anchorfile>d3/d9a/classaikido_1_1planner_1_1vectorfield_1_1BodyNodePoseVectorField.html</anchorfile>
      <anchor>a33754aac1e45c8ef63b1c92ea5c87a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aikido::statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a75a54570a9662e503a310f0fc624bbc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::MoveEndEffectorOffsetVectorField</name>
    <filename>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</filename>
    <base>aikido::planner::vectorfield::BodyNodePoseVectorField</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>MoveEndEffectorOffsetVectorField</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>af4ea74584b13f6a4a440ce016caeabce</anchor>
      <arglist>(aikido::statespace::dart::MetaSkeletonStateSpacePtr stateSpace, dart::dynamics::MetaSkeletonPtr metaskeleton, dart::dynamics::BodyNodePtr bn, const Eigen::Vector3d &amp;direction, double minDistance, double maxDistance, double positionTolerance, double angularTolerance, double maxStepSize, double jointLimitPadding)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateCartesianVelocity</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a6943f8e4d66d8093838a2953ff5d7e18</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose, Eigen::Vector6d &amp;cartesianVelocity) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorFieldPlannerStatus</type>
      <name>evaluateCartesianStatus</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>acaa471940f761182f1877ba515a6b0c1</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>mDirection</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a47be972eff51927b854cdd3362280ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMinDistance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a658ed52c9c5bd4d6c71eeacdc67a33b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mMaxDistance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a6831a05b7421c1e071a44dc464957314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mPositionTolerance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a1f4562506ce3850e1d47fed0740faca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mAngularTolerance</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>a5171b9301761d75441dbab07592cf1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Isometry3d</type>
      <name>mStartPose</name>
      <anchorfile>d1/d46/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorOffsetVectorField.html</anchorfile>
      <anchor>af0057b43e8c30eb90d84defb21bda52f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::MoveEndEffectorPoseVectorField</name>
    <filename>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</filename>
    <base>aikido::planner::vectorfield::BodyNodePoseVectorField</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>MoveEndEffectorPoseVectorField</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a4fc81d88145aff4ca3e40d4029268431</anchor>
      <arglist>(aikido::statespace::dart::MetaSkeletonStateSpacePtr stateSpace, dart::dynamics::MetaSkeletonPtr metaskeleton, dart::dynamics::BodyNodePtr bn, const Eigen::Isometry3d &amp;goalPose, double poseErrorTolerance, double r, double maxStepSize, double jointLimitPadding)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluateCartesianVelocity</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a89d81ed244f4ae0cf55b5e4d6c475342</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose, Eigen::Vector6d &amp;cartesianVelocity) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorFieldPlannerStatus</type>
      <name>evaluateCartesianStatus</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>ae47f66213c3d8697e119cf3884346e93</anchor>
      <arglist>(const Eigen::Isometry3d &amp;pose) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Isometry3d</type>
      <name>mGoalPose</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a68cdf745d0b6acf06609298e3e568683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mPoseErrorTolerance</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a1bf8926979507f1fe1ea9e2190baaf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mConversionRatioFromRadiusToMeter</name>
      <anchorfile>dd/da7/classaikido_1_1planner_1_1vectorfield_1_1MoveEndEffectorPoseVectorField.html</anchorfile>
      <anchor>a356ff799fe13eb58efce40af080d4d1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::planner::vectorfield::VectorField</name>
    <filename>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluateVelocity</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a3da25925d7340d1be97ec1ce8e1f1f92</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state, Eigen::VectorXd &amp;qd) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorFieldPlannerStatus</type>
      <name>evaluateStatus</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a4145ff693474621fb6c2486dec731057</anchor>
      <arglist>(const aikido::statespace::StateSpace::State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>evaluateTrajectory</name>
      <anchorfile>d9/d51/classaikido_1_1planner_1_1vectorfield_1_1VectorField.html</anchorfile>
      <anchor>a84ea932098cb0038434f4b657db95c4f</anchor>
      <arglist>(const aikido::trajectory::Trajectory &amp;trajectory, const aikido::constraint::Testable *constraint, double evalStepSize, double &amp;evalTimePivot, bool includeEndTime) const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::robot</name>
    <filename>dc/db7/namespaceaikido_1_1robot.html</filename>
    <namespace>aikido::robot::util</namespace>
    <class kind="class">aikido::robot::ConcreteManipulator</class>
    <class kind="class">aikido::robot::ConcreteRobot</class>
    <class kind="struct">aikido::robot::GrabMetadata</class>
    <class kind="class">aikido::robot::Hand</class>
    <class kind="class">aikido::robot::Manipulator</class>
    <class kind="class">aikido::robot::Robot</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteManipulator &gt;</type>
      <name>ConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a05b729cc4715c216c1d9089ba8738b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>ConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a901c435e1bc7867c4eeddd279f0e0639</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteManipulator &gt;</type>
      <name>WeakConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a425bd1c98bd075d772913803c5324eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>WeakConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a4154eef0b01c18fc28875c9de826ed08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteManipulator &gt;</type>
      <name>UniqueConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>aaacd06a986c474997b1ea9497839320c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteManipulator &gt;</type>
      <name>UniqueConstConcreteManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ab5c7b679f8fac1221a204bf6ce6c183d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConcreteRobot &gt;</type>
      <name>ConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae3903bb64eec9aa908c4ba18624d8250</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ConcreteRobot &gt;</type>
      <name>ConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>abbec688092f448056645d86297351cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConcreteRobot &gt;</type>
      <name>WeakConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac4e28850035f3715892b83a67a01a4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ConcreteRobot &gt;</type>
      <name>WeakConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae65c3e8836869540252e90d89e101b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConcreteRobot &gt;</type>
      <name>UniqueConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bdcca7f55d97b8aa8f2aab8d1db253c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ConcreteRobot &gt;</type>
      <name>UniqueConstConcreteRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a24366d9001c9726d6921355743c200e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Hand &gt;</type>
      <name>HandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad61197ab272f863ecd14d59437cadd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Hand &gt;</type>
      <name>ConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae56be858d4d3e5a4a19b8158edef0f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Hand &gt;</type>
      <name>WeakHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6bbaf97c024ea686f6cc846f8162bf6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Hand &gt;</type>
      <name>WeakConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a41faab9c161dc405ca69bf442d4bd7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Hand &gt;</type>
      <name>UniqueHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a6647bdbf5aedb76a1617077b98eae2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Hand &gt;</type>
      <name>UniqueConstHandPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a48d7d89f8adfd0a44dfa8f5dc161e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Manipulator &gt;</type>
      <name>ManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae9ff74efcf27c603b2a47bd2d48a081e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Manipulator &gt;</type>
      <name>ConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a9c1f16e4f7af8f1ea85771041f7e24d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Manipulator &gt;</type>
      <name>WeakManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7244e08967f44ee9c7ad4d701b2cc72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Manipulator &gt;</type>
      <name>WeakConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a92c30cea0694f5da5a06c2227e25e9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Manipulator &gt;</type>
      <name>UniqueManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a7d581dde2230eb9c6dad42ff3cf26234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Manipulator &gt;</type>
      <name>UniqueConstManipulatorPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a3b2f2cb16e67a92865da5011cdadb87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ad935170cf3805e00e82c5661d840464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Robot &gt;</type>
      <name>ConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a5b34bc49be50b8fb406e8ac7ef3d5804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Robot &gt;</type>
      <name>WeakRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ae7ea0c2414452c6e44e04727ff411aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Robot &gt;</type>
      <name>WeakConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a08a329dcb035c215cb55814024d81767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Robot &gt;</type>
      <name>UniqueRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>ac36de5e6cc70a361a59dd0892f629c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Robot &gt;</type>
      <name>UniqueConstRobotPtr</name>
      <anchorfile>dc/db7/namespaceaikido_1_1robot.html</anchorfile>
      <anchor>a35cdb287258f9253e92ff8b9da6baccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::ConcreteManipulator</name>
    <filename>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</filename>
    <base>aikido::robot::Manipulator</base>
    <member kind="function">
      <type></type>
      <name>ConcreteManipulator</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ad815f7f232fdd72c690e4e8e4f6ee6a3</anchor>
      <arglist>(RobotPtr robot, HandPtr hand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcreteManipulator</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a88516f499eaa65c5582fc1abd0cb501d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HandPtr</type>
      <name>getHand</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a0ca91f484e86cf7e2a4781f59002e6d9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>smoothPath</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>aefb1dc454954f3a462be869ef3260705</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::trajectory::Trajectory *path, const constraint::TestablePtr &amp;constraint) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>retimePath</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a89c89c36aea5e68fefef24df3447efee</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::trajectory::Trajectory *path) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executeTrajectory</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a976aa57f21a127cb1e350026deadc29e</anchor>
      <arglist>(const trajectory::TrajectoryPtr &amp;trajectory) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::optional&lt; Eigen::VectorXd &gt;</type>
      <name>getNamedConfiguration</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ad4ebfc80aff14d61da9071ae933b0d45</anchor>
      <arglist>(const std::string &amp;name) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamedConfigurations</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a8454c44017f9bf83e51a52ec0e09e7c5</anchor>
      <arglist>(std::unordered_map&lt; std::string, const Eigen::VectorXd &gt; namedConfigurations) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ae7a172cfb38f8c0d62516dc3fa2436d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>adfba9278e5fc92764ce36858f929f18e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ad5523b4b5e895e4807b7bdf1049ad7bf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoot</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a16554276fdf101c106c4e034f30727ae</anchor>
      <arglist>(Robot *robot) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a4d17d40e2f54d7aa7d594b081698e662</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual constraint::dart::CollisionFreePtr</type>
      <name>getSelfCollisionConstraint</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a28bb38ab1cbd3297b3b1012d7fa57f1e</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::constraint::TestablePtr</type>
      <name>getFullCollisionConstraint</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a8ac2c12849f3316f6fd00ea44469c54f</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const constraint::dart::CollisionFreePtr &amp;collisionFree) override</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1cec99fda9c4d6b7e686ff028d002451</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const constraint::dart::CollisionFreePtr &amp;collisionFree, const Eigen::Vector3d &amp;direction, double distance, double timelimit, double positionTolerance, double angularTolerance)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planEndEffectorStraight</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>aa24cdc5882a9bb773fe22d7a18914078</anchor>
      <arglist>(statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const constraint::dart::CollisionFreePtr &amp;collisionFree, double distance, double timelimit, double positionTolerance, double angularTolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorFieldPlannerParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>abd88a6949cee7e4d2163be8d677e5ab4</anchor>
      <arglist>(const util::VectorFieldPlannerParameters &amp;vfParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCRRTPlannerParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1614d0a923e13aeefa083fe3bf161f15</anchor>
      <arglist>(const util::CRRTPlannerParameters &amp;crrtParameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Manipulator</name>
      <anchorfile>d9/d57/classaikido_1_1robot_1_1Manipulator.html</anchorfile>
      <anchor>a99725840c4dbbb8921964e1453542da7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Robot</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a4710e8de50e608d60255c0404b0ec69f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Eigen::Vector3d</type>
      <name>getEndEffectorDirection</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a05f29ead73e578833267a2bbb1b571bf</anchor>
      <arglist>(const dart::dynamics::BodyNodePtr &amp;body) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RobotPtr</type>
      <name>mRobot</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1d381c8ecd8b648372397abdca8d3f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HandPtr</type>
      <name>mHand</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a066f0719283806f905588899e63390cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>util::VectorFieldPlannerParameters</type>
      <name>mVectorFieldParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>a1d027290dd7dbd5265fbd7f637ce301d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>util::CRRTPlannerParameters</type>
      <name>mCRRTParameters</name>
      <anchorfile>df/d03/classaikido_1_1robot_1_1ConcreteManipulator.html</anchorfile>
      <anchor>ab4b5182a17ecfe9ef49cace7a1f38c7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::ConcreteRobot</name>
    <filename>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</filename>
    <base>aikido::robot::Robot</base>
    <member kind="function">
      <type></type>
      <name>ConcreteRobot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>afc5cdbec101664800ea4d1fd0aa05dc2</anchor>
      <arglist>(const std::string &amp;name, dart::dynamics::MetaSkeletonPtr metaSkeleton, bool simulation, aikido::common::UniqueRNGPtr rng, aikido::control::TrajectoryExecutorPtr trajectoryExecutor, dart::collision::CollisionDetectorPtr collisionDetector, std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt; selfCollisionFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcreteRobot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a23295cfbb07738840a87fe36ef04d18d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::trajectory::UniqueSplinePtr</type>
      <name>smoothPath</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a54b3d67fa115f8bc329e5b1b8f7926da</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::trajectory::Trajectory *path, const constraint::TestablePtr &amp;constraint) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::trajectory::UniqueSplinePtr</type>
      <name>retimePath</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ad2ca847944c9fd1be75af34d7e48e9f7</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::trajectory::Trajectory *path) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executeTrajectory</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a869d08c1e2e1f48ef2149fcb561426f4</anchor>
      <arglist>(const trajectory::TrajectoryPtr &amp;trajectory) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::optional&lt; Eigen::VectorXd &gt;</type>
      <name>getNamedConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ac003ab65248f873f0f064b8860ddcefa</anchor>
      <arglist>(const std::string &amp;name) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamedConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a44dca833cc463f97166bca12f628451b</anchor>
      <arglist>(std::unordered_map&lt; std::string, const Eigen::VectorXd &gt; namedConfigurations) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ad28f3b5b5cfee85cdf204f3ab7be1c4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a48cdbd0a37ed43e089076a27206ad8e9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a33fcae6705809ad84095c4389053617f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>aa7bc5f3c21551d78b5a2843363147911</anchor>
      <arglist>(Robot *robot) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a99352e68faa59934f37a8ea6fb752587</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::constraint::dart::CollisionFreePtr</type>
      <name>getSelfCollisionConstraint</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>afa4512a6eacc41f5440ae143bc9a46ac</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual aikido::constraint::TestablePtr</type>
      <name>getFullCollisionConstraint</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>aef21ab3d714672543927ffe228c57344</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const constraint::dart::CollisionFreePtr &amp;collisionFree) override</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a05c819255ca01884738d7824630e686e</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::statespace::StateSpace::State *goalState, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a83d144ce90fa99e01c5ef72c2683ddbe</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const Eigen::VectorXd &amp;goal, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a7103e7e6ab4598f2049aeb9b38847f3f</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; aikido::statespace::StateSpace::State * &gt; &amp;goalStates, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>af3fa82c6f2bdc2ea45407f76df0b1e34</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; Eigen::VectorXd &gt; &amp;goals, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToTSR</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a30950d25b30ca0e755f8e8f4daa5c828</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const aikido::constraint::dart::TSRPtr &amp;tsr, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit, std::size_t maxNumTrials)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToTSRwithTrajectoryConstraint</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>addd9173b5f9ada027b4bfa995506ee09</anchor>
      <arglist>(const aikido::statespace::dart::MetaSkeletonStateSpacePtr &amp;stateSpace, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const aikido::constraint::dart::TSRPtr &amp;goalTsr, const aikido::constraint::dart::TSRPtr &amp;constraintTsr, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>aikido::trajectory::TrajectoryPtr</type>
      <name>planToNamedConfiguration</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ae13c96431315c4d033ecc07b3cb6b114</anchor>
      <arglist>(const std::string &amp;name, const aikido::constraint::dart::CollisionFreePtr &amp;collisionFree, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCRRTPlannerParameters</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a83dd9317e549e465c294ba56c213664f</anchor>
      <arglist>(const util::CRRTPlannerParameters &amp;crrtParameters)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::unordered_map&lt; std::string, const Eigen::VectorXd &gt;</type>
      <name>ConfigurationMap</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>afe55d65367f7885006ee3236f64319e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::unique_ptr&lt; aikido::common::RNG &gt;</type>
      <name>cloneRNG</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a8b2cbd23a5f8431ed309ecdd279005fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Eigen::VectorXd</type>
      <name>getVelocityLimits</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a021c79e8a291eed8789dce7a99fe6a29</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;metaSkeleton) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Eigen::VectorXd</type>
      <name>getAccelerationLimits</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a987c48a3fdc7d0c5a0d9be20d02ef916</anchor>
      <arglist>(const dart::dynamics::MetaSkeleton &amp;metaSkeleton) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Robot *</type>
      <name>mRootRobot</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a13a6e96ff4e965704051fa9a8def7bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ae2a61d9b2371a5d65ba4ba6d04194cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a502559638fd409e373535596bb63046c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ab42d761d9e6d9882561b1176f87afc4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>mParentSkeleton</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a2a5b9d9d9faaf649bac46ad816844dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mSimulation</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a3891737ef224e6d31179849fca0cfeb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; common::RNG &gt;</type>
      <name>mRng</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>aa8dcb22211d40d022d3a5d84caf0c478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; control::TrajectoryExecutor &gt;</type>
      <name>mTrajectoryExecutor</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a281a52fe856e2ecfddb5c2f30bf7ac7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mCollisionResolution</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>adc691a896819237e5ad6be4fcf1f2471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConfigurationMap</type>
      <name>mNamedConfigurations</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a4b937aa6bb5e7650408824b31e80cc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::collision::CollisionDetectorPtr</type>
      <name>mCollisionDetector</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>ac8d6bb3ff3fc0108deea576e008b4de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; dart::collision::BodyNodeCollisionFilter &gt;</type>
      <name>mSelfCollisionFilter</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>a76dad7cb89d4d91c7394279ed889f2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>util::CRRTPlannerParameters</type>
      <name>mCRRTParameters</name>
      <anchorfile>d6/dc0/classaikido_1_1robot_1_1ConcreteRobot.html</anchorfile>
      <anchor>afab8012e237769ba2022cf5be38562ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::robot::GrabMetadata</name>
    <filename>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</filename>
    <member kind="function">
      <type></type>
      <name>GrabMetadata</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>a3d151e6d6a127f279aff45327688aed0</anchor>
      <arglist>(dart::dynamics::BodyNodePtr bodyNode, const std::string &amp;oldName, dart::dynamics::SkeletonPtr parentSkeleton, const dart::dynamics::FreeJoint::Properties &amp;jointProperties)</arglist>
    </member>
    <member kind="variable">
      <type>dart::dynamics::BodyNodePtr</type>
      <name>mBodyNode</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>a8766d2ff245be1749774104f451c46d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mOldName</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>ae993ec4a3347ac5050b1545607b83d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>mParentSkeleton</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>ad0e09e687c6059e95307fcc0c7b98555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dart::dynamics::FreeJoint::Properties</type>
      <name>mJointProperties</name>
      <anchorfile>d9/d76/structaikido_1_1robot_1_1GrabMetadata.html</anchorfile>
      <anchor>a2bd07ddf06117bf8123c2fd4cfbe4d90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::Hand</name>
    <filename>d0/dbc/classaikido_1_1robot_1_1Hand.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Hand</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>aa20dacef3e9672d89605291b04134593</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>grab</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>a7f525d8c7c57d6aa4925fb4a2d44a41d</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;bodyToGrab)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ungrab</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>ae3e2d401b5fd792d907b593182325587</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executePreshape</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>ae2dc692a31881ab9c74e380891af0acd</anchor>
      <arglist>(const std::string &amp;preshapeName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>afcbde2db207dbce11cbecc93f2ce33a2</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>af5024bd6557f7465792f5f1e2de7b27c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::BodyNode *</type>
      <name>getBodyNode</name>
      <anchorfile>d0/dbc/classaikido_1_1robot_1_1Hand.html</anchorfile>
      <anchor>acf36bd32545b79bad3814e9c58c1f225</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::Manipulator</name>
    <filename>d9/d57/classaikido_1_1robot_1_1Manipulator.html</filename>
    <base>aikido::robot::Robot</base>
    <member kind="function" virtualness="pure">
      <type>virtual HandPtr</type>
      <name>getHand</name>
      <anchorfile>d9/d57/classaikido_1_1robot_1_1Manipulator.html</anchorfile>
      <anchor>a25ca5c53f2f20f2284c6155c09aaf5b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>smoothPath</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a0b8feb78c2923efdde5db8a71c19b1b9</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::trajectory::Trajectory *path, const constraint::TestablePtr &amp;constraint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; aikido::trajectory::Spline &gt;</type>
      <name>retimePath</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>af8a55f4ededa2faac7e924f499e5d9c1</anchor>
      <arglist>(const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const aikido::trajectory::Trajectory *path)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>executeTrajectory</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a5e0d3133893acf084f2f8389c225d5a4</anchor>
      <arglist>(const trajectory::TrajectoryPtr &amp;trajectory) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::optional&lt; Eigen::VectorXd &gt;</type>
      <name>getNamedConfiguration</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a694c792574ece7b2f6c70dcb7a9b818e</anchor>
      <arglist>(const std::string &amp;name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNamedConfigurations</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ae99c7fb3e9acd08b631dfcc8408ba629</anchor>
      <arglist>(std::unordered_map&lt; std::string, const Eigen::VectorXd &gt; namedConfigurations)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>afa8718b04a2be919c22f728e4db39e3f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dart::dynamics::MetaSkeletonPtr</type>
      <name>getMetaSkeleton</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a5744f5c9c28ceb3014486855aef7c518</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual aikido::statespace::dart::MetaSkeletonStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a1ea52b6e56edb8987c90656dc2f94d7c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRoot</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ae5f1d477af57127e4ca82df3d108afc2</anchor>
      <arglist>(Robot *robot)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>a49439185582d4cb4d786cf0424867f70</anchor>
      <arglist>(const std::chrono::system_clock::time_point &amp;timepoint)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constraint::dart::CollisionFreePtr</type>
      <name>getSelfCollisionConstraint</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ad986dba93d22055873d1522a7519a690</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constraint::TestablePtr</type>
      <name>getFullCollisionConstraint</name>
      <anchorfile>d2/da3/classaikido_1_1robot_1_1Robot.html</anchorfile>
      <anchor>ade094ae2fd6a6108f6af1b68ce4103f9</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const constraint::dart::CollisionFreePtr &amp;collisionFree)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::robot::Robot</name>
    <filename>d2/da3/classaikido_1_1robot_1_1Robot.html</filename>
  </compound>
  <compound kind="namespace">
    <name>aikido::robot::util</name>
    <filename>d1/ded/namespaceaikido_1_1robot_1_1util.html</filename>
    <class kind="struct">aikido::robot::util::VectorFieldPlannerParameters</class>
    <class kind="struct">aikido::robot::util::CRRTPlannerParameters</class>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToConfiguration</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>ae38f68cade137cbb57486d63a9a24348</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const statespace::StateSpace::State *goalState, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a099ddc4703caa41318f1313e3e355923</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const std::vector&lt; statespace::StateSpace::State * &gt; &amp;goalStates, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToTSR</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>ab640d43658f7bfe0185795c3bfd24e33</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;tsr, const constraint::TestablePtr &amp;collisionTestable, common::RNG *rng, double timelimit, std::size_t maxNumTrials)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToTSRwithTrajectoryConstraint</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a7748aabfa71d6f1ec11da53acb5bfde2</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::dart::TSRPtr &amp;goalTsr, const constraint::dart::TSRPtr &amp;constraintTsr, const constraint::TestablePtr &amp;collisionTestable, double timelimit, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::TrajectoryPtr</type>
      <name>planToEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a58ca33cdc0383f6062887d79d796c267</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;body, const Eigen::Vector3d &amp;direction, const constraint::TestablePtr &amp;collisionTestable, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const VectorFieldPlannerParameters &amp;vfParameters=VectorFieldPlannerParameters(), const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>trajectory::InterpolatedPtr</type>
      <name>planToEndEffectorOffsetByCRRT</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a78b24f5bd36e678d1c22942dae4b9cc7</anchor>
      <arglist>(const statespace::dart::MetaSkeletonStateSpacePtr &amp;space, const dart::dynamics::MetaSkeletonPtr &amp;metaSkeleton, const dart::dynamics::BodyNodePtr &amp;bodyNode, const constraint::TestablePtr &amp;collisionTestable, const Eigen::Vector3d &amp;direction, double distance, double timelimit, double positionTolerance=1e-3, double angularTolerance=1e-3, const CRRTPlannerParameters &amp;crrtParameters=CRRTPlannerParameters())</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; std::string, const Eigen::VectorXd &gt;</type>
      <name>parseYAMLToNamedConfigurations</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aa2e3f025f76403db20b6c29b3078340e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGoalAndConstraintTSRForEndEffectorOffset</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>a1e095c9730f6bda4109732401ce57674</anchor>
      <arglist>(const dart::dynamics::BodyNodePtr &amp;bodyNode, const Eigen::Vector3d &amp;direction, double distance, const constraint::dart::TSRPtr &amp;goal, const constraint::dart::TSRPtr &amp;constraint, double positionTolerance=1e-3, double angularTolerance=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>getLookAtIsometry</name>
      <anchorfile>d1/ded/namespaceaikido_1_1robot_1_1util.html</anchorfile>
      <anchor>aaa61f9f714f3bc0ad001568ca7e41f9e</anchor>
      <arglist>(const Eigen::Vector3d &amp;positionFrom, const Eigen::Vector3d &amp;positionTo)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::robot::util::VectorFieldPlannerParameters</name>
    <filename>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorFieldPlannerParameters</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a5aec8b4c6ae3a5510b12e6d4592343be</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorFieldPlannerParameters</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a88d8aa76b9e213c3cc20a9e309ea846f</anchor>
      <arglist>(double linearVelocity, double negativeDistanceTolerance, double positiveDistanceTolerance, double initialStepSize, double jointLimitTolerance, double constraintCheckResolution, double linearGain=1.0, double angularGain=0.2, double timestep=0.1)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>linearVelocity</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>aeb477d5cfff0f2d708f87c5ef2730526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>negativeDistanceTolerance</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a9d6d88dc4ebfef7d2ebd39c21c854392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>positiveDistanceTolerance</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a04119d0b95886b30e57c5784794ca219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initialStepSize</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a49bdf1a44bf1cb0ba691903343ed5fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>jointLimitTolerance</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>af21abd43781dee671cb04c5556c03982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>constraintCheckResolution</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a397fea72d6fad208fa1d1a215fa4cc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>linearGain</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>ac0c8e81c56f65b8f1ee6c8a663d39701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>angularGain</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a3707552a2bc2342c299d07e3aebe5a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timestep</name>
      <anchorfile>dd/d04/structaikido_1_1robot_1_1util_1_1VectorFieldPlannerParameters.html</anchorfile>
      <anchor>a6a515250a860ea9d3ba8e49970cbcf39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::robot::util::CRRTPlannerParameters</name>
    <filename>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>CRRTPlannerParameters</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a55f4a5856beda8770bf779cbcf07d156</anchor>
      <arglist>(common::RNG *rng=nullptr, std::size_t maxNumTrials=5, double maxExtensionDistance=std::numeric_limits&lt; double &gt;::infinity(), double maxDistanceBtwProjections=0.1, double minStepSize=0.05, double minTreeConnectionDistance=0.1, std::size_t projectionMaxIteration=20, double projectionTolerance=1e-4)</arglist>
    </member>
    <member kind="variable">
      <type>common::RNG *</type>
      <name>rng</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a2cecb8a41ecf762190a8bfd297183a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxNumTrials</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>ad6f051c4b3fe66f399a89b525282d880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxExtensionDistance</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a18853502f89986343dce8f299fda0575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxDistanceBtwProjections</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a1c0855000763cafe48c67a22eda86a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minStepSize</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a727f1a9fcbe94e9aede3056b694496b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minTreeConnectionDistance</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a1945c3aac71241f36eae6e079689e02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>projectionMaxIteration</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a056305e47474b109c065bdf032a32886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>projectionTolerance</name>
      <anchorfile>d2/db1/structaikido_1_1robot_1_1util_1_1CRRTPlannerParameters.html</anchorfile>
      <anchor>a496561503d34536b6589f0b57fa162b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::rviz</name>
    <filename>df/db5/namespaceaikido_1_1rviz.html</filename>
    <class kind="class">aikido::rviz::BodyNodeMarker</class>
    <class kind="class">aikido::rviz::FrameMarker</class>
    <class kind="class">aikido::rviz::InteractiveMarkerViewer</class>
    <class kind="struct">aikido::rviz::BinaryResource</class>
    <class kind="struct">aikido::rviz::TextureResource</class>
    <class kind="struct">aikido::rviz::MeshResource</class>
    <class kind="struct">aikido::rviz::ResourceRequest</class>
    <class kind="class">aikido::rviz::ResourceServer</class>
    <class kind="class">aikido::rviz::ShapeFrameMarker</class>
    <class kind="class">aikido::rviz::SkeletonMarker</class>
    <class kind="class">aikido::rviz::TrajectoryMarker</class>
    <class kind="class">aikido::rviz::TSRMarker</class>
    <class kind="class">aikido::rviz::WorldInteractiveMarkerViewer</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BodyNodeMarker &gt;</type>
      <name>BodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2caae3ca963e1d82a48e384680eeb9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>ConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6f3390775e93a2d0e218b13487d11b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BodyNodeMarker &gt;</type>
      <name>WeakBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a80c346eb0668f6ec82bd9094bb766eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>WeakConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a186798f195df3096da5979a48b57194d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BodyNodeMarker &gt;</type>
      <name>UniqueBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac9e830eb01365f1f7dc33e5aa197ffd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BodyNodeMarker &gt;</type>
      <name>UniqueConstBodyNodeMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a01cf381a90c2eb030b3fe2a84e9fc95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; FrameMarker &gt;</type>
      <name>FrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a71c26a83d75818ef01efaac71eeed5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const FrameMarker &gt;</type>
      <name>ConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a259b8e0e923cdd675d4f2795babe5b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; FrameMarker &gt;</type>
      <name>WeakFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a35bccf6e1f37a585ea67274e890ac8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const FrameMarker &gt;</type>
      <name>WeakConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2b8c9dfa9a51530e18a5fd13d99b7095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; FrameMarker &gt;</type>
      <name>UniqueFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a4b2f19a3a62965fc12fc8ff2cfc675fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const FrameMarker &gt;</type>
      <name>UniqueConstFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a100ccced3dd6c20edf64533b566eb400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>InteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aac91d4365e1ab047ad7d8db7676a4bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>ConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a289c308fceb16012c144f43b6c3d5591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>WeakInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7f68b334063581103501e894ce311569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>WeakConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a28a06069c73873da3736f6d9a64213e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; InteractiveMarkerViewer &gt;</type>
      <name>UniqueInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac28e45377726d43cb1f266a1b94ff2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const InteractiveMarkerViewer &gt;</type>
      <name>UniqueConstInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac2e3bdd3914efe42b60aa34fe3b6ddaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SkeletonMarker &gt;</type>
      <name>SkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a34c18ceffcdaf5069bd9e4dd1fff6138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const SkeletonMarker &gt;</type>
      <name>ConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ac0608bfce88f8d98aae072fc3417f47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; SkeletonMarker &gt;</type>
      <name>WeakSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a93b63da472cb064ee34784703eb54b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const SkeletonMarker &gt;</type>
      <name>WeakConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeb4d34775b5b1b118169e8a592c9e3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SkeletonMarker &gt;</type>
      <name>UniqueSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a86f3d2693acc64aec0cccb4333cdb04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const SkeletonMarker &gt;</type>
      <name>UniqueConstSkeletonMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a75aa225502b51f99e37c3a477e1f1f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TrajectoryMarker &gt;</type>
      <name>TrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a7af26876878ce12697125131d1c5506c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>ConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a185736f10f213b7055511921a016e6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TrajectoryMarker &gt;</type>
      <name>WeakTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afb1c1eb2215ba1fa4d9bf1d9b25c0c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>WeakConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1273cc977c76332e21b2fc10b95b920c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TrajectoryMarker &gt;</type>
      <name>UniqueTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a97920acb9abdf2a704fbc054834d2b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TrajectoryMarker &gt;</type>
      <name>UniqueConstTrajectoryMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a894bb565b23b21b3add62f6b97f62cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TSRMarker &gt;</type>
      <name>TSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a590951cdd9bce6890edd775ed8ef2a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const TSRMarker &gt;</type>
      <name>ConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aef0d1b452a6ba7e6dfe95fbe552105d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TSRMarker &gt;</type>
      <name>WeakTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab40eb785f9450167704216f3ab15cdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const TSRMarker &gt;</type>
      <name>WeakConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae1925d8939631694db9a676f236d1d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TSRMarker &gt;</type>
      <name>UniqueTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aeba7efd72953d7cb0e919d0e4b3b889c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TSRMarker &gt;</type>
      <name>UniqueConstTSRMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aba793434f7d1a453e19df5f2c139a6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TextureResource &gt;</type>
      <name>TextureResourcePtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0844c3a1c44227f91e00540aeec98e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>ShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aae58ff66e95bc1d2dcb81cface7f44fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>ConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ab349244402ace54b805b3d025f9e07ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>WeakShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a2bbf49828f7d08d2fe9544e93b3fc180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>WeakConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a687a16a76c2b7713e94f0d71f7c9ff0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ShapeFrameMarker &gt;</type>
      <name>UniqueShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1a6038295bfe54351ac5d172d9d89b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ShapeFrameMarker &gt;</type>
      <name>UniqueConstShapeFrameMarkerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afdda6d93e2b5a744245d74ebbd8892a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; WorldInteractiveMarkerViewer &gt;</type>
      <name>WorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0c12e75ddb2e2e5381f534fd98fb33ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const WorldInteractiveMarkerViewer &gt;</type>
      <name>ConstWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ad1e8d560c9aecf37bc10ec92e94e0f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; WorldInteractiveMarkerViewer &gt;</type>
      <name>WeakWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a841cc2d949a49bcafcc6434e79f10c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const WorldInteractiveMarkerViewer &gt;</type>
      <name>WeakConstWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6709adc1ce981eadf9f59d8b81e38aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; WorldInteractiveMarkerViewer &gt;</type>
      <name>UniqueWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a57da9ff74c7030662350d3de7191e936</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const WorldInteractiveMarkerViewer &gt;</type>
      <name>UniqueConstWorldInteractiveMarkerViewerPtr</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a0a7c17de106acd33f66f6b7ee3993bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Point</type>
      <name>convertEigenToROSPoint</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a68d60ee0ed5b2ff23a267682703a22bf</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Vector3</type>
      <name>convertEigenToROSVector3</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a8a0437e24546ebf8dce5a6fb7ff5551a</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Quaternion</type>
      <name>convertEigenToROSQuaternion</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a804574a4b82443989184e879d563d48c</anchor>
      <arglist>(const Eigen::Quaterniond &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>geometry_msgs::Pose</type>
      <name>convertEigenToROSPose</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>afa63ee8d6fb65d4fea1c4f667e8de533</anchor>
      <arglist>(const Eigen::Isometry3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std_msgs::ColorRGBA</type>
      <name>convertEigenToROSColorRGBA</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a6108bf053834b682698956b03d98943b</anchor>
      <arglist>(const Eigen::Vector4d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>convertROSColorRGBAToEigen</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a974f133392c086992f9cc90bde90d273</anchor>
      <arglist>(const std_msgs::ColorRGBA &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertAssimpMeshToROSTriangleList</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>acaca6e3485a0418b4a18001c5197ae30</anchor>
      <arglist>(const aiMesh &amp;mesh, std::vector&lt; geometry_msgs::Point &gt; *triangle_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3d9fc2131aba5a272fd7846802906695</anchor>
      <arglist>(const dart::dynamics::Shape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a3270c5fb93d7d80d2ac4d67e010f1baa</anchor>
      <arglist>(const dart::dynamics::BoxShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a84ab12d490fdb1bd1780569f71ac6eb9</anchor>
      <arglist>(const dart::dynamics::CylinderShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>ae2f3076e02e73fc14fa795f072c79da1</anchor>
      <arglist>(const dart::dynamics::EllipsoidShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a03f4480210c9fad6a22086df6f0fe8ba</anchor>
      <arglist>(const dart::dynamics::LineSegmentShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>aad67b7fedb6ac6987931138c0457e7b1</anchor>
      <arglist>(const dart::dynamics::MeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a9678121bbcd9c4211ac3bd3717479cce</anchor>
      <arglist>(const dart::dynamics::PlaneShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager, double width=100.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertShape</name>
      <anchorfile>df/db5/namespaceaikido_1_1rviz.html</anchorfile>
      <anchor>a1b99f62c6870b0b7a2f3f70bc133c18f</anchor>
      <arglist>(const dart::dynamics::SoftMeshShape &amp;shape, visualization_msgs::Marker *marker, ResourceServer *resourceManager)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::BodyNodeMarker</name>
    <filename>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>BodyNodeMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a3826ab7afa0256fab850eefbe43df259</anchor>
      <arglist>(ResourceServer *resourceServer, interactive_markers::InteractiveMarkerServer *markerServer, const dart::dynamics::WeakBodyNodePtr &amp;bodyNode, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BodyNodeMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a9d0cd9dd1c7e94380a066b267c6ee109</anchor>
      <arglist>(const BodyNodeMarker &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>BodyNodeMarker &amp;</type>
      <name>operator=</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a07e6a9edeec607586e23f28549096529</anchor>
      <arglist>(const BodyNodeMarker &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BodyNodeMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>ac9443a022ed46ec6b8e7487322b972ec</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a1d69117b0a11674768385e8f88fd5bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColor</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a2240506e5e23bd2c04e654be2e73c0ff</anchor>
      <arglist>(const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetColor</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a2e92116d6787f1270bd78701c3c386f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; const dart::dynamics::ShapeNode *, std::unique_ptr&lt; ShapeFrameMarker &gt;&gt;</type>
      <name>ShapeFrameMarkerMap</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>ac0bb212a7b7019deaf2608ceb289d15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a7f27dccbc73325a261c6e7122c55331e</anchor>
      <arglist>(const dart::dynamics::BodyNode &amp;bodyNode)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::WeakBodyNodePtr</type>
      <name>mBodyNode</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a4874a04f2197f1546eb8a36363c97345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::common::Connection</type>
      <name>mOnStructuralChange</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a6fccd1be8d713570688bf53190f9b9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ResourceServer *</type>
      <name>mResourceServer</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>ac40bb655c9bc3185c15157f27e8e27bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>adebafd6050721f9cf53d0bf90d82b57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a30c7bf9a88efbdfc58d9aa5cce81bbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarkerControl *</type>
      <name>mVisualControl</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a23e5197886b12f4a0176aebfef2d8982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a88bebcd8ec1e748d68a4a51f0a97c41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a5e126cd09ac4729a9d9b4d2445f30835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShapeFrameMarkerMap</type>
      <name>mShapeFrameMarkers</name>
      <anchorfile>d7/d29/classaikido_1_1rviz_1_1BodyNodeMarker.html</anchorfile>
      <anchor>a77f91aba389b002d87e8946bce460539</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::FrameMarker</name>
    <filename>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>FrameMarker</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>afd2ba122c52b475224ded4f2ef42b87c</anchor>
      <arglist>(interactive_markers::InteractiveMarkerServer *markerServer, dart::dynamics::Frame *frame, const std::string &amp;frameId, double length=0.25, double thickness=0.02, double alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FrameMarker</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a4a6c179d4ce308f8c858b762e7adf562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a8cddb2592f63830dae304ed6e966fbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>ad66f052eda0b1dbf124f6bed28a38fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>afb43e509773e2bb7bcbfdb78bfc96233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::Frame *</type>
      <name>mFrame</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a05a0b8870f50b142f68f0090619257d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d3/de6/classaikido_1_1rviz_1_1FrameMarker.html</anchorfile>
      <anchor>a091ff36be557db3b0f41f23f50ecea24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::InteractiveMarkerViewer</name>
    <filename>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</filename>
    <member kind="function">
      <type></type>
      <name>InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>af3bbfa1a15c6f27fed632143d986a039</anchor>
      <arglist>(const std::string &amp;topicNamespace, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a88be5590d4fcdea595567582ce6250bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a0c46e3998bcb0d7d319d6ed32ff26737</anchor>
      <arglist>(const InteractiveMarkerViewer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InteractiveMarkerViewer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a942a5c5c179d06327cbc10f46971df23</anchor>
      <arglist>(const InteractiveMarkerViewer &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>InteractiveMarkerViewer &amp;</type>
      <name>operator=</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>abf3a3d377135128303d10fa7d0e4947d</anchor>
      <arglist>(const InteractiveMarkerViewer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>interactive_markers::InteractiveMarkerServer &amp;</type>
      <name>marker_server</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>aaa5db2f3ef844a6cc78ff726278bacad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SkeletonMarkerPtr</type>
      <name>addSkeleton</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a528b65577c7157396ac1ae4438fb1fbc</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton)</arglist>
    </member>
    <member kind="function">
      <type>FrameMarkerPtr</type>
      <name>addFrame</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>acff5e34f387f3e622efeccc85efc8b0f</anchor>
      <arglist>(dart::dynamics::Frame *frame, double length=0.25, double thickness=0.02, double alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type>SkeletonMarkerPtr</type>
      <name>CreateSkeletonMarker</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a8b7a2a70d31a39d45c4a13c8408e14f6</anchor>
      <arglist>(const dart::dynamics::SkeletonPtr &amp;skeleton, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function">
      <type>TSRMarkerPtr</type>
      <name>addTSRMarker</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a791d61e5b3ae03283dcafac1e8db26ae</anchor>
      <arglist>(const constraint::dart::TSR &amp;tsr, int nSamples=10, const std::string &amp;basename=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryMarkerPtr</type>
      <name>addTrajectoryMarker</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a0b3862930f34f094ff1fdf813bc2bc4f</anchor>
      <arglist>(trajectory::ConstTrajectoryPtr trajectory, dart::dynamics::MetaSkeletonPtr skeleton, const dart::dynamics::Frame &amp;frame, const Eigen::Vector4d &amp;rgba=Eigen::Vector4d::Constant(0.75), double thickness=0.01, std::size_t numLineSegments=16u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoUpdate</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a3d650109cc305d4804f2a899e6680248</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>acbecac6d65eb5689c433b5df53f8965b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>autoUpdate</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>af690b60f7c07866f1a9fa6cb81981e38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interactive_markers::InteractiveMarkerServer</type>
      <name>mMarkerServer</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>aeae2e7048c833909802a41a9310f0c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; SkeletonMarkerPtr &gt;</type>
      <name>mSkeletonMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a12275413526bbde1b225d18ba9a46202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; FrameMarkerPtr &gt;</type>
      <name>mFrameMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a5c0058c6249c53115e6899994bd614be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; TrajectoryMarkerPtr &gt;</type>
      <name>mTrajectoryMarkers</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a33dd9f5f93a51404c76ac01cb0995b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dart::common::NameManager&lt; trajectory::ConstTrajectoryPtr &gt;</type>
      <name>mTrajectoryNameManager</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a7f254ac9acd0fcfbef23001cc6dcec82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::atomic_bool</type>
      <name>mRunning</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a3e93f26dc6ad4f54822f4fd9a1ce6ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::atomic_bool</type>
      <name>mUpdating</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a830f68fa15963c4769e0d63ba68b3c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a9ca70b1a3b39ecf24ff5ec5010f83742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::thread</type>
      <name>mThread</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>af558c80bbb9828ed5aa6f3b70b734d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d5/d47/classaikido_1_1rviz_1_1InteractiveMarkerViewer.html</anchorfile>
      <anchor>a0c2148208b943f0b31b87d1f8860dbfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::BinaryResource</name>
    <filename>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</filename>
    <member kind="function">
      <type></type>
      <name>BinaryResource</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a389c1225fb6ad399b8277e77ae10b70b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryResource</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>af41bf07acb53ff74515dd5db7722ba5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mPath</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a365f7a8bbca8274e47bb4f3ccd4a037c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>mSize</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a275c2c0d72249cb85104b8d63ea52d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>mData</name>
      <anchorfile>d2/d09/structaikido_1_1rviz_1_1BinaryResource.html</anchorfile>
      <anchor>a58e9d0eb933d5e7ef0ba3657f8cc6e92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::TextureResource</name>
    <filename>da/d2f/structaikido_1_1rviz_1_1TextureResource.html</filename>
    <base>aikido::rviz::BinaryResource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextureResource</name>
      <anchorfile>da/d2f/structaikido_1_1rviz_1_1TextureResource.html</anchorfile>
      <anchor>abe5a36300c16dde3b6fc304c6abe6696</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::MeshResource</name>
    <filename>d5/dfa/structaikido_1_1rviz_1_1MeshResource.html</filename>
    <base>aikido::rviz::BinaryResource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeshResource</name>
      <anchorfile>d5/dfa/structaikido_1_1rviz_1_1MeshResource.html</anchorfile>
      <anchor>abb9ce38d32de33ce47358408e5a5b1f0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, TextureResourcePtr &gt;</type>
      <name>mTextures</name>
      <anchorfile>d5/dfa/structaikido_1_1rviz_1_1MeshResource.html</anchorfile>
      <anchor>af868e1f2d03c0b2ae75e2e46c3f96150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::rviz::ResourceRequest</name>
    <filename>d3/dfb/structaikido_1_1rviz_1_1ResourceRequest.html</filename>
    <member kind="variable">
      <type>std::shared_ptr&lt; BinaryResource &gt;</type>
      <name>resource</name>
      <anchorfile>d3/dfb/structaikido_1_1rviz_1_1ResourceRequest.html</anchorfile>
      <anchor>ae6bfca5301ad70a35e82d926bdfb8ae7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::ResourceServer</name>
    <filename>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</filename>
    <member kind="function">
      <type></type>
      <name>ResourceServer</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>aeab3ccae4164cfc42cc18a8101a96eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceServer</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a1b0870b11c85b20838667d15209c8895</anchor>
      <arglist>(const ResourceServer &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>ResourceServer &amp;</type>
      <name>operator=</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>afbdd341fa5fde93a2022d08f35fce8a2</anchor>
      <arglist>(const ResourceServer &amp;other)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResourceServer</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a42c3df63e8b7464e63a1bb783cd96ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a42c55d3e130c7bfb54be138449296759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getPort</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a2034461e5363c919b7974451696d7cc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a16d4f70eeb224a8f15d529a3fe71935b</anchor>
      <arglist>(unsigned short port=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a3112a4794a217e9aa2af974866b85db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>addMesh</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>aa7f773b22efa86066f357d29f6e6c5ff</anchor>
      <arglist>(const aiScene &amp;scene, const std::string &amp;scenePath)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::shared_ptr&lt; MeshResource &gt;</type>
      <name>MeshResourcePtr</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>afa9c725904588a0f752527bd568e8fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::shared_ptr&lt; BinaryResource &gt;</type>
      <name>ResourcePtr</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a9c2d7b0b34b8c10314cd1ad5c56dc9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::weak_ptr&lt; BinaryResource &gt;</type>
      <name>WeakResourcePtr</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a2716ae85c14cd95380e0c0f79bd043b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>getMeshURI</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ae4284c475539884db0af4d6a6d37d41b</anchor>
      <arglist>(const MeshResourcePtr &amp;meshResource) const </arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>hasBuggyAssimp</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a4d42ac22847e959a5db4edc1e1363f2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>queueHttpError</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ab2826194c877b108c010aae0f2807985</anchor>
      <arglist>(struct MHD_Connection *connection, unsigned int code, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static ssize_t</type>
      <name>resourceReaderCallback</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ada2a456b49a3a51f150113c4beea54b1</anchor>
      <arglist>(void *cls, uint64_t pos, char *buf, size_t max)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>resourceReaderFreeCallback</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>ab51a718a3ead3d39d4a29ab64845917f</anchor>
      <arglist>(void *cls)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>processConnection</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a5c83d32bcc5ef03bbd6654ff979e2eb3</anchor>
      <arglist>(void *cls, struct MHD_Connection *connection, const char *url, const char *method, const char *version, const char *upload_data, std::size_t *upload_data_size, void **ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct MHD_Daemon *</type>
      <name>mDaemon</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a9349e6a0dc73d682e269750734eb96f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mHost</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a43ac4c0ef49e24b720a402d22208ca41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned short</type>
      <name>mPort</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a0b2cb2f809ba3d41c59de953283ce874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a1e9c3e8152cd0b4fa1d23bb52e3b8940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; aiScene const *, MeshResourcePtr &gt;</type>
      <name>mScenes</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a83b273d749135dc93737041fcd0a7900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; std::string, WeakResourcePtr &gt;</type>
      <name>mResources</name>
      <anchorfile>d9/dd7/classaikido_1_1rviz_1_1ResourceServer.html</anchorfile>
      <anchor>a567f92f5066a38ab7c4d5827019a75ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::ShapeFrameMarker</name>
    <filename>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>ShapeFrameMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ad22084c9a14dc0f51cb1e1400b0a0663</anchor>
      <arglist>(ResourceServer *resourceServer, interactive_markers::InteractiveMarkerServer *markerServer, const std::string &amp;name, const dart::dynamics::ShapeFrame *shapeFrame, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeFrameMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ab276dc23640215b15509e8a39a992e4f</anchor>
      <arglist>(const ShapeFrameMarker &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ShapeFrameMarker &amp;</type>
      <name>operator=</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>afc17d8c43b1c7acf3042461e080be3d0</anchor>
      <arglist>(const ShapeFrameMarker &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShapeFrameMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a53f41cbbca0ccf59211e318706c464a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a03071ccc0758a382e1233c4ee6dddede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColor</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a61b0ced38701fbca8cbd8637a8a1b8e3</anchor>
      <arglist>(const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetColor</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a9fa600b5515241d2205a4fbcf93b07b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ResourceServer *</type>
      <name>mResourceServer</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ab9852e7b051f36718c26ee865f9774b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>af7ad9d33c80aeb258370f63f43c03be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>addfbb0daff3b3f23b7f39e146a9dec0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarkerControl *</type>
      <name>mVisualControl</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a226d41496a8a6e38ec8e02a9907f1d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const dart::dynamics::ShapeFrame *</type>
      <name>mShapeFrame</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>aba1b59bb79a126de7cb92b5e6ca50d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a922484d44b44bbc4e94e4e00eb604ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mExists</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a02635eeaf341ffb985b4503dec89de18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mForceUpdate</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a2a01d614a2b092b5c417ff2184612ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mVersion</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a4fa289c3050708a14269e9b74f8bde20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mShowVisual</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>a2669802755083bab22ab3dabdccd5397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mShowCollision</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>ac82bb931d0f08ec000e509419e7e4148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::optional&lt; Eigen::Vector4d &gt;</type>
      <name>mColor</name>
      <anchorfile>db/d6f/classaikido_1_1rviz_1_1ShapeFrameMarker.html</anchorfile>
      <anchor>aed68309911f04238262b04369d8604e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::SkeletonMarker</name>
    <filename>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>SkeletonMarker</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a5c674d16ad79840035d42efab42b8a74</anchor>
      <arglist>(ResourceServer *resourceServer, interactive_markers::InteractiveMarkerServer *markerServer, const dart::dynamics::WeakSkeletonPtr &amp;skeleton, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function">
      <type>dart::dynamics::SkeletonPtr</type>
      <name>getSkeleton</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a67fc49ce4e9c13b35a6a4ef807707312</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyNodeMarkerPtr &gt;</type>
      <name>bodynode_markers</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>ad9cd192cbae084754c56857a9751f544</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a2268298fbd6048a6a54e2dcee46b7564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BodyNodeMarkerPtr</type>
      <name>GetBodyNodeMarker</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a975e91abdaca3623f8a4a24f9e5d73d9</anchor>
      <arglist>(dart::dynamics::BodyNode const *bodynode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a73c2e60fa74a33cd621190d3ff1ed009</anchor>
      <arglist>(const Eigen::Vector4d &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a3361afd648c4314589203ca06473f05a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::WeakSkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a589084a0391f8ba52e95756c873dfb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ResourceServer *</type>
      <name>mResourceServer</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>ab8163871e44b9f553de097191f0eb9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a0e101f3c73d0887fabbd8d18189d780b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; dart::dynamics::BodyNode const *, BodyNodeMarkerPtr &gt;</type>
      <name>mBodyNodeMarkers</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a38ad3e5dc23754f2c6451c1daff97036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mHasColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>aefd5e7106d433d65f94da96a847d4596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>ac3791f7c5a328df7afa55732dd467582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::Vector4d</type>
      <name>mColor</name>
      <anchorfile>dd/d0b/classaikido_1_1rviz_1_1SkeletonMarker.html</anchorfile>
      <anchor>a55d3de7964e960637d8338f6ebbf18fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::TrajectoryMarker</name>
    <filename>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>TrajectoryMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a27beda58b31da9e929a0a8f0ae992ba3</anchor>
      <arglist>(interactive_markers::InteractiveMarkerServer *markerServer, const std::string &amp;frameId, const std::string &amp;markerName, trajectory::ConstTrajectoryPtr trajectory, dart::dynamics::MetaSkeletonPtr skeleton, const dart::dynamics::Frame &amp;frame, const Eigen::Vector4d &amp;rgba=Eigen::Vector4d::Constant(0.75), double thickness=0.01, std::size_t numLineSegments=16u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrajectoryMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>adf821c3bee0ee6b550898a525e55906c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrajectory</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a9487ad00c38846169d3ac876448ebf17</anchor>
      <arglist>(trajectory::ConstTrajectoryPtr trajectory)</arglist>
    </member>
    <member kind="function">
      <type>trajectory::ConstTrajectoryPtr</type>
      <name>getTrajectory</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a4c373c83b6fe5d46ea6b20686d4f16d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ac609b80e472fe1a93aacd05bbf13cadb</anchor>
      <arglist>(const Eigen::Vector3d &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>getColor</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a792325d1ed0034ff353e0774a84df461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a51add6b519777ef21836dca3229c691b</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlpha</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a2b609923b8e1f119641d41f0caf19657</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRGBA</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ae80deb6bb8ea60f7754e2a544035c0e2</anchor>
      <arglist>(const Eigen::Vector4d &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector4d</type>
      <name>getRBGA</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ab9c8da1bfc298e89626888b892ee1f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThickness</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a1e3faffa3961ac3db081cfc7945e8a1e</anchor>
      <arglist>(double thickness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThickness</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ae5c9eafe41a29150fef4c6efedbd2a87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumLineSegments</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a2b2c8f991069cbe1d1464aa71087d233</anchor>
      <arglist>(std::size_t numLineSegments)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumLineSegments</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a5006535041a501b5f3e933f324331070</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a117cfa4a7f1a6e049ad0d8cf4ea7cc06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updatePoints</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>aebd2eb8973a24e6fbb64caeae1cef364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>visualization_msgs::Marker &amp;</type>
      <name>getMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ade813f12d824285dd9330d25adca7c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const visualization_msgs::Marker &amp;</type>
      <name>getMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ad825cd6cdbbb4da936fb0ff3d9b619e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>interactive_markers::InteractiveMarkerServer *</type>
      <name>mMarkerServer</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a115e4dfc6924bc22451ad34c58a768e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visualization_msgs::InteractiveMarker</type>
      <name>mInteractiveMarker</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>ad80cb9076d49f295357e22e10ed5aaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>mFrameId</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>aa31321b968310b40caba0123961af272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>trajectory::ConstTrajectoryPtr</type>
      <name>mTrajectory</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a1691d143bb720ff6675f11e241f0835d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mNumLineSegments</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a6065294d257137451f06345b002e7beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>dart::dynamics::MetaSkeletonPtr</type>
      <name>mSkeleton</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a2ec3807eacac3393c54d44481922630d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const dart::dynamics::Frame &amp;</type>
      <name>mFrame</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>af6868b84ac96fae27c9eb67a51344010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mNeedUpdate</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>af5b02f11640b18892eb6737f0061864f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mNeedPointsUpdate</name>
      <anchorfile>d2/dc4/classaikido_1_1rviz_1_1TrajectoryMarker.html</anchorfile>
      <anchor>a6a078cee16b7b68c7c443f48b7485055</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::TSRMarker</name>
    <filename>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</filename>
    <member kind="function">
      <type></type>
      <name>TSRMarker</name>
      <anchorfile>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</anchorfile>
      <anchor>a65a639e413dd0ad177bed7266b8faded</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; dart::dynamics::SimpleFrame &gt;&gt; tsrFrames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TSRMarker</name>
      <anchorfile>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</anchorfile>
      <anchor>a8c7fb8354e28fb78eda92a864958ff8c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::unique_ptr&lt; dart::dynamics::SimpleFrame &gt; &gt;</type>
      <name>mTsrFrames</name>
      <anchorfile>d8/d7a/classaikido_1_1rviz_1_1TSRMarker.html</anchorfile>
      <anchor>ad7f555a3dba8f546a427e0ad51b9cdd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::rviz::WorldInteractiveMarkerViewer</name>
    <filename>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</filename>
    <base>aikido::rviz::InteractiveMarkerViewer</base>
    <member kind="function">
      <type></type>
      <name>WorldInteractiveMarkerViewer</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>a36cd30c08bb9d9468d9c17a7946b1622</anchor>
      <arglist>(aikido::planner::WorldPtr env, const std::string &amp;topicNamespace, const std::string &amp;frameId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldInteractiveMarkerViewer</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>adf4c2d5f82dc326e25cc792b3cb77a3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldInteractiveMarkerViewer</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>aa8875b0aff675de92fc4606abf450973</anchor>
      <arglist>(const WorldInteractiveMarkerViewer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldInteractiveMarkerViewer</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>a14d155e227a7a995fb3d1d159e050899</anchor>
      <arglist>(const WorldInteractiveMarkerViewer &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>WorldInteractiveMarkerViewer &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>a0c246a5b3664d339f7b7583a3e67ed1f</anchor>
      <arglist>(const WorldInteractiveMarkerViewer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoUpdate</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>a0e740e84e76dc0edf8e1c7572d127f71</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>a8a0304e5ce148bf299448c28791e4013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>autoUpdate</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>a3e54e3c84e40d28762acd8f1eba351bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; dart::dynamics::SkeletonPtr, SkeletonMarkerPtr &gt;</type>
      <name>mSkeletonMarkers</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>acf075e0b8d5fe6def053f2eb7bc016e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>aikido::planner::WorldPtr</type>
      <name>mWorld</name>
      <anchorfile>d3/d2b/classaikido_1_1rviz_1_1WorldInteractiveMarkerViewer.html</anchorfile>
      <anchor>a9f682e1616d4e7cab332f626675a0355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::statespace</name>
    <filename>d9/d25/namespaceaikido_1_1statespace.html</filename>
    <namespace>aikido::statespace::dart</namespace>
    <class kind="class">aikido::statespace::CompoundStateHandle</class>
    <class kind="class">aikido::statespace::CartesianProduct</class>
    <class kind="class">aikido::statespace::RStateHandle</class>
    <class kind="class">aikido::statespace::SE2StateHandle</class>
    <class kind="class">aikido::statespace::SE3StateHandle</class>
    <class kind="class">aikido::statespace::SO2StateHandle</class>
    <class kind="class">aikido::statespace::SO3StateHandle</class>
    <class kind="class">aikido::statespace::GeodesicInterpolator</class>
    <class kind="class">aikido::statespace::Interpolator</class>
    <class kind="class">aikido::statespace::R</class>
    <class kind="class">aikido::statespace::ScopedState</class>
    <class kind="class">aikido::statespace::SE2</class>
    <class kind="class">aikido::statespace::SE3</class>
    <class kind="class">aikido::statespace::SO2</class>
    <class kind="class">aikido::statespace::SO3</class>
    <class kind="class">aikido::statespace::StateHandle</class>
    <class kind="class">aikido::statespace::StateSpace</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolator &gt;</type>
      <name>InterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae78c8cb0f9e8b59f0c6f8415bc6c8c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolator &gt;</type>
      <name>ConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acd1df13520395c55b7cd026e051bc574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolator &gt;</type>
      <name>WeakInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6da018faa8a88dd6ec0ccf323251f12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolator &gt;</type>
      <name>WeakConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>acefac2fbc8f04f77a08803a49950952d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolator &gt;</type>
      <name>UniqueInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af245b6690dc8d271d14f4efb78635d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolator &gt;</type>
      <name>UniqueConstInterpolatorPtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a0a843c02e921c290916adf5a551dfe93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 0 &gt;</type>
      <name>R0</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a112711b214334a56f6211267f3a7ea48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 1 &gt;</type>
      <name>R1</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aa1c3a2d2580f90ca0da9fee65de8f966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 2 &gt;</type>
      <name>R2</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a236d98378f3a4c871d7df5d339a598a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 3 &gt;</type>
      <name>R3</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>ae0ff830e4bc4cbbf927ebcb04af2346c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; 6 &gt;</type>
      <name>R6</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a6bdc50148bffb18120bd4b4803960ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; Eigen::Dynamic &gt;</type>
      <name>Rn</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a7d6e5d692a6d4f52a878ad0d030055ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; StateSpace &gt;</type>
      <name>StateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a55de554810a89a068e51133660087b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const StateSpace &gt;</type>
      <name>ConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a04f07b5eb15f2c5f5b72221278854eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; StateSpace &gt;</type>
      <name>WeakStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a43ca940fe24d5036ce19540cb3e7cf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const StateSpace &gt;</type>
      <name>WeakConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>aac239e63abbc94c92bc02cab1b887e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; StateSpace &gt;</type>
      <name>UniqueStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>af85badb5902b06f3da6e845321512738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const StateSpace &gt;</type>
      <name>UniqueConstStateSpacePtr</name>
      <anchorfile>d9/d25/namespaceaikido_1_1statespace.html</anchorfile>
      <anchor>a85f9f4e81b79ee5b7194550faad26046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::CompoundStateHandle</name>
    <filename>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; CartesianProduct, _QualifiedState &gt;</base>
    <member kind="function">
      <type></type>
      <name>CompoundStateHandle</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>a7b99d434af63260d441e7966935f0857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundStateHandle</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>a8426c892d53b7ad0547f3f2d8385f6f6</anchor>
      <arglist>(const StateSpace *_space, State *_state)</arglist>
    </member>
    <member kind="function">
      <type>Space::State *</type>
      <name>getSubState</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>aa6d08144a41cb0495d434548eeb98b9b</anchor>
      <arglist>(std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>Space::StateHandle</type>
      <name>getSubStateHandle</name>
      <anchorfile>d1/dc7/classaikido_1_1statespace_1_1CompoundStateHandle.html</anchorfile>
      <anchor>ab937e37091a463022bf9772e35880678</anchor>
      <arglist>(std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a32c04e025269a663885c907df4241638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac74c38e2aee6cee41b912381e167cd26</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aea1422e213c09675bbe58928469d0cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a65e5fdb9dab7dfdd4a18c89e14b48a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a290ee017b07828e2b3b86a5a12c714ba</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>QualifiedState *</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac35723dd7ade588b08c3e86e6044f77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abf79a6d8c027d45405832d139d760e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>CartesianProduct</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::CartesianProduct</name>
    <filename>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::CartesianProduct::State</class>
    <member kind="typedef">
      <type>CompoundStateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a3791c3650aa4dc0919de8ab8e99e7da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CompoundStateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a5d3f8f42cb62d051bdf50ef3763855dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a3df5ea23639b7b25da4e24c57a2e1302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a43cc73f596bc15f2a59a374f161a255d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::StateHandle&lt; StateSpace, State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>abc1486fdd4878268a24f1f24c5cf8a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::StateHandle&lt; StateSpace, const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a8c6e265d132e7c096c79a3d94458bf04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ace74fb7490a262c4e5e264a5acd768f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a2b5942d50cc89c0e310c3bdfb471c874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianProduct</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>ab2f96a36c6c907990736c78b9d43e200</anchor>
      <arglist>(std::vector&lt; StateSpacePtr &gt; _subspaces)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a7ed2da204ed9da5670b260411d139034</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumSubspaces</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a26b64b256ec6a8b2ddb4dae49e9478c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Space &gt;</type>
      <name>getSubspace</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a38c644be036579c8406ba6255593f97f</anchor>
      <arglist>(std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>Space::State *</type>
      <name>getSubState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a733e13a08e5604176b875c94e16a94f2</anchor>
      <arglist>(State *_state, std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>const Space::State *</type>
      <name>getSubState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>af6f35f6aba512f2c8c3d63f163654dee</anchor>
      <arglist>(const State *_state, std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>Space::StateHandle</type>
      <name>getSubStateHandle</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>ac90e0f76833152da7e0099777312e3ea</anchor>
      <arglist>(State *_state, std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>Space::StateHandleConst</type>
      <name>getSubStateHandle</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a6778b29cce56213685d972e2785d7ee8</anchor>
      <arglist>(const State *_state, std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>aed1b565244d01557cf4c06f8bc5572d5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a7f4cc59f646f76fc287e879f5b4c02ad</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>aff54f5c62f680efd209d134b0a017d9a</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a0c9cb4f0f7f4506f722dd6f0df946c43</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a3e8daae460d5a626d6b203d62c220d23</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>abdd47691c257d733640adb16fab50a3b</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a300b4dda49bb48b037bd87f0ed410ecf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a0f603892bbe0cabf310fdeeb53933a40</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>aca5fced33955588037d846dc4ff24a97</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a1e2f90a0ee0110076f2d3dbfbed0f622</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>af64d2135d3b548a6015a8b758fecac93</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StateSpace</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a1fb1e33c9468882e0517e19e396ac481</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a87db639a3899321f44336e458b5f58d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocateState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ab000c8b4e95142b907a189ba09fddfa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>aa4a15623c489fcd4b19fea14ac8ac16b</anchor>
      <arglist>(State *_state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a5ea0e76a058eaadb72e38f195974c98d</anchor>
      <arglist>(State *_state1, const State *_state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getInverse</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a05ad7bb305d348c6a882bd818a14c3ee</anchor>
      <arglist>(State *_state) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; StateSpacePtr &gt;</type>
      <name>mSubspaces</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a8e5e8478a9f9ad6197b27338daadc320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>mOffsets</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>ae07f5db7ea027905d4063aaa33b459fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::size_t</type>
      <name>mSizeInBytes</name>
      <anchorfile>d4/d44/classaikido_1_1statespace_1_1CartesianProduct.html</anchorfile>
      <anchor>a9610fa1d532e1c8343b33253f9535261</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::CartesianProduct::State</name>
    <filename>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>State</name>
      <anchorfile>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</anchorfile>
      <anchor>a0a6796cccb7963c4805f7eb86e660d6d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~State</name>
      <anchorfile>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</anchorfile>
      <anchor>ac2c5eac883eaa76068074c9f1cc770c0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>State</name>
      <anchorfile>d1/d3a/classaikido_1_1statespace_1_1StateSpace_1_1State.html</anchorfile>
      <anchor>ac0c5b446699f6ab6600291a98d10e126</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~State</name>
      <anchorfile>d1/d3a/classaikido_1_1statespace_1_1StateSpace_1_1State.html</anchorfile>
      <anchor>a465f97de19bfd3cad76c38db72e71357</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>CartesianProduct</name>
      <anchorfile>d9/dae/classaikido_1_1statespace_1_1CartesianProduct_1_1State.html</anchorfile>
      <anchor>adb2969bfcf868208027947990f3171e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::RStateHandle</name>
    <filename>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; R&lt; _QualifiedState::DimensionAtCompileTime &gt;, _QualifiedState &gt;</base>
    <member kind="typedef">
      <type>typename R&lt; DimensionAtCompileTime &gt;::VectorNd</type>
      <name>VectorNd</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a5db83226b3e864cbbcb687e3f9f6f858</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_const&lt; QualifiedState &gt;::value, const VectorNd, VectorNd &gt;</type>
      <name>ValueType</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a70e3adcc601f0201ec3802928b27243d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R&lt; _QualifiedState::DimensionAtCompileTime &gt;</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RStateHandle</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>addd88c31fa40995c86b5f10e7363a59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RStateHandle</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>ac21da2c35f0d5f700f5fa17d873254a9</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const VectorNd &gt;</type>
      <name>getValue</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a4561bbe9e30fcee1d3d16129edd5ec62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a1300c0ffd403704bc584492278aeefa2</anchor>
      <arglist>(const VectorNd &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a32c04e025269a663885c907df4241638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac74c38e2aee6cee41b912381e167cd26</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aea1422e213c09675bbe58928469d0cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a65e5fdb9dab7dfdd4a18c89e14b48a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a290ee017b07828e2b3b86a5a12c714ba</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>QualifiedState *</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac35723dd7ade588b08c3e86e6044f77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abf79a6d8c027d45405832d139d760e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d5/dbb/classaikido_1_1statespace_1_1RStateHandle.html</anchorfile>
      <anchor>a784b271e2538cbad5f9392cab6c77ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE2StateHandle</name>
    <filename>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SE2, _QualifiedState &gt;</base>
    <member kind="function">
      <type></type>
      <name>SE2StateHandle</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>ae7e9984fff621b76e449caeb42c23f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2StateHandle</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>a9dd96d388131e1ead59d24a66abc937f</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry2d</type>
      <name>getIsometry</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>aa912f9aa3a4aaf60e039fd46bbd74dd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>de/de1/classaikido_1_1statespace_1_1SE2StateHandle.html</anchorfile>
      <anchor>ab1ff3166a72a941ad415b0e8c9ee0522</anchor>
      <arglist>(const Eigen::Isometry2d &amp;_transform) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a32c04e025269a663885c907df4241638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac74c38e2aee6cee41b912381e167cd26</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aea1422e213c09675bbe58928469d0cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a65e5fdb9dab7dfdd4a18c89e14b48a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a290ee017b07828e2b3b86a5a12c714ba</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>QualifiedState *</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac35723dd7ade588b08c3e86e6044f77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abf79a6d8c027d45405832d139d760e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SE2</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE3StateHandle</name>
    <filename>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SE3, _QualifiedState &gt;</base>
    <member kind="function">
      <type></type>
      <name>SE3StateHandle</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a2ea438ed6bc404efcc3710ec7f518d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE3StateHandle</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a8888dc325f6c453104c5017e27d6cbaf</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Isometry3d</type>
      <name>getIsometry</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a8965f30465ae8e87e58411c946e84631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>d7/de3/classaikido_1_1statespace_1_1SE3StateHandle.html</anchorfile>
      <anchor>a6b5972f8301361d6c57cf0ec095f8af9</anchor>
      <arglist>(const Eigen::Isometry3d &amp;_transform) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a32c04e025269a663885c907df4241638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac74c38e2aee6cee41b912381e167cd26</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aea1422e213c09675bbe58928469d0cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a65e5fdb9dab7dfdd4a18c89e14b48a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a290ee017b07828e2b3b86a5a12c714ba</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>QualifiedState *</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac35723dd7ade588b08c3e86e6044f77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abf79a6d8c027d45405832d139d760e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SE3</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO2StateHandle</name>
    <filename>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SO2, _QualifiedState &gt;</base>
    <member kind="function">
      <type></type>
      <name>SO2StateHandle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a4dcb69f38247dc90a5f9e820b8546dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO2StateHandle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a597472126735132c6b93c9e6efdac8fd</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>af9aa10fbfeb4a3bba6d7f567171f9885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngle</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a14c1709f94460b26a688a14c8e82ffe9</anchor>
      <arglist>(double _angle)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2Dd</type>
      <name>getRotation</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a02099479807b3acec1711384035e5e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>d1/d30/classaikido_1_1statespace_1_1SO2StateHandle.html</anchorfile>
      <anchor>a34b97617f484567f37def334e1f676c2</anchor>
      <arglist>(const Eigen::Rotation2Dd &amp;_rotation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a32c04e025269a663885c907df4241638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac74c38e2aee6cee41b912381e167cd26</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aea1422e213c09675bbe58928469d0cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a65e5fdb9dab7dfdd4a18c89e14b48a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a290ee017b07828e2b3b86a5a12c714ba</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>QualifiedState *</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac35723dd7ade588b08c3e86e6044f77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abf79a6d8c027d45405832d139d760e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SO2</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO3StateHandle</name>
    <filename>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</filename>
    <templarg></templarg>
    <base>StateHandle&lt; SO3, _QualifiedState &gt;</base>
    <member kind="typedef">
      <type>typename State::Quaternion</type>
      <name>Quaternion</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a6c36b2e651885151906e072f068b390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SO3</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3StateHandle</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a64eac11eb5cdd1c3e660af9b7cf15a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3StateHandle</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>ae8849c78713dca8a503acac98a3cdecf</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getQuaternion</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a85421e6dc839ae8f6e000aaa6d9838e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>d6/d1a/classaikido_1_1statespace_1_1SO3StateHandle.html</anchorfile>
      <anchor>a61bce194c118fbb4eb0ee04839e5aa82</anchor>
      <arglist>(const Quaternion &amp;_quaternion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a32c04e025269a663885c907df4241638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac74c38e2aee6cee41b912381e167cd26</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aea1422e213c09675bbe58928469d0cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a65e5fdb9dab7dfdd4a18c89e14b48a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a290ee017b07828e2b3b86a5a12c714ba</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>QualifiedState *</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac35723dd7ade588b08c3e86e6044f77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abf79a6d8c027d45405832d139d760e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::GeodesicInterpolator</name>
    <filename>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</filename>
    <base>aikido::statespace::Interpolator</base>
    <member kind="function">
      <type></type>
      <name>GeodesicInterpolator</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a3acd6ec09593b72f9f6d167dddbefe5d</anchor>
      <arglist>(statespace::StateSpacePtr _stateSpace)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeodesicInterpolator</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>aed72c24cd12a6d4c75a7266cb6cc442d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a3b7e67c5232a81c6b539df9f81f8de02</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a2ece4bc1eef6b87805c298e0c9a49a9f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getTangentVector</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>ae4f62c1a5dac4c5bbd38adc452421126</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a1ad809f540490ec70d2882ec02ed1064</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, double _alpha, statespace::StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDerivative</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>ac8503fd2d9798102080570599006e5e8</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, std::size_t _derivative, double _alpha, Eigen::VectorXd &amp;_tangentVector) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interpolator</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>a923f161c1ecca74aa35234d32e0ad6c6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::StateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>d7/dee/classaikido_1_1statespace_1_1GeodesicInterpolator.html</anchorfile>
      <anchor>a42277f3256bcaf8a2653015ac6333169</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::Interpolator</name>
    <filename>df/d81/classaikido_1_1statespace_1_1Interpolator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::StateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>a0488258630a9cc1b7e6348bf25191c94</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>acb8747d034aa0a70f41185d36248c713</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>aedea8edceb9e75771f7548ff9b828783</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, double _alpha, statespace::StateSpace::State *_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getDerivative</name>
      <anchorfile>df/d81/classaikido_1_1statespace_1_1Interpolator.html</anchorfile>
      <anchor>aafea86f2afdb68d802e7b6fb1eb6d1fd</anchor>
      <arglist>(const statespace::StateSpace::State *_from, const statespace::StateSpace::State *_to, std::size_t _derivative, double _alpha, Eigen::VectorXd &amp;_tangentVector) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::R</name>
    <filename>d9/d9d/classaikido_1_1statespace_1_1R.html</filename>
    <templarg>N</templarg>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::R::State</class>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>VectorNd</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a09f2bfd03888a07fa2686e6cc19c93aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RStateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>adb3abe7fb50db47043cd2d3fd4faac13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RStateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a35116efe5941a240dfc96570fb0b504d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a48d1cf13031f91731266f9854cff877b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa839bd6222be2317b8b651b9502c7f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>R</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1c1e3fb2d38a199f04e2d40245b81e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>R</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1b6d9e14c579769027b8161dc2641194</anchor>
      <arglist>(int dimension)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a5f64a74ac9d8de91ca0691e67e535ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const VectorNd &gt;</type>
      <name>getValue</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a53f497f0edd19c6fe6706aca99101b83</anchor>
      <arglist>(const State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a4ba01f8a1ad8c848d519818a20daa1a8</anchor>
      <arglist>(State *_state, const VectorNd &amp;_value) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>ac61d9cf0645efb9edf382acdc1707c95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1ac61590ecd3486a68da62da709c70dc</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>afd0a0a5ea633cccea257170ec1e21833</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa37de9dad9c29151ef551f7eed2e64a7</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a88b3461843aa8967fa7d8a50a14e1103</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a3e33f548f48371bd41cc6bde4a70cfd0</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa6795e1c6cfb995179746e894c3a6b9e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1566b0886a698ff422905100815a911b</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a577cb0c36fdca2337536117e9f21a803</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a1e1e101735e4de9078326db395807a4e</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a5954ad35cdfb4f166eed4cee8ee6fbb3</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>aa47b0038a27909e7b0804099769233e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Eigen::Map&lt; VectorNd &gt;</type>
      <name>getMutableValue</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>ab902dae8ecb9749fe744cf7596a771e2</anchor>
      <arglist>(State *_state) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mDimension</name>
      <anchorfile>d9/d9d/classaikido_1_1statespace_1_1R.html</anchorfile>
      <anchor>a7ae43f0b48dd03dd82f7e60203f7a359</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::R::State</name>
    <filename>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>adf0b2e87a168382f2a90e8146c893c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>State</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>a409fad3448c40f9a9c1dbb1133e35300</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~State</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>a2dce3b961587594be560276691a04b16</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>R&lt; N &gt;</name>
      <anchorfile>de/dc6/classaikido_1_1statespace_1_1R_1_1State.html</anchorfile>
      <anchor>aea9d48c198fd85772cd8c6bc66cd87d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::ScopedState</name>
    <filename>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>_Handle</type>
      <name>Handle</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>ae966ffb3073a29b6b0130c19f1c0e3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a595f997e4f40dd6855c45ebef483262a</anchor>
      <arglist>(const StateSpace *_space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a655e467c032af3698843f645076ed178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a4ebc38c2acd04ef0b634fc77ab9b097d</anchor>
      <arglist>(const ScopedState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ScopedState &amp;</type>
      <name>operator=</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a4b9fecfa1e5751135eef5eb61b2462b5</anchor>
      <arglist>(const ScopedState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a5268567b81ecce8dc61477390eb77f52</anchor>
      <arglist>(ScopedState &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState &amp;</type>
      <name>operator=</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a70947e90f5366d0e1872478fc412bfe1</anchor>
      <arglist>(ScopedState &amp;&amp;)=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; char[]&gt;</type>
      <name>mBuffer</name>
      <anchorfile>dd/df2/classaikido_1_1statespace_1_1ScopedState.html</anchorfile>
      <anchor>a364890e79bb22a29ceab90701f717f47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE2</name>
    <filename>d5/dcf/classaikido_1_1statespace_1_1SE2.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SE2::State</class>
    <member kind="typedef">
      <type>SE2StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ae27aeaa61f9f1e23849b80cdae51c579</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SE2StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ab4dd5d74af9583045e34f2701f77bd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a10d9e1a38f6f51daebd9b132e3172fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a1b43f3d55cd7f9639858cdbdeb9fc297</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::Isometry2d</type>
      <name>Isometry2d</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ac4980c21131b53411d9a78426db29e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a72e77161e26c5ce329b7cb0b220ba91c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ae5ff71d35c70fbb6f74cc7d13a0cc842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Isometry2d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a6426bc33f220df04e11cdd6f69e1bf96</anchor>
      <arglist>(const State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a005cd5fe99832a994413c29b4f61172b</anchor>
      <arglist>(State *_state, const Isometry2d &amp;_transform) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ac3691cb4b911eae7aabde5e7a5afd994</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>ad98b52b00ef62f33e01e6f481340c79b</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a9d36285ae2821bf28c8acc8cea44f8d5</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a1f34c2efa38c6da3c440f2c9901a670c</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a4402310cac9e5015ce24a346caae22d9</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a1223c74cae9b02dd82a287831e5da3ab</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>aee1330862fd11a5ff3fc8c2b5a177d62</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a6a60a822d539ac2c2020e3878fdfee88</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>aedf7d0c19296916c44188394f4b98ce4</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a624ff2f116872f0ca17db5ff38c8f1c2</anchor>
      <arglist>(const StateSpace::State *_state, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>d5/dcf/classaikido_1_1statespace_1_1SE2.html</anchorfile>
      <anchor>a894f37bd63b9b450971ecedef7b77148</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE2::State</name>
    <filename>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="typedef">
      <type>Eigen::Transform&lt; double, 2, Eigen::Isometry, Eigen::DontAlign &gt;</type>
      <name>Isometry2d</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a259c8a71bafd5919917ff6f4653380c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>aee01038f3b7316cdb43f83c13fc3b36c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>adda7ce9742c402d3f7f5cae780058052</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a7f1f727b274c590640f07874f3c88284</anchor>
      <arglist>(const Isometry2d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>adb1cd8fb8764688108bad274a5165c17</anchor>
      <arglist>(const Isometry2d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>const Isometry2d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>adcf4f741125c910a5c36d05b40de3c62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Isometry2d</type>
      <name>mTransform</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a4ade7124254d2390d011108d9fb25ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SE2</name>
      <anchorfile>de/d61/classaikido_1_1statespace_1_1SE2_1_1State.html</anchorfile>
      <anchor>a09322590b8c74f59d4084302eccc291c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE3</name>
    <filename>df/d4f/classaikido_1_1statespace_1_1SE3.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SE3::State</class>
    <member kind="typedef">
      <type>SE3StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a2dac870be7d9a13e374f0763b3db291b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SE3StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>aeca58850b5f954c1668be393e4119143</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a4274d3458924d824e0180893bedd9f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ae72255cd96c969174a634c7804264eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::Isometry3d</type>
      <name>Isometry3d</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a56eccc70098f35a82c23bc4f22d20f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE3</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a796581a219080817422b67f4c6822c67</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>acef1b0858b3ed5afddb0318013923434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Isometry3d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a13bf531355b967eef35cd353c933e80e</anchor>
      <arglist>(const State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>aabe273040df9cc5ea9a8437afacfefd9</anchor>
      <arglist>(State *_state, const Isometry3d &amp;_transform) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ac77b360690283b6303836ad3766f4d94</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ae7df8d8238396fa9eeef835c5b7ef716</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a28a2af30cbf4f00157df4e213d13df2c</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a08b5c0b3d112a44776693968b8722bc3</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a33ddb1fbc0b8c88f6d35e551171e02b4</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a445ec2b751812cc963d9b3ad61294b52</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ac756b8da2dd1efec87ec3de7c880c231</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ac26b0baa0d89d633c094d99cff1188a3</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a3ac0fb0c6b311d2bc5a71bb5a5be4b6a</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>ab8bcac95fb1f1c4c460103b34195a812</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>df/d4f/classaikido_1_1statespace_1_1SE3.html</anchorfile>
      <anchor>a48842dbb8f9d508ba63b3f59e385dec4</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SE3::State</name>
    <filename>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="typedef">
      <type>Eigen::Transform&lt; double, 3, Eigen::Isometry, Eigen::DontAlign &gt;</type>
      <name>Isometry3d</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a44f28905e163e0d3da9628e1868a049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a29b9c477357cbf49027c5bad56a8f056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a794ce1aa1d2d17b85531508163160bb7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>ab193b4bb8a3aec6ea02cac8ff7f1709b</anchor>
      <arglist>(const Isometry3d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsometry</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>a376c9d84e5d05c9f4d51f6d8896bddf4</anchor>
      <arglist>(const Isometry3d &amp;_transform)</arglist>
    </member>
    <member kind="function">
      <type>const Isometry3d &amp;</type>
      <name>getIsometry</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>ab097acbf2f003cf8ee7154eaf2745fba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Isometry3d</type>
      <name>mTransform</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>ad6ac1a4d7e6420c70e73db568abb2d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SE3</name>
      <anchorfile>d5/d12/classaikido_1_1statespace_1_1SE3_1_1State.html</anchorfile>
      <anchor>ab3718cdf9e4bc6765b2d99afaf04648a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO2</name>
    <filename>dd/d4f/classaikido_1_1statespace_1_1SO2.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SO2::State</class>
    <member kind="typedef">
      <type>SO2StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>af3cfaeb8ef08bf0940fa330da5b5067e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SO2StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a93db99e451e6bb27d8f10e0cd390a90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>abddfdcbcd49ac0b3447b0b39898638f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a830d494a55c005265ab79058466d6eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO2</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ae35a51772c4a55523e369fd8492528c0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>acee58f0dc37e8be082d032799283d6c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngle</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a97fee8673b1a396e467acd3e637c56c5</anchor>
      <arglist>(const State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngle</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>af5c68d2ede6045c82e9f99a5b143b523</anchor>
      <arglist>(State *_state, double _angle) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2Dd</type>
      <name>getRotation</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a2436305df84826c88e3142bd50cca5e2</anchor>
      <arglist>(const State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a8964b398b65c906309b38fd73e0507d4</anchor>
      <arglist>(State *_state, const Eigen::Rotation2Dd &amp;_rotation) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ab9015330713529ed6abc4382bf606142</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>aeec8a47bb159b61eb359fcef9623f803</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a6cc863bee9b1708ee67c68655c09be9f</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a4621a3969391d3cef340cdd6f9d76820</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ad69bdc39bb208083b70d07b60e5cb22e</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a279ddd1b0d88aff734071c4dfa82324b</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ae1fc806ae9d63b9692f1730060349f51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a8cc24c0872ad57cab03f2fdeb818f32d</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>a062fae8c0e95a2b01bdaafcd6518c864</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ab3f0c521ecc679a2c17f5c43d3131a1e</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>dd/d4f/classaikido_1_1statespace_1_1SO2.html</anchorfile>
      <anchor>ae7ba0b1b22f534e913064e61bdc25f90</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO2::State</name>
    <filename>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a2559a8ef7bdce7df5af0fa3036ac9ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a237b08f7d6cd7cb75906fd8c4eace72e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a588f6793f9c00bd9720c2807848e81d8</anchor>
      <arglist>(double _angle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAngle</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a71278d663b901570747af49c92ac586d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngle</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a9c6443efc7bbc178eeb08ed503c0dcca</anchor>
      <arglist>(double _angle)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Rotation2Dd</type>
      <name>getRotation</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a59b735e62e5bd8a8aa8fe06148f4290c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a277560a51749bc8d094be94d782a8c2f</anchor>
      <arglist>(const Eigen::Rotation2Dd &amp;_rotation)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mAngle</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>a806ddfb1218189278ed63e1f564f8bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SO2</name>
      <anchorfile>db/d68/classaikido_1_1statespace_1_1SO2_1_1State.html</anchorfile>
      <anchor>aa4d72410658399bdf02026cdf5bc41e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO3</name>
    <filename>de/d2a/classaikido_1_1statespace_1_1SO3.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::SO3::State</class>
    <member kind="typedef">
      <type>SO3StateHandle&lt; State &gt;</type>
      <name>StateHandle</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>aee6d346d7cc1ab7882678d7ce2131506</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SO3StateHandle&lt; const State &gt;</type>
      <name>StateHandleConst</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a19f3e359577eddff6bc8e35983d5d4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a84ab4ecd6c6024de88de865ff61a3c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandleConst &gt;</type>
      <name>ScopedStateConst</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>abafb686de2f749ea6427188b65ebbd8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::Quaternion</type>
      <name>Quaternion</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a867156d2816df3de018653e43497e971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>aa316756a78997d2a96ab8dd0a9badf39</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>createState</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a38b0f0c106be730f64710a967725099e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getQuaternion</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a17fd095b415063600520353d5136e0f2</anchor>
      <arglist>(const State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>ab06fe47b887a4f2d2c9d4f9abfe47a7e</anchor>
      <arglist>(State *_state, const Quaternion &amp;_quaternion) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a7e91d2446f68dac73cc5f8d359d79317</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSpace::State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a5df93db8bd216e83eba9321870d94c7c</anchor>
      <arglist>(void *_buffer) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>ac9b254d34da8a961a3d924c5ae9460c9</anchor>
      <arglist>(StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>ade07c47756d0232e00d39f4c3751ada3</anchor>
      <arglist>(const StateSpace::State *_state1, const StateSpace::State *_state2, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIdentity</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a7c2187563dcaf28e864578f200855cd2</anchor>
      <arglist>(StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInverse</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a49a2b1380179b9132213c6d7d72d00dd</anchor>
      <arglist>(const StateSpace::State *_in, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDimension</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a772d92c300a96af6645285fc9d4d65b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a1400b39976474cbc811a4ece244febb8</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expMap</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>aa65993865918be312e6b0ea6f4038330</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, StateSpace::State *_out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMap</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a415aabe216e150a5b80486307ad1d079</anchor>
      <arglist>(const StateSpace::State *_in, Eigen::VectorXd &amp;_tangent) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>de/d2a/classaikido_1_1statespace_1_1SO3.html</anchorfile>
      <anchor>a5c00011d48598e61d0654209d0664d16</anchor>
      <arglist>(const StateSpace::State *_state, std::ostream &amp;_os) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::SO3::State</name>
    <filename>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</filename>
    <base>aikido::statespace::StateSpace::State</base>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; double, Eigen::DontAlign &gt;</type>
      <name>Quaternion</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a7a74b49d0c061bc6e359afc23b58e37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a771ffba9e4a7e95de243ac757396b9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>afab35e655a1cf8890699fb304b764395</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a47a02a7e7db1b18ee71b7a318f8fbeb2</anchor>
      <arglist>(const Quaternion &amp;_quaternion)</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getQuaternion</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a807ccab535ddb82db121cfdfd0d268b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternion</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>ac3dea01d7b04cd6738946a7e8a229a04</anchor>
      <arglist>(const Quaternion &amp;_quaternion)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quaternion</type>
      <name>mValue</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a323cd75b8b6ce5287c1799e47893dc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SO3</name>
      <anchorfile>d4/dc5/classaikido_1_1statespace_1_1SO3_1_1State.html</anchorfile>
      <anchor>a6deea42e725e06fcd12333f6e685ca75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::StateHandle</name>
    <filename>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</filename>
    <templarg>_StateSpace</templarg>
    <templarg>_QualifiedState</templarg>
    <member kind="typedef">
      <type>_StateSpace</type>
      <name>StateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad534c47eaad39677939a606db2375171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename StateSpace::State</type>
      <name>State</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a5350925d297bf1b28b5e8b19fa2d8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_QualifiedState</type>
      <name>QualifiedState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac6c0552318688dfdd8cf90de74c4f030</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a32c04e025269a663885c907df4241638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac74c38e2aee6cee41b912381e167cd26</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ab502df3556751d1bef0b30c6deac329d</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateHandle</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ad53b8c4f61c03db905b6c466dd396a39</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a4dcb696c18522b93ec83f8ad07fba58b</anchor>
      <arglist>(StateHandle &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>StateHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a54c5e41cf59cefee9ef317868cccbe32</anchor>
      <arglist>(const StateHandle &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QualifiedState *</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>aea1422e213c09675bbe58928469d0cdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a65e5fdb9dab7dfdd4a18c89e14b48a57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a290ee017b07828e2b3b86a5a12c714ba</anchor>
      <arglist>(const StateSpace *_space, QualifiedState *_state)</arglist>
    </member>
    <member kind="function">
      <type>QualifiedState *</type>
      <name>getState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>ac35723dd7ade588b08c3e86e6044f77c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StateSpace *</type>
      <name>getStateSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abf79a6d8c027d45405832d139d760e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>mSpace</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>a758f48390a4529aaa9c42bf47c63c846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QualifiedState *</type>
      <name>mState</name>
      <anchorfile>d3/d6c/classaikido_1_1statespace_1_1StateHandle.html</anchorfile>
      <anchor>abbcdf51a4773bd665850d83a336c7db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::StateSpace</name>
    <filename>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</filename>
    <class kind="class">aikido::statespace::StateSpace::State</class>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getStateSizeInBytes</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a56c8c12ec48a6f466dbf2f180ccdcb36</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual State *</type>
      <name>allocateStateInBuffer</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>af6031783b2385162ca55dc1d82fdf754</anchor>
      <arglist>(void *_buffer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeStateInBuffer</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a882246cb7ff17caa2f12297729642cdf</anchor>
      <arglist>(State *_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compose</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a9e9da640509ceae48bf647da2d27cbb1</anchor>
      <arglist>(const State *_state1, const State *_state2, State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getIdentity</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a26e6db779e6b67f0f3a54290d4ef8ed0</anchor>
      <arglist>(State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getInverse</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a18661369b471b7a8f91e62e13ebece5c</anchor>
      <arglist>(const State *_state, State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getDimension</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a4a7a5a52d1226be71c12e7d02f6b0648</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ad3c26cec35630d96dc746f0b76cbbd44</anchor>
      <arglist>(const StateSpace::State *_source, StateSpace::State *_destination) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>expMap</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a6f91b8c2b795a6351b2aeb17d827a0e5</anchor>
      <arglist>(const Eigen::VectorXd &amp;_tangent, State *_out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>logMap</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>a21db7b888972e9cce874c5e3705f6ebb</anchor>
      <arglist>(const State *_in, Eigen::VectorXd &amp;_tangent) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>d7/d19/classaikido_1_1statespace_1_1StateSpace.html</anchorfile>
      <anchor>ac4e0199397bf4f01454b86a70f295424</anchor>
      <arglist>(const State *_state, std::ostream &amp;_os) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::StateSpace::State</name>
    <filename>d1/d3a/classaikido_1_1statespace_1_1StateSpace_1_1State.html</filename>
  </compound>
  <compound kind="namespace">
    <name>aikido::statespace::dart</name>
    <filename>db/db1/namespaceaikido_1_1statespace_1_1dart.html</filename>
    <namespace>aikido::statespace::dart::detail</namespace>
    <class kind="class">aikido::statespace::dart::JointStateSpace</class>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSaver</class>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace</class>
    <class kind="class">aikido::statespace::dart::RJoint</class>
    <class kind="class">aikido::statespace::dart::SE2Joint</class>
    <class kind="class">aikido::statespace::dart::SE3Joint</class>
    <class kind="class">aikido::statespace::dart::SO2Joint</class>
    <class kind="class">aikido::statespace::dart::SO3Joint</class>
    <class kind="class">aikido::statespace::dart::WeldJoint</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>MetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8ed2b6f9ff6bc957ee5f55343ea579b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>ConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a8d493e13286a781f5983bda8232b14d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>WeakMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a518c11ce2a31145e7eda1fe386b62d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>WeakConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a29e67649edf945287f33e51334c33a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; MetaSkeletonStateSpace &gt;</type>
      <name>UniqueMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a0a7a00afa4a30bac93eadb58fc74d5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const MetaSkeletonStateSpace &gt;</type>
      <name>UniqueConstMetaSkeletonStateSpacePtr</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a640cd5d21ceb88b577d0cb6bf21e0dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 0 &gt;</type>
      <name>R0Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae72e38e578b41763d97f47d32bd1c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 1 &gt;</type>
      <name>R1Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>abaa5729da665c95333267de6bf10fc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 2 &gt;</type>
      <name>R2Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ad1287648351a3a6f0cad1598d93c033c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 3 &gt;</type>
      <name>R3Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>adfaec81dec6569c2dea0cb06cc45794f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RJoint&lt; 6 &gt;</type>
      <name>R6Joint</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a840584b947a4d859602ef3498e72adfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpaceFor</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>a3ef022436d4a8a4063c0661ec7605791</anchor>
      <arglist>(JointType *joint)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>createJointStateSpace</name>
      <anchorfile>db/db1/namespaceaikido_1_1statespace_1_1dart.html</anchorfile>
      <anchor>ae89411503a43fe87a58f17a8b2780c24</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::JointStateSpace</name>
    <filename>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</filename>
    <base virtualness="virtual">aikido::statespace::StateSpace</base>
    <class kind="class">aikido::statespace::dart::JointStateSpace::Properties</class>
    <member kind="function">
      <type></type>
      <name>JointStateSpace</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a10f1f97db0c7e1090d4babe74daa386a</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JointStateSpace</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a1c09a2569d3782f9d87b6d52733a51cd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>aff0b4389086a440952ef4a0cfedf6414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatible</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a73cb8e3d8841fbb61549c4d43fd06d59</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCompatibility</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a04eb6c40135910857d3821da778b7aaa</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a72d265e4101b293f0594aa11cb75a336</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a52cefc7dd9ecbbb44339a4453118aaf3</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getState</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a3e39fcf95736fd835687ea8ef507d047</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint, StateSpace::State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setState</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a1bc179123dbe81853133153621fbe785</anchor>
      <arglist>(::dart::dynamics::Joint *joint, const StateSpace::State *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Properties</type>
      <name>mProperties</name>
      <anchorfile>d3/d91/classaikido_1_1statespace_1_1dart_1_1JointStateSpace.html</anchorfile>
      <anchor>a97834c9d0c53ff9e197d56b801629840</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::JointStateSpace::Properties</name>
    <filename>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>Properties</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a8a1a78b64bf648c0bca35f670471e72a</anchor>
      <arglist>(const ::dart::dynamics::Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>afe27e0bab637d706da953b78cc6603a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getType</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a834c69dbf1a6762fe8e311e74fdc0de7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a03c83b11b462576a39291076540d19ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDofNames</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a7c7e65c32b5e0f73f8698339d06ce9ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPositionLimit</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a7d8bbdd7f9f68ff90494313c09bff5b6</anchor>
      <arglist>(std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositionLimited</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a19fc44149dca0ce8adf9335cde06b57c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad2d622710b1294a1a81508def05ff2d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>af869643066b4a604ba378a015ed0f633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>af8f929eed585780a585b00599ae4133a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a85945cf011ca5023b0737aeba0764bed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a046df34121d4d8e8197c97f5df012ca2</anchor>
      <arglist>(const Properties &amp;otherProperties) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a26547657d0a2c8078b2944cce224c981</anchor>
      <arglist>(const Properties &amp;otherProperties) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad1ba4c89b6f13b82d71dfb0ab60ef2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mType</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>af0a6ac7b77e2210b03196931744f29ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mDofNames</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a37e6d0c590d426bb722a4a08cfb5659b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>aa3ca052d5857ca323639a9d47258518b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a72ab6a3315cd93590a3d635464245548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; bool, Eigen::Dynamic, 1 &gt;</type>
      <name>mPositionHasLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a8ece5292f7ce6c45fa09bcf1aab88689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityLowerLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>a526073dcf5eab4b7613c67845334d88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityUpperLimits</name>
      <anchorfile>d8/d78/classaikido_1_1statespace_1_1dart_1_1JointStateSpace_1_1Properties.html</anchorfile>
      <anchor>abdf0aa323302b21e88e962cac0d4860b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::MetaSkeletonStateSaver</name>
    <filename>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Options</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POSITIONS</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9ac9b81ec7233d5cd6acb0ba9d1ab25651</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POSITION_LIMITS</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>af176965c1905fa9d81e899f33eb64bf9a90f764506efb0e6765fdc30fffe866a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a03beaf5336b4925d51be620c8c4db351</anchor>
      <arglist>(::dart::dynamics::MetaSkeletonPtr metaskeleton, int options=POSITIONS|POSITION_LIMITS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>aad37a528a932db0d178b751bfb3ec94f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a4776d368c19e95ece718e5baebdc36e5</anchor>
      <arglist>(const MetaSkeletonStateSaver &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>MetaSkeletonStateSaver &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a5ac20d282f20c71598239821e6b2381c</anchor>
      <arglist>(const MetaSkeletonStateSaver &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSaver</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>ab29546625734c391fbf4a2caf53c9073</anchor>
      <arglist>(MetaSkeletonStateSaver &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>MetaSkeletonStateSaver &amp;</type>
      <name>operator=</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a0ef0279243bb9c7e6a273a99126fdd43</anchor>
      <arglist>(MetaSkeletonStateSaver &amp;&amp;)=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>mMetaSkeleton</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a225ed2fda24cd1b19d016aa88c92df77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>mOptions</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a7f643a0a9055c87cb67a09d6e19b38ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mPositions</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a06405e7ac8167837453ce632489fd5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mPositionLowerLimits</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a543e0a258524310ab4af38af27b38e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Eigen::VectorXd</type>
      <name>mPositionUpperLimits</name>
      <anchorfile>d3/d24/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSaver.html</anchorfile>
      <anchor>a43b386788641b3485d6228db3d27f5c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::MetaSkeletonStateSpace</name>
    <filename>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</filename>
    <base>aikido::statespace::CartesianProduct</base>
    <class kind="class">aikido::statespace::dart::MetaSkeletonStateSpace::Properties</class>
    <member kind="typedef">
      <type>statespace::ScopedState&lt; StateHandle &gt;</type>
      <name>ScopedState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a3df5ea23639b7b25da4e24c57a2e1302</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetaSkeletonStateSpace</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>aff4bd98ec77a24acf7be28971f5dbf58</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton)</arglist>
    </member>
    <member kind="function">
      <type>const Properties &amp;</type>
      <name>getProperties</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a8d0914cff28e8e840ec2d11ee134ed1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatible</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a6ed962849d6c54c4d836176a26019828</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCompatibility</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a23d6cc7e1b36919c741d14e112bb902e</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkIfContained</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>afbc9fb75b0f0bbd7907e7e1457784716</anchor>
      <arglist>(const ::dart::dynamics::Skeleton *skeleton) const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Space &gt;</type>
      <name>getJointSpace</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a54b46974976e80caadc0c4a7c8877fb6</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *_metaskeleton, const ::dart::dynamics::Joint *_joint) const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Space &gt;</type>
      <name>getJointSpace</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a752e1c15c1f3ffaa0e6a6816afaf632d</anchor>
      <arglist>(std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a1cd8c5c8b703abb5425a63ca37ad03d6</anchor>
      <arglist>(const Eigen::VectorXd &amp;_positions, State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a955630072b2ad4fbf654c385341fd86c</anchor>
      <arglist>(const State *_state, Eigen::VectorXd &amp;_positions) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a41554928495d8c17a608b3588375abb0</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *_metaskeleton, State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a0e3d469cbbbd9fd89d8a91ee88281f7c</anchor>
      <arglist>(::dart::dynamics::MetaSkeleton *_metaskeleton, const State *_state) const </arglist>
    </member>
    <member kind="function">
      <type>ScopedState</type>
      <name>getScopedStateFromMetaSkeleton</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a98f46c6d658e5ed87c22e19f52b41036</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *_metaskeleton) const </arglist>
    </member>
    <member kind="function">
      <type>::dart::dynamics::MetaSkeletonPtr</type>
      <name>getControlledMetaSkeleton</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>ac21219e1dd8c04c3f68aade5b532b7c6</anchor>
      <arglist>(const ::dart::dynamics::SkeletonPtr &amp;_skeleton) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Properties</type>
      <name>mProperties</name>
      <anchorfile>d4/d02/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace.html</anchorfile>
      <anchor>a6d462d74d1f9d5c4fe1e229c30ab14c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::MetaSkeletonStateSpace::Properties</name>
    <filename>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</filename>
    <member kind="function">
      <type></type>
      <name>Properties</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>abd5b19e3a77c35e7a169fb6ef45ff5aa</anchor>
      <arglist>(const ::dart::dynamics::MetaSkeleton *metaskeleton)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad25894c7aabc030f153cf2da79ae29d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumJoints</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ab99416bd66e2814d2586cfd1a5899e37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a36595c3fc4945d36528e33122cad11f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getDofNames</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a01a47d686af31a90f6e7d90e52c95bbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDofIndex</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a388b759f2d19c68b571066235f61232b</anchor>
      <arglist>(std::size_t ijoint, std::size_t ijointdof) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDofIndex</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a3113b497f342ea973305439e42695dba</anchor>
      <arglist>(const std::string &amp;dofName) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a2aa7b27b8b54cf20f401c2a4545c167a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getPositionUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a53b4487c6eb3c8258b66cc1f8cd0b954</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a859c8cef804683633e71f1b1c3b56a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>getVelocityUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a4c14621c2a5d5f652950e27cd2484b56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ac57f2671b7c2fbf5625cbda464749110</anchor>
      <arglist>(const Properties &amp;otherProperties) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad5affa18837214105980ca916b58ef4b</anchor>
      <arglist>(const Properties &amp;otherProperties) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a31339a2591e4315ed6826aa536abfd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>mNumJoints</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a2efaf685d45938bc0344a4ee441754a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mDofNames</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a3d256fbb856a8372bcb621d7c5c84364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::pair&lt; std::size_t, std::size_t &gt;, std::size_t, aikido::common::PairHash &gt;</type>
      <name>mIndexMap</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad279f9b4e8dbe1cc24ff3a6d43649b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a76c7714472b0d297382dd4eec182a302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mPositionUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>a2dd77696ec28b2751ad53ce16d3647e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityLowerLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ad1f798eb6b8735e468fbdd6d29a39516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>mVelocityUpperLimits</name>
      <anchorfile>df/d22/classaikido_1_1statespace_1_1dart_1_1MetaSkeletonStateSpace_1_1Properties.html</anchorfile>
      <anchor>ae50adfb5971553847d9c804cd0b9db14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::RJoint</name>
    <filename>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</filename>
    <templarg>N</templarg>
    <base>aikido::statespace::R</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="typedef">
      <type>typename R&lt; DimensionAtCompileTime &gt;::VectorNd</type>
      <name>VectorNd</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>acd19bb6115c432e03f4617b8905d713f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::RJointTraits&lt; N &gt;::DartJoint</type>
      <name>DartJoint</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a4239f80068dbde997626b686de182fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RJoint</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>afd435daf8fd51746d27f2b60f057799d</anchor>
      <arglist>(const DartJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a3292c28bffb57a90d36b939e033e20b6</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a50060bc345fb139d1accea5fceeb6898</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>DimensionAtCompileTime</name>
      <anchorfile>df/db8/classaikido_1_1statespace_1_1dart_1_1RJoint.html</anchorfile>
      <anchor>a9cf84e5faed6a65a90c18139209bdd2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SE2Joint</name>
    <filename>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</filename>
    <base>aikido::statespace::SE2</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="typedef">
      <type>State::Isometry2d</type>
      <name>Isometry2d</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>ac4980c21131b53411d9a78426db29e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2Joint</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>ad8f81fe9d734815e0e2446cf72ced0e0</anchor>
      <arglist>(const ::dart::dynamics::PlanarJoint *_joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>af66ef7e177d61c5354a16d7d14b15f16</anchor>
      <arglist>(const Eigen::VectorXd &amp;_positions, StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d6/d2d/classaikido_1_1statespace_1_1dart_1_1SE2Joint.html</anchorfile>
      <anchor>a76f9c5c140fc29c41b35bbe2a312cb16</anchor>
      <arglist>(const StateSpace::State *_state, Eigen::VectorXd &amp;_positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SE3Joint</name>
    <filename>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</filename>
    <base>aikido::statespace::SE3</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>SE3Joint</name>
      <anchorfile>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</anchorfile>
      <anchor>a540acdb4fdf5981388e53d8b0ce81f9c</anchor>
      <arglist>(const ::dart::dynamics::FreeJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</anchorfile>
      <anchor>a0952ecdb9824b86857763d7c7d9c6088</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d5/d83/classaikido_1_1statespace_1_1dart_1_1SE3Joint.html</anchorfile>
      <anchor>a593b82231f43fb9dcf42f313d1761486</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SO2Joint</name>
    <filename>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</filename>
    <base>aikido::statespace::SO2</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>SO2Joint</name>
      <anchorfile>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</anchorfile>
      <anchor>a0d85824dae791fd78e6f8a1e7cfb8890</anchor>
      <arglist>(const ::dart::dynamics::GenericJoint&lt;::dart::math::R1Space &gt; *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</anchorfile>
      <anchor>a98a90f6afb54cf7c289823d0374d11b5</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>d5/d8f/classaikido_1_1statespace_1_1dart_1_1SO2Joint.html</anchorfile>
      <anchor>a8715f78c8c4f3f130dcf51223a96f9bc</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::SO3Joint</name>
    <filename>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</filename>
    <base>aikido::statespace::SO3</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>SO3Joint</name>
      <anchorfile>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</anchorfile>
      <anchor>a262d89ed2977058436e75833e03c29f2</anchor>
      <arglist>(const ::dart::dynamics::BallJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</anchorfile>
      <anchor>a54c50f8d64c3c9a359f49586ee32b469</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>da/d1a/classaikido_1_1statespace_1_1dart_1_1SO3Joint.html</anchorfile>
      <anchor>add9023205456e2fe694820a1e047a23d</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::statespace::dart::WeldJoint</name>
    <filename>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</filename>
    <base>aikido::statespace::R</base>
    <base>aikido::statespace::dart::JointStateSpace</base>
    <member kind="function">
      <type></type>
      <name>WeldJoint</name>
      <anchorfile>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</anchorfile>
      <anchor>aeb03eda395381ba97cc090a62244466d</anchor>
      <arglist>(const ::dart::dynamics::WeldJoint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPositionsToState</name>
      <anchorfile>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</anchorfile>
      <anchor>a9131ce0ef565c74ac076d673b0ee0c97</anchor>
      <arglist>(const Eigen::VectorXd &amp;positions, StateSpace::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertStateToPositions</name>
      <anchorfile>dd/d68/classaikido_1_1statespace_1_1dart_1_1WeldJoint.html</anchorfile>
      <anchor>a4d707c6587b2feb1bffc4419ef5f258a</anchor>
      <arglist>(const StateSpace::State *state, Eigen::VectorXd &amp;positions) const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::statespace::dart::detail</name>
    <filename>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</filename>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::RevoluteJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PrismaticJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::TranslationalJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::BallJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PlanarJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::FreeJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::WeldJoint &gt;</class>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits</class>
    <class kind="struct">aikido::statespace::dart::detail::RJointTraits&lt; 0 &gt;</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; JointStateSpace &gt;</type>
      <name>Ptr</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ac5edd7cd9796d7a92e83134427897b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>common::type_list&lt; const ::dart::dynamics::BallJoint, const ::dart::dynamics::FreeJoint, const ::dart::dynamics::PlanarJoint, const ::dart::dynamics::PrismaticJoint, const ::dart::dynamics::RevoluteJoint, const ::dart::dynamics::TranslationalJoint, const ::dart::dynamics::WeldJoint &gt;</type>
      <name>ConstSupportedJoints</name>
      <anchorfile>de/d05/namespaceaikido_1_1statespace_1_1dart_1_1detail.html</anchorfile>
      <anchor>ae0c86b17fa7a0d028b17b1e69915b373</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl</name>
    <filename>da/d97/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::RevoluteJoint &gt;</name>
    <filename>d1/d08/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dcd02bff845f57b869a00eb38ea408e96.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d1/d08/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dcd02bff845f57b869a00eb38ea408e96.html</anchorfile>
      <anchor>a5f7d78a37386e79b40999bf0145a95ba</anchor>
      <arglist>(const ::dart::dynamics::RevoluteJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PrismaticJoint &gt;</name>
    <filename>d7/df0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df0cd567572cb219a515886b7bcb84ca3.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d7/df0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df0cd567572cb219a515886b7bcb84ca3.html</anchorfile>
      <anchor>a0346d1b9cfef2f9ad7b4d82ccb6ebea1</anchor>
      <arglist>(const ::dart::dynamics::PrismaticJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::TranslationalJoint &gt;</name>
    <filename>df/d87/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df720fd0edc05c102198e1191d470375a.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>df/d87/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df720fd0edc05c102198e1191d470375a.html</anchorfile>
      <anchor>a7dd058cea2720d54793f0ec415f5a2dd</anchor>
      <arglist>(const ::dart::dynamics::TranslationalJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::BallJoint &gt;</name>
    <filename>d7/de7/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1d5980ecfad8076ad93a8b9bf301763eb0.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d7/de7/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1d5980ecfad8076ad93a8b9bf301763eb0.html</anchorfile>
      <anchor>a194311934fa5b2b53c82daab48231b81</anchor>
      <arglist>(const ::dart::dynamics::BallJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::PlanarJoint &gt;</name>
    <filename>db/dd0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dc35b3420907431c495f31411a51c02a8.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>db/dd0/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1dc35b3420907431c495f31411a51c02a8.html</anchorfile>
      <anchor>a72bbec44db4754dc81f5fe6e37ebbf94</anchor>
      <arglist>(const ::dart::dynamics::PlanarJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::FreeJoint &gt;</name>
    <filename>d4/d22/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df2a2b605ea7e1e903263bc99e27f6a59.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d4/d22/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1df2a2b605ea7e1e903263bc99e27f6a59.html</anchorfile>
      <anchor>a01cef2ecf653cdecb1e3e90c2df4b730</anchor>
      <arglist>(const ::dart::dynamics::FreeJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::createJointStateSpaceFor_impl&lt; const ::dart::dynamics::WeldJoint &gt;</name>
    <filename>d4/d12/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1db6a9d2571d69f6f7ff47d182e65f5577.html</filename>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>d4/d12/structaikido_1_1statespace_1_1dart_1_1detail_1_1createJointStateSpaceFor__impl_3_01const_01_1_1db6a9d2571d69f6f7ff47d182e65f5577.html</anchorfile>
      <anchor>a0ef93c39914a2ef315e1af89cce0eda1</anchor>
      <arglist>(const ::dart::dynamics::WeldJoint *_joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::RJointTraits</name>
    <filename>d4/dcf/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>::dart::dynamics::GenericJoint&lt;::dart::math::RealVectorSpace&lt; N &gt;&gt;</type>
      <name>DartJoint</name>
      <anchorfile>d4/dcf/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits.html</anchorfile>
      <anchor>a319987ad1674ba3c9302a94df6322e1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::statespace::dart::detail::RJointTraits&lt; 0 &gt;</name>
    <filename>dd/d98/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits_3_010_01_4.html</filename>
    <member kind="typedef">
      <type>::dart::dynamics::WeldJoint</type>
      <name>DartJoint</name>
      <anchorfile>dd/d98/structaikido_1_1statespace_1_1dart_1_1detail_1_1RJointTraits_3_010_01_4.html</anchorfile>
      <anchor>a7617b09d59bd128a86d37dae7b47f874</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>aikido::trajectory</name>
    <filename>d5/da2/namespaceaikido_1_1trajectory.html</filename>
    <class kind="class">aikido::trajectory::Interpolated</class>
    <class kind="class">aikido::trajectory::Spline</class>
    <class kind="class">aikido::trajectory::Trajectory</class>
    <class kind="struct">aikido::trajectory::TrajectoryMetadata</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a2fa8e779f3587c13083faa74d6f72737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Interpolated &gt;</type>
      <name>ConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a6ac0c2c899cf0a43fe9a86fca8b2e622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Interpolated &gt;</type>
      <name>WeakInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a37caeb8a3bfbca4cd15ef0d48d488572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Interpolated &gt;</type>
      <name>WeakConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>acc72dc9ff0a7c62ada97262dd342331d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Interpolated &gt;</type>
      <name>UniqueInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a3958f463715266c2e7bd73ade7883ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Interpolated &gt;</type>
      <name>UniqueConstInterpolatedPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aac066660116f2c739043326d79c476f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Spline &gt;</type>
      <name>SplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>af715b917d92eede8c24a30790d273e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Spline &gt;</type>
      <name>ConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>aa8b189d07ea49d83c818baee644ebb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Spline &gt;</type>
      <name>WeakSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a896ee681516fff77ef6c14e209b5f00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Spline &gt;</type>
      <name>WeakConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>afd2d0c8515b91196680d24f8b8cef069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Spline &gt;</type>
      <name>UniqueSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a20652ba77dffc09d6854f0a67236fe49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Spline &gt;</type>
      <name>UniqueConstSplinePtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae070eefd5debfb165f8dd0399516271c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Trajectory &gt;</type>
      <name>TrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a4653e7dbb840b47d280798374eda6ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Trajectory &gt;</type>
      <name>ConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ae287f9bd79aff29551b41b2e815e4c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Trajectory &gt;</type>
      <name>WeakTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a52a5ed13cddf456c3955d965617d3131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; const Trajectory &gt;</type>
      <name>WeakConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a89384b5934145651e614b905bca5c199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Trajectory &gt;</type>
      <name>UniqueTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>a8af519255979af6d9041bbeade5dec34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Trajectory &gt;</type>
      <name>UniqueConstTrajectoryPtr</name>
      <anchorfile>d5/da2/namespaceaikido_1_1trajectory.html</anchorfile>
      <anchor>ad8b57775f2914cd7d23bf3339803c9b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::trajectory::Interpolated</name>
    <filename>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</filename>
    <base>aikido::trajectory::Trajectory</base>
    <class kind="struct">aikido::trajectory::Interpolated::Waypoint</class>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ace344c658bd269e07d17c9957a9ab015</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace, statespace::ConstInterpolatorPtr _interpolator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addWaypoint</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ad4d15fbffc2b4aa8ebe22d6611bc6e28</anchor>
      <arglist>(double _t, const statespace::StateSpace::State *_state)</arglist>
    </member>
    <member kind="function">
      <type>const statespace::StateSpace::State *</type>
      <name>getWaypoint</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a2f071cb86ab45f2b4c319dff8ccb3785</anchor>
      <arglist>(std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWaypointTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>adabf191e3de5655a466fbc30260e99fb</anchor>
      <arglist>(std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWaypoints</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a0b4758883fef23379ad04c47e20e3b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a6dea32d85b50faabe4831a0fe31ee838</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstInterpolatorPtr</type>
      <name>getInterpolator</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ac9c1c7edfd097fa3d6e0872e5b121f9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>aa384c8cbc6d6e0e12066c7f7bca62934</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>abad2ebcbc109deabc4b831a291b5eae9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ab654e12ef95ba9e39868fe8f7b92e963</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a7a0536ad2cf021599cdabe2e6ddc3403</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ab45db14a56c73e8e798cfac13b39e7a5</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivative</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a89855ff25ce2e41adf0c9cd3f25cf72e</anchor>
      <arglist>(double _t, int _derivative, Eigen::VectorXd &amp;_tangentVector) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Trajectory</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a7ba41e04bcbfd8ed709e9ae233018262</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>getWaypointIndexAfterTime</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a18addf61f5fcd3774d7f047302ae4bc7</anchor>
      <arglist>(double _t) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>a8b0e3eb6957f7a323cc9c96c069d88c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstInterpolatorPtr</type>
      <name>mInterpolator</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ab5a7c05ca47bb889686a5d007eaa5c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Waypoint &gt;</type>
      <name>mWaypoints</name>
      <anchorfile>da/d86/classaikido_1_1trajectory_1_1Interpolated.html</anchorfile>
      <anchor>ae2a301c449652f90fbb36076d94ae69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrajectoryMetadata</type>
      <name>metadata</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a90373241f15d91fb92868fd563de801a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::trajectory::Interpolated::Waypoint</name>
    <filename>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</filename>
    <member kind="function">
      <type></type>
      <name>Waypoint</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>abb505564510110730871511bd1a94459</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>ae852f527cbd04f5da9d1818c40f3c0f2</anchor>
      <arglist>(const Waypoint &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>aaff4c9931007e45bb41e327fa248e1ee</anchor>
      <arglist>(double rhs) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>t</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>a8ca35e14f4d57f03899d566f0176a1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>statespace::StateSpace::State *</type>
      <name>state</name>
      <anchorfile>d8/d9e/structaikido_1_1trajectory_1_1Interpolated_1_1Waypoint.html</anchorfile>
      <anchor>a12db59adc57a06a9696e459cd08fef24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::trajectory::Spline</name>
    <filename>df/d9c/classaikido_1_1trajectory_1_1Spline.html</filename>
    <base>aikido::trajectory::Trajectory</base>
    <class kind="struct">aikido::trajectory::Spline::PolynomialSegment</class>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ac272f9487fd2e3f3cbdebdcf91425f6e</anchor>
      <arglist>(statespace::ConstStateSpacePtr _stateSpace, double _startTime=0.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Spline</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a416302cb62209a07a49323adc063ef95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSegment</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a5f8169b7e883d63ef078c5c62b8482e1</anchor>
      <arglist>(const Eigen::MatrixXd &amp;_coefficients, double _duration, const statespace::StateSpace::State *_startState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSegment</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a2b18c47dc676e4ad5fa42c4256bdc860</anchor>
      <arglist>(const Eigen::MatrixXd &amp;_coefficients, double _duration)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumSegments</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ad0eda674215ac25874883293dfc4cbfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a3bf6ccd39bbc22e81047dd5993fc8493</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a07df1d6567fa29ab7e958c88a9ecb635</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a10d9ffb6373c2a2b76c57b9a74a4b53b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>acf16befaf3d628f575cd3fe0fae53c25</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a4693a28449a17760c289e8194721331e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a0f9b5cc24ca171aa743655b86ccc6cc5</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDerivative</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a9b4ab7558a90397ebf8dad78c6f2e848</anchor>
      <arglist>(double _t, int _derivative, Eigen::VectorXd &amp;_tangentVector) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumWaypoints</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ac36a31a1ebb509a75b7bf085c49123e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWaypoint</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ac7016db9cf7c1e83e9954ce068241332</anchor>
      <arglist>(std::size_t _index, statespace::StateSpace::State *state) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWaypointTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ab4967fac197e6d2e608bbdc20c304299</anchor>
      <arglist>(std::size_t _index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getWaypointDerivative</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ac24b36b4e1f37d75bd82bfef58b91684</anchor>
      <arglist>(std::size_t _index, int _derivative, Eigen::VectorXd &amp;_tangentVector) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::pair&lt; std::size_t, double &gt;</type>
      <name>getSegmentForTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a62fda8df5a427eb2c604a000401b313e</anchor>
      <arglist>(double _t) const </arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Eigen::VectorXd</type>
      <name>evaluatePolynomial</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a6235a36a6c396e192fd1b7dd157f6a30</anchor>
      <arglist>(const Eigen::MatrixXd &amp;_coefficients, double _t, int _derivative)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>statespace::ConstStateSpacePtr</type>
      <name>mStateSpace</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a80f8f0aff92b6a66059833c20d31dd8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mStartTime</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>ab2857db05f49965e4adee7588edd0075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PolynomialSegment &gt;</type>
      <name>mSegments</name>
      <anchorfile>df/d9c/classaikido_1_1trajectory_1_1Spline.html</anchorfile>
      <anchor>a9a62756524518742b358443c2dd1ae52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::trajectory::Spline::PolynomialSegment</name>
    <filename>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</filename>
    <member kind="variable">
      <type>statespace::StateSpace::State *</type>
      <name>mStartState</name>
      <anchorfile>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</anchorfile>
      <anchor>a0d2f07b70e8819c789ba38bb76eb8120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>mCoefficients</name>
      <anchorfile>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</anchorfile>
      <anchor>a88c10f7fa23ca9f18c9f451245fb40cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mDuration</name>
      <anchorfile>d9/dbf/structaikido_1_1trajectory_1_1Spline_1_1PolynomialSegment.html</anchorfile>
      <anchor>aa69ac3a05b9ec8d3a2bfd823ae7170db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>aikido::trajectory::Trajectory</name>
    <filename>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual statespace::ConstStateSpacePtr</type>
      <name>getStateSpace</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a145e4ab4d0769a7958ea4409a6908261</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getNumDerivatives</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a7016e324b3221e879cc39f1f25596551</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDuration</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a86cd2f3cad04e26104acfae324fc18a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getStartTime</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a147a4fa5d809eb79c7b1074e9ae235b3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getEndTime</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a6554c5a47a73ae0da6543a1ea7bb45b0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a93339268026fdd7a4cd44c7acbfbe250</anchor>
      <arglist>(double _t, statespace::StateSpace::State *_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateDerivative</name>
      <anchorfile>dc/dd0/classaikido_1_1trajectory_1_1Trajectory.html</anchorfile>
      <anchor>a2ebe5452fb48faea67f5d935bd59614b</anchor>
      <arglist>(double _t, int _derivative, Eigen::VectorXd &amp;_tangentVector) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>aikido::trajectory::TrajectoryMetadata</name>
    <filename>d4/dba/structaikido_1_1trajectory_1_1TrajectoryMetadata.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>executorValidated</name>
      <anchorfile>d4/dba/structaikido_1_1trajectory_1_1TrajectoryMetadata.html</anchorfile>
      <anchor>a5c2d21f5dd4535142c80033277e35c0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>AspectWithState&lt; Support, detail::SupportStateData, EndEffector, updateState &gt;</name>
    <filename>d0/d63/namespaceAspectWithState_3_01Support_00_01detail_1_1SupportStateData_00_01EndEffector_00_01updateState_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>AspectWithStateAndVersionedProperties&lt; Support, detail::SupportStateData, detail::SupportPropertiesData, EndEffector,&amp;detail::SupportUpdate &gt;</name>
    <filename>d1/ddc/namespaceAspectWithStateAndVersionedProperties_3_01Support_00_01detail_1_1SupportStateData_00_01117d0eff804d46a9f6b75fc23833a4a7.html</filename>
  </compound>
  <compound kind="namespace">
    <name>AspectWithVersionedProperties&lt; AspectWithState&lt; Support, detail::SupportStateData, EndEffector, updateState &gt;, Support, detail::SupportPropertiesData, EndEffector, updateState &gt;</name>
    <filename>d0/d6e/namespaceAspectWithVersionedProperties_3_01AspectWithState_3_01Support_00_01detail_1_1SupportStaf1345597119b63a5782281bb970851f0.html</filename>
  </compound>
  <compound kind="namespace">
    <name>CompositeJoiner&lt; EmbedProperties&lt; EndEffector, detail::EndEffectorProperties &gt;, CompositeBases... &gt;</name>
    <filename>d0/d9e/namespaceCompositeJoiner_3_01EmbedProperties_3_01EndEffector_00_01detail_1_1EndEffectorPropertiec4187619d01881566f5562dec42cce82.html</filename>
  </compound>
  <compound kind="namespace">
    <name>CompositeJoiner&lt; EmbedProperties&lt; Marker, detail::MarkerProperties &gt;, CompositeBases... &gt;</name>
    <filename>da/dde/namespaceCompositeJoiner_3_01EmbedProperties_3_01Marker_00_01detail_1_1MarkerProperties_01_4_00_01CompositeBases_8_8_8_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::collision::CollisionDetector::ManagerForSharableCollisionObjects</name>
    <filename>d2/d54/namespacedart_1_1collision_1_1CollisionDetector_1_1ManagerForSharableCollisionObjects.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::collision::CollisionDetector::ManagerForUnsharableCollisionObjects</name>
    <filename>dd/d21/namespacedart_1_1collision_1_1CollisionDetector_1_1ManagerForUnsharableCollisionObjects.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::common::detail::DefaultCreator&lt; T, std::shared_ptr&lt; T &gt;, Args... &gt;</name>
    <filename>d7/de7/namespacedart_1_1common_1_1detail_1_1DefaultCreator_3_01T_00_01std_1_1shared__ptr_3_01T_01_4_00_01Args_8_8_8_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::common::detail::DefaultCreator&lt; T, std::unique_ptr&lt; T &gt;, Args... &gt;</name>
    <filename>d1/d9d/namespacedart_1_1common_1_1detail_1_1DefaultCreator_3_01T_00_01std_1_1unique__ptr_3_01T_01_4_00_01Args_8_8_8_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::common::detail::EmbeddedPropertiesAspect</name>
    <filename>db/d08/namespacedart_1_1common_1_1detail_1_1EmbeddedPropertiesAspect.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::common::detail::EmbeddedStateAspect</name>
    <filename>dc/d73/namespacedart_1_1common_1_1detail_1_1EmbeddedStateAspect.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::common::Factory</name>
    <filename>da/dc1/namespacedart_1_1common_1_1Factory.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::FixedJacobianNode</name>
    <filename>d7/d06/namespacedart_1_1dynamics_1_1FixedJacobianNode.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::HierarchicalIK</name>
    <filename>d6/d6b/namespacedart_1_1dynamics_1_1HierarchicalIK.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::InverseKinematics</name>
    <filename>d9/d45/namespacedart_1_1dynamics_1_1InverseKinematics.html</filename>
    <namespace>dart::dynamics::InverseKinematics::TaskSpaceRegion</namespace>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::InverseKinematics::TaskSpaceRegion</name>
    <filename>db/d34/namespacedart_1_1dynamics_1_1InverseKinematics_1_1TaskSpaceRegion.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::Joint</name>
    <filename>d6/de7/namespacedart_1_1dynamics_1_1Joint.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::Linkage</name>
    <filename>d6/dab/namespacedart_1_1dynamics_1_1Linkage.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::ReferentialSkeleton</name>
    <filename>dd/d52/namespacedart_1_1dynamics_1_1ReferentialSkeleton.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::Skeleton</name>
    <filename>da/d9b/namespacedart_1_1dynamics_1_1Skeleton.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::TranslationalJoint</name>
    <filename>de/dba/namespacedart_1_1dynamics_1_1TranslationalJoint.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::WeldJoint</name>
    <filename>d6/de7/namespacedart_1_1dynamics_1_1WeldJoint.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::dynamics::ZeroDofJoint</name>
    <filename>d9/d6c/namespacedart_1_1dynamics_1_1ZeroDofJoint.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::optimizer::snopt::SnoptInterface</name>
    <filename>d1/d2b/namespacedart_1_1optimizer_1_1snopt_1_1SnoptInterface.html</filename>
  </compound>
  <compound kind="namespace">
    <name>dart::optimizer::Solver</name>
    <filename>da/d13/namespacedart_1_1optimizer_1_1Solver.html</filename>
  </compound>
  <compound kind="namespace">
    <name>EmbeddedPropertiesAspect&lt; detail::EmbeddedStateAspect&lt; CompositeTrackingAspect&lt; CompositeT &gt;, EmbeddedStateAndPropertiesAspect&lt; CompositeT, StateDataT, PropertiesDataT &gt;, StateDataT &gt;, EmbeddedStateAndPropertiesAspect&lt; CompositeT, StateDataT, PropertiesDataT &gt;, PropertiesDataT &gt;</name>
    <filename>dd/dd3/namespaceEmbeddedPropertiesAspect_3_01detail_1_1EmbeddedStateAspect_3_01CompositeTrackingAspect_9e2070146278aeea30af789c6f1fcb91.html</filename>
  </compound>
  <compound kind="namespace">
    <name>EmbedProperties&lt; FixedFrame, detail::FixedFrameProperties &gt;</name>
    <filename>d6/df1/namespaceEmbedProperties_3_01FixedFrame_00_01detail_1_1FixedFrameProperties_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>EmbedProperties&lt; Joint, detail::JointProperties &gt;</name>
    <filename>d3/db7/namespaceEmbedProperties_3_01Joint_00_01detail_1_1JointProperties_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>EmbedPropertiesOnTopOf&lt; EndEffector, detail::EndEffectorProperties, detail::EndEffectorCompositeBase &gt;</name>
    <filename>d4/dfb/namespaceEmbedPropertiesOnTopOf_3_01EndEffector_00_01detail_1_1EndEffectorProperties_00_01detail4bf7ba1f71edc963335f008ec345aaaf.html</filename>
  </compound>
  <compound kind="namespace">
    <name>EmbedPropertiesOnTopOf&lt; Marker, detail::MarkerProperties, FixedJacobianNode &gt;</name>
    <filename>d8/d53/namespaceEmbedPropertiesOnTopOf_3_01Marker_00_01detail_1_1MarkerProperties_00_01FixedJacobianNode_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>EntityNodeBase&lt; Base, std::is_base_of&lt; common::Composite, Base &gt;::value &gt;</name>
    <filename>dc/db5/namespaceEntityNodeBase_3_01Base_00_01std_1_1is__base__of_3_01common_1_1Composite_00_01Base_01_4_1_1value_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>GenericJoint&lt; math::R3Space &gt;</name>
    <filename>d0/d6b/namespaceGenericJoint_3_01math_1_1R3Space_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>GenericJoint&lt; math::SE3Space &gt;</name>
    <filename>df/d40/namespaceGenericJoint_3_01math_1_1SE3Space_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>GenericJoint&lt; math::SO3Space &gt;</name>
    <filename>d9/d67/namespaceGenericJoint_3_01math_1_1SO3Space_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Index&lt; flann::L2&lt; double &gt; &gt;</name>
    <filename>d7/df8/namespaceIndex_3_01flann_1_1L2_3_01double_01_4_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NameManager&lt; dart::dynamics::BodyNode * &gt;</name>
    <filename>db/d08/namespaceNameManager_3_01dart_1_1dynamics_1_1BodyNode_01_5_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NameManager&lt; dart::dynamics::DegreeOfFreedom * &gt;</name>
    <filename>dd/db4/namespaceNameManager_3_01dart_1_1dynamics_1_1DegreeOfFreedom_01_5_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NameManager&lt; dart::dynamics::Joint * &gt;</name>
    <filename>d8/db0/namespaceNameManager_3_01dart_1_1dynamics_1_1Joint_01_5_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NameManager&lt; dart::dynamics::SoftBodyNode * &gt;</name>
    <filename>d4/d68/namespaceNameManager_3_01dart_1_1dynamics_1_1SoftBodyNode_01_5_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NameManager&lt; dynamics::SimpleFramePtr &gt;</name>
    <filename>d0/d84/namespaceNameManager_3_01dynamics_1_1SimpleFramePtr_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NameManager&lt; dynamics::SkeletonPtr &gt;</name>
    <filename>da/d9e/namespaceNameManager_3_01dynamics_1_1SkeletonPtr_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NodeManagerJoinerForBodyNode&lt; common::Virtual&lt; BodyNodeSpecializedFor&lt; SpecNode1 &gt; &gt;, common::Virtual&lt; BodyNodeSpecializedFor&lt; OtherSpecNodes... &gt; &gt; &gt;</name>
    <filename>d1/d9e/namespaceNodeManagerJoinerForBodyNode_3_01common_1_1Virtual_3_01BodyNodeSpecializedFor_3_01SpecN338ff09812370cfeaa587c332da52f45.html</filename>
  </compound>
  <compound kind="namespace">
    <name>NodeManagerJoinerForSkeleton&lt; common::Virtual&lt; SkeletonSpecializedFor&lt; SpecNode1 &gt; &gt;, common::Virtual&lt; SkeletonSpecializedFor&lt; OtherSpecNodes... &gt; &gt; &gt;</name>
    <filename>d9/d16/namespaceNodeManagerJoinerForSkeleton_3_01common_1_1Virtual_3_01SkeletonSpecializedFor_3_01SpecNbaf492f0ba09b12f6c76c94e3d60c7b1.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RequiresAspect&lt; common::EmbeddedPropertiesAspect&lt; DerivedT, PropertiesDataT &gt; &gt;</name>
    <filename>df/de1/namespaceRequiresAspect_3_01common_1_1EmbeddedPropertiesAspect_3_01DerivedT_00_01PropertiesDataT_01_4_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RequiresAspect&lt; common::EmbeddedPropertiesAspect&lt; FixedFrame, detail::FixedFrameProperties &gt; &gt;</name>
    <filename>d6/d88/namespaceRequiresAspect_3_01common_1_1EmbeddedPropertiesAspect_3_01FixedFrame_00_01detail_1_1FixedFrameProperties_01_4_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RequiresAspect&lt; common::EmbeddedPropertiesAspect&lt; Joint, detail::JointProperties &gt; &gt;</name>
    <filename>df/d17/namespaceRequiresAspect_3_01common_1_1EmbeddedPropertiesAspect_3_01Joint_00_01detail_1_1JointProperties_01_4_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RequiresAspect&lt; common::EmbeddedStateAndPropertiesAspect&lt; DerivedT, StateDataT, PropertiesDataT &gt; &gt;</name>
    <filename>d7/d50/namespaceRequiresAspect_3_01common_1_1EmbeddedStateAndPropertiesAspect_3_01DerivedT_00_01StateDa9045cbb3a38970df5ec497fad0ab8183.html</filename>
  </compound>
  <compound kind="namespace">
    <name>RequiresAspect&lt; common::EmbeddedStateAspect&lt; DerivedT, StateDataT &gt; &gt;</name>
    <filename>d1/d60/namespaceRequiresAspect_3_01common_1_1EmbeddedStateAspect_3_01DerivedT_00_01StateDataT_01_4_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Signal&lt; void(const Entity *, const std::string &amp;_oldName, const std::string &amp;_newName)&gt;</name>
    <filename>d0/dcb/namespaceSignal_3_01void_07const_01Entity_01_5_00_01const_01std_1_1string_01_6__oldName_00_01condde57d5fae607ea994c72131f4ddd9c0.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Signal&lt; void(const ShapeFrame *thisShapeFrame, const Eigen::Isometry3d &amp;oldTransform, const Eigen::Isometry3d &amp;newTransform)&gt;</name>
    <filename>d9/de6/namespaceSignal_3_01void_07const_01ShapeFrame_01_5thisShapeFrame_00_01const_01Eigen_1_1Isometry3244b434cfddfec406e150c9e4f346d9b.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Signal&lt; void(const std::string &amp;_oldName, const std::string &amp;_newName)&gt;</name>
    <filename>d1/d1a/namespaceSignal_3_01void_07const_01std_1_1string_01_6__oldName_00_01const_01std_1_1string_01_6__newName_08_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Signal&lt; void(std::shared_ptr&lt; const MetaSkeleton &gt; _skeleton, const std::string &amp;_oldName, const std::string &amp;_newName)&gt;</name>
    <filename>de/d71/namespaceSignal_3_01void_07std_1_1shared__ptr_3_01const_01MetaSkeleton_01_4_01__skeleton_00_01coa55fe4bf1d16276e2b782ce7a4275433.html</filename>
  </compound>
  <compound kind="namespace">
    <name>SlotRegister&lt; Signal&lt; void(const Entity *, const std::string &amp;_oldName, const std::string &amp;_newName)&gt; &gt;</name>
    <filename>d5/dd1/namespaceSlotRegister_3_01Signal_3_01void_07const_01Entity_01_5_00_01const_01std_1_1string_01_6_91f4dbca664d5a3c2ac6cf3ee4275a52.html</filename>
  </compound>
  <compound kind="namespace">
    <name>SlotRegister&lt; Signal&lt; void(const ShapeFrame *thisShapeFrame, const Eigen::Isometry3d &amp;oldTransform, const Eigen::Isometry3d &amp;newTransform)&gt; &gt;</name>
    <filename>d1/df2/namespaceSlotRegister_3_01Signal_3_01void_07const_01ShapeFrame_01_5thisShapeFrame_00_01const_01E507ebcca7301fa0d05dd978a881e9569.html</filename>
  </compound>
  <compound kind="namespace">
    <name>SlotRegister&lt; Signal&lt; void(const std::string &amp;_oldName, const std::string &amp;_newName)&gt; &gt;</name>
    <filename>d3/d7e/namespaceSlotRegister_3_01Signal_3_01void_07const_01std_1_1string_01_6__oldName_00_01const_01std3fd4a4a61b9b5d5e432952c06f035cdc.html</filename>
  </compound>
  <compound kind="namespace">
    <name>SlotRegister&lt; Signal&lt; void(std::shared_ptr&lt; const MetaSkeleton &gt; _skeleton, const std::string &amp;_oldName, const std::string &amp;_newName)&gt; &gt;</name>
    <filename>d6/d6d/namespaceSlotRegister_3_01Signal_3_01void_07std_1_1shared__ptr_3_01const_01MetaSkeleton_01_4_01_27e601c41b08afcd5729a549ac840c3c.html</filename>
  </compound>
  <compound kind="namespace">
    <name>sub_ptr&lt; dart::dynamics::InverseKinematics &gt;</name>
    <filename>db/d37/namespacesub__ptr_3_01dart_1_1dynamics_1_1InverseKinematics_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>sub_ptr&lt; dart::dynamics::JacobianNode &gt;</name>
    <filename>d0/da9/namespacesub__ptr_3_01dart_1_1dynamics_1_1JacobianNode_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>sub_ptr&lt; dart::gui::osg::InteractiveTool &gt;</name>
    <filename>d5/d60/namespacesub__ptr_3_01dart_1_1gui_1_1osg_1_1InteractiveTool_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>UnorderedPairs&lt; dynamics::BodyNode &gt;</name>
    <filename>d3/ddb/namespaceUnorderedPairs_3_01dynamics_1_1BodyNode_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>YAML</name>
    <filename>d5/d2f/namespaceYAML.html</filename>
    <class kind="struct">YAML::convert&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt; &gt;</class>
    <class kind="struct">YAML::convert&lt; std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt; &gt;</class>
  </compound>
  <compound kind="struct">
    <name>YAML::convert&lt; Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;</type>
      <name>MatrixType</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a8465f040506bd76e09328abee28f6892</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MatrixType::Index</type>
      <name>Index</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a9618c65dff472d3e6b3b63f5ae7a847b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>encode</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a2f4f387835df42ca87f5d1b1cf60dfa9</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>decode</name>
      <anchorfile>db/d43/structYAML_1_1convert_3_01Eigen_1_1Matrix_3_01__Scalar_00_01__Rows_00_01__Cols_00_01__Options_00d917da96fb8127c4f4ec6af72b51088a.html</anchorfile>
      <anchor>a3e6b7aa9c8112f87f4ed8e282614f2c6</anchor>
      <arglist>(const YAML::Node &amp;node, MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>YAML::convert&lt; Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt; &gt;</name>
    <filename>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <templarg>_Mode</templarg>
    <templarg>_Options</templarg>
    <member kind="typedef">
      <type>Eigen::Transform&lt; _Scalar, _Dim, _Mode, _Options &gt;</type>
      <name>TransformType</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>a08b86af0b5b84a73d3fed6bcc434533d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TransformType::MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>af254fc2bdeb01b5b48008a7cc410cb16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>encode</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>ae005f5c29cbbfbda72f48566c7bbfe82</anchor>
      <arglist>(const TransformType &amp;transform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>decode</name>
      <anchorfile>d2/d0a/structYAML_1_1convert_3_01Eigen_1_1Transform_3_01__Scalar_00_01__Dim_00_01__Mode_00_01__Options_01_4_01_4.html</anchorfile>
      <anchor>a9de160fbb870be1838ad57ed50c1f609</anchor>
      <arglist>(const Node &amp;node, TransformType &amp;transform)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>YAML::convert&lt; std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt; &gt;</name>
    <filename>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::unordered_map&lt; _Key, _Tp, _Hash, _Pred, _Alloc &gt;</type>
      <name>UnorderedMap</name>
      <anchorfile>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</anchorfile>
      <anchor>a1ed108aa27428a4707c9b50f8bb8ecf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>encode</name>
      <anchorfile>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</anchorfile>
      <anchor>a9090a6dbf794de5a8bdf7a249bf9312d</anchor>
      <arglist>(const UnorderedMap &amp;map)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>decode</name>
      <anchorfile>d6/dce/structYAML_1_1convert_3_01std_1_1unordered__map_3_01__Key_00_01__Tp_00_01__Hash_00_01__Pred_00_01__Alloc_01_4_01_4.html</anchorfile>
      <anchor>ac12660d7433969838259102dbbae855d</anchor>
      <arglist>(const Node &amp;node, UnorderedMap &amp;map)</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>include/aikido</name>
    <path>/include/aikido/</path>
    <filename>dir_e27bb042cc2ec05b74a3b40bc64a239a.html</filename>
    <dir>include/aikido/common</dir>
    <dir>include/aikido/constraint</dir>
    <dir>include/aikido/control</dir>
    <dir>include/aikido/distance</dir>
    <dir>include/aikido/io</dir>
    <dir>include/aikido/perception</dir>
    <dir>include/aikido/planner</dir>
    <dir>include/aikido/robot</dir>
    <dir>include/aikido/rviz</dir>
    <dir>include/aikido/statespace</dir>
    <dir>include/aikido/trajectory</dir>
    <file>common.hpp</file>
    <file>constraint.hpp</file>
    <file>control.hpp</file>
    <file>distance.hpp</file>
    <file>io.hpp</file>
    <file>perception.hpp</file>
    <file>planner.hpp</file>
    <file>rviz.hpp</file>
    <file>statespace.hpp</file>
    <file>trajectory.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/common</name>
    <path>/include/aikido/common/</path>
    <filename>dir_4fe6cf1e1cd4804aa6da55b984120611.html</filename>
    <dir>include/aikido/common/detail</dir>
    <file>algorithm.hpp</file>
    <file>ExecutorMultiplexer.hpp</file>
    <file>ExecutorThread.hpp</file>
    <file>metaprogramming.hpp</file>
    <file>pair.hpp</file>
    <file>pointers.hpp</file>
    <file>PseudoInverse.hpp</file>
    <file>RNG.hpp</file>
    <file>Spline.hpp</file>
    <file>StepSequence.hpp</file>
    <file>stream.hpp</file>
    <file>string.hpp</file>
    <file>VanDerCorput.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/constraint</name>
    <path>/include/aikido/constraint/</path>
    <filename>dir_06fc28a639d31d06a2295c53f2a7ca85.html</filename>
    <dir>include/aikido/constraint/dart</dir>
    <dir>include/aikido/constraint/detail</dir>
    <dir>include/aikido/constraint/uniform</dir>
    <file>CartesianProductProjectable.hpp</file>
    <file>CartesianProductSampleable.hpp</file>
    <file>CartesianProductTestable.hpp</file>
    <file>CyclicSampleable.hpp</file>
    <file>DefaultTestableOutcome.hpp</file>
    <file>Differentiable.hpp</file>
    <file>DifferentiableIntersection.hpp</file>
    <file>DifferentiableSubspace.hpp</file>
    <file>FiniteSampleable.hpp</file>
    <file>NewtonsMethodProjectable.hpp</file>
    <file>Projectable.hpp</file>
    <file>RejectionSampleable.hpp</file>
    <file>Sampleable.hpp</file>
    <file>Satisfied.hpp</file>
    <file>Testable.hpp</file>
    <file>TestableIntersection.hpp</file>
    <file>TestableOutcome.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/control</name>
    <path>/include/aikido/control/</path>
    <filename>dir_76042c000c9153f4dd343ac2c1224e68.html</filename>
    <dir>include/aikido/control/ros</dir>
    <file>BarrettFingerKinematicSimulationPositionCommandExecutor.hpp</file>
    <file>BarrettFingerKinematicSimulationSpreadCommandExecutor.hpp</file>
    <file>BarrettHandKinematicSimulationPositionCommandExecutor.hpp</file>
    <file>InstantaneousTrajectoryExecutor.hpp</file>
    <file>KinematicSimulationTrajectoryExecutor.hpp</file>
    <file>PositionCommandExecutor.hpp</file>
    <file>QueuedTrajectoryExecutor.hpp</file>
    <file>TrajectoryExecutor.hpp</file>
    <file>TrajectoryResult.hpp</file>
    <file>TrajectoryRunningException.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/statespace/dart</name>
    <path>/include/aikido/statespace/dart/</path>
    <filename>dir_2367834775f614a661e9022ce8b33aae.html</filename>
    <dir>include/aikido/statespace/dart/detail</dir>
    <file>JointStateSpace.hpp</file>
    <file>JointStateSpaceHelpers.hpp</file>
    <file>MetaSkeletonStateSaver.hpp</file>
    <file>MetaSkeletonStateSpace.hpp</file>
    <file>RnJoint.hpp</file>
    <file>SE2Joint.hpp</file>
    <file>SE3Joint.hpp</file>
    <file>SO2Joint.hpp</file>
    <file>SO3Joint.hpp</file>
    <file>WeldJoint.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/constraint/dart</name>
    <path>/include/aikido/constraint/dart/</path>
    <filename>dir_dafebb757c0df0e08949e35c1563b794.html</filename>
    <dir>include/aikido/constraint/dart/detail</dir>
    <file>CollisionFree.hpp</file>
    <file>CollisionFreeOutcome.hpp</file>
    <file>FrameDifferentiable.hpp</file>
    <file>FramePairDifferentiable.hpp</file>
    <file>FrameTestable.hpp</file>
    <file>InverseKinematicsSampleable.hpp</file>
    <file>JointStateSpaceHelpers.hpp</file>
    <file>TSR.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/statespace/detail</name>
    <path>/include/aikido/statespace/detail/</path>
    <filename>dir_b77b414c296f4e6a5cad06d900e1e18d.html</filename>
    <file>CartesianProduct-impl.hpp</file>
    <file>Rn-impl.hpp</file>
    <file>ScopedState-impl.hpp</file>
    <file>SE2-impl.hpp</file>
    <file>SE3-impl.hpp</file>
    <file>SO2-impl.hpp</file>
    <file>SO3-impl.hpp</file>
    <file>StateHandle-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/planner/ompl/detail</name>
    <path>/include/aikido/planner/ompl/detail/</path>
    <filename>dir_5de0011a095afccf871a0c358f8a8645.html</filename>
    <file>CRRT-impl.hpp</file>
    <file>CRRTConnect-impl.hpp</file>
    <file>Planner-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/io/detail</name>
    <path>/include/aikido/io/detail/</path>
    <filename>dir_7e227bddec142084aff557ace21af9b8.html</filename>
    <file>yaml_extension.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/distance/detail</name>
    <path>/include/aikido/distance/detail/</path>
    <filename>dir_eaaef87200782902157cd317025147a3.html</filename>
    <file>defaults-impl.hpp</file>
    <file>RnEuclidean-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/control/ros/detail</name>
    <path>/include/aikido/control/ros/detail/</path>
    <filename>dir_fe3c32947f016436bab9d3b8b6cfcafd.html</filename>
    <file>util-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/constraint/uniform/detail</name>
    <path>/include/aikido/constraint/uniform/detail/</path>
    <filename>dir_a86b58a31128e09fabe86724031726bf.html</filename>
    <file>RnBoxConstraint-impl.hpp</file>
    <file>RnConstantSampler-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/constraint/detail</name>
    <path>/include/aikido/constraint/detail/</path>
    <filename>dir_61e97bfc5792541bb5aa1372cbe975a0.html</filename>
    <file>TestableOutcome-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/statespace/dart/detail</name>
    <path>/include/aikido/statespace/dart/detail/</path>
    <filename>dir_29fc1cfc276cf0d0ef54e5926e14f1e6.html</filename>
    <file>JointStateSpaceHelpers-impl.hpp</file>
    <file>MetaSkeletonStateSpace-impl.hpp</file>
    <file>RnJoint-impl.hpp</file>
    <file>RnJointTraits.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/constraint/dart/detail</name>
    <path>/include/aikido/constraint/dart/detail/</path>
    <filename>dir_a8f83ab3dc685d1145620ad1b5a146b2.html</filename>
    <file>JointStateSpaceHelpers-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/common/detail</name>
    <path>/include/aikido/common/detail/</path>
    <filename>dir_774c47019acf60511c47c8f916cc6758.html</filename>
    <file>algorithm-impl.hpp</file>
    <file>ExecutorThread-impl.hpp</file>
    <file>metaprogramming-impl.hpp</file>
    <file>pair-impl.hpp</file>
    <file>RNG-impl.hpp</file>
    <file>Spline-impl.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/distance</name>
    <path>/include/aikido/distance/</path>
    <filename>dir_8d98aa7dba81efee26e604db4b1fcb9c.html</filename>
    <dir>include/aikido/distance/detail</dir>
    <file>CartesianProductWeighted.hpp</file>
    <file>defaults.hpp</file>
    <file>DistanceMetric.hpp</file>
    <file>RnEuclidean.hpp</file>
    <file>SE2.hpp</file>
    <file>SE2Weighted.hpp</file>
    <file>SO2Angular.hpp</file>
    <file>SO3Angular.hpp</file>
    <file>Weighted.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/include/</path>
    <filename>dir_d44c64559bbebec7f509842c48db8b23.html</filename>
    <dir>include/aikido</dir>
  </compound>
  <compound kind="dir">
    <name>include/aikido/io</name>
    <path>/include/aikido/io/</path>
    <filename>dir_89df56d6a98883451e49a0b410404f11.html</filename>
    <dir>include/aikido/io/detail</dir>
    <file>CatkinResourceRetriever.hpp</file>
    <file>KinBodyParser.hpp</file>
    <file>yaml.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/planner/ompl</name>
    <path>/include/aikido/planner/ompl/</path>
    <filename>dir_0d98904e4e6a3db3cbe50dd342d2f5cf.html</filename>
    <dir>include/aikido/planner/ompl/detail</dir>
    <file>BackwardCompatibility.hpp</file>
    <file>CRRT.hpp</file>
    <file>CRRTConnect.hpp</file>
    <file>dart.hpp</file>
    <file>GeometricStateSpace.hpp</file>
    <file>GoalRegion.hpp</file>
    <file>MotionValidator.hpp</file>
    <file>Planner.hpp</file>
    <file>StateSampler.hpp</file>
    <file>StateValidityChecker.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/planner/parabolic</name>
    <path>/include/aikido/planner/parabolic/</path>
    <filename>dir_87549855c3f05f03726d0790f36a1872.html</filename>
    <file>ParabolicSmoother.hpp</file>
    <file>ParabolicTimer.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/perception</name>
    <path>/include/aikido/perception/</path>
    <filename>dir_e70b86dbc2197fbebed95ffabdce28a3.html</filename>
    <file>AprilTagsDatabase.hpp</file>
    <file>AprilTagsModule.hpp</file>
    <file>ObjectDatabase.hpp</file>
    <file>PerceptionModule.hpp</file>
    <file>RcnnPoseModule.hpp</file>
    <file>shape_conversions.hpp</file>
    <file>YamlAprilTagsDatabase.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/planner</name>
    <path>/include/aikido/planner/</path>
    <filename>dir_10db62fef993b3a9499e997fc74ab999.html</filename>
    <dir>include/aikido/planner/ompl</dir>
    <dir>include/aikido/planner/parabolic</dir>
    <dir>include/aikido/planner/vectorfield</dir>
    <file>PlanningResult.hpp</file>
    <file>SnapPlanner.hpp</file>
    <file>TrajectoryPostProcessor.hpp</file>
    <file>World.hpp</file>
    <file>WorldStateSaver.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/robot</name>
    <path>/include/aikido/robot/</path>
    <filename>dir_285add13db87f2639c033865817d89ca.html</filename>
    <file>ConcreteManipulator.hpp</file>
    <file>ConcreteRobot.hpp</file>
    <file>GrabMetadata.hpp</file>
    <file>Hand.hpp</file>
    <file>Manipulator.hpp</file>
    <file>Robot.hpp</file>
    <file>util.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/control/ros</name>
    <path>/include/aikido/control/ros/</path>
    <filename>dir_dae655f02f33fe7ff006ec30869ab1f6.html</filename>
    <dir>include/aikido/control/ros/detail</dir>
    <file>Conversions.hpp</file>
    <file>RosJointStateClient.hpp</file>
    <file>RosPositionCommandExecutor.hpp</file>
    <file>RosTrajectoryExecutionException.hpp</file>
    <file>RosTrajectoryExecutor.hpp</file>
    <file>util.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/rviz</name>
    <path>/include/aikido/rviz/</path>
    <filename>dir_5d3d14cb7ff9988f659a01c8c6105132.html</filename>
    <file>BodyNodeMarker.hpp</file>
    <file>FrameMarker.hpp</file>
    <file>InteractiveMarkerViewer.hpp</file>
    <file>pointers.hpp</file>
    <file>ResourceServer.hpp</file>
    <file>shape_conversions.hpp</file>
    <file>ShapeFrameMarker.hpp</file>
    <file>SkeletonMarker.hpp</file>
    <file>TrajectoryMarker.hpp</file>
    <file>TSRMarker.hpp</file>
    <file>WorldInteractiveMarkerViewer.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/statespace</name>
    <path>/include/aikido/statespace/</path>
    <filename>dir_4152e435d0f18199375b0b94fc71768b.html</filename>
    <dir>include/aikido/statespace/dart</dir>
    <dir>include/aikido/statespace/detail</dir>
    <file>CartesianProduct.hpp</file>
    <file>GeodesicInterpolator.hpp</file>
    <file>Interpolator.hpp</file>
    <file>Rn.hpp</file>
    <file>ScopedState.hpp</file>
    <file>SE2.hpp</file>
    <file>SE3.hpp</file>
    <file>SO2.hpp</file>
    <file>SO3.hpp</file>
    <file>StateHandle.hpp</file>
    <file>StateSpace.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/trajectory</name>
    <path>/include/aikido/trajectory/</path>
    <filename>dir_2e63d4f3da896941e6c6c29f16dda101.html</filename>
    <file>Interpolated.hpp</file>
    <file>Spline.hpp</file>
    <file>Trajectory.hpp</file>
    <file>TrajectoryMetadata.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/constraint/uniform</name>
    <path>/include/aikido/constraint/uniform/</path>
    <filename>dir_072c517799cf28620da34074b161be23.html</filename>
    <dir>include/aikido/constraint/uniform/detail</dir>
    <file>RnBoxConstraint.hpp</file>
    <file>RnConstantSampler.hpp</file>
    <file>SE2BoxConstraint.hpp</file>
    <file>SO2UniformSampler.hpp</file>
    <file>SO3UniformSampler.hpp</file>
  </compound>
  <compound kind="dir">
    <name>include/aikido/planner/vectorfield</name>
    <path>/include/aikido/planner/vectorfield/</path>
    <filename>dir_8b8419f9655de7ee59c88a2d83505461.html</filename>
    <file>BodyNodePoseVectorField.hpp</file>
    <file>MoveEndEffectorOffsetVectorField.hpp</file>
    <file>MoveEndEffectorPoseVectorField.hpp</file>
    <file>VectorField.hpp</file>
    <file>VectorFieldPlanner.hpp</file>
    <file>VectorFieldPlannerStatus.hpp</file>
    <file>VectorFieldUtil.hpp</file>
  </compound>
</tagfile>
